#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(unreachable_patterns)]

// DO NOT EDIT! This file is generated automatically

pub const GL_DEPTH_BUFFER_BIT: u32 = 0x00000100;
pub const GL_STENCIL_BUFFER_BIT: u32 = 0x00000400;
pub const GL_COLOR_BUFFER_BIT: u32 = 0x00004000;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR: u32 = 0x00000008;
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT: u32 = 0x00000010;
pub const GL_MAP_READ_BIT: u32 = 0x0001;
pub const GL_MAP_WRITE_BIT: u32 = 0x0002;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 0x0004;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 0x0008;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 0x0010;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 0x0020;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 0x00000001;
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR: u32 = 0x00000001;
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR: u32 = 0x00000002;
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR: u32 = 0x00000004;
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR: u32 = 0x00000008;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR: u32 = 0x00000010;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR: u32 = 0x00000020;
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR: u32 = 0x00000040;
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR: u32 = 0x00000080;
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: u32 = 0x00000100;
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM: u32 = 0x00000004;
pub const GL_SHARED_EDGE_NV: u32 = 0xC0;
pub const GL_FALSE: u32 = 0;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_ZERO: u32 = 0;
pub const GL_NONE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const GL_ONE: u32 = 1;
pub const GL_INVALID_INDEX: u32 = 0xFFFFFFFF;
pub const GL_TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
pub const GL_POINTS: u32 = 0x0000;
pub const GL_LINES: u32 = 0x0001;
pub const GL_LINE_LOOP: u32 = 0x0002;
pub const GL_LINE_STRIP: u32 = 0x0003;
pub const GL_TRIANGLES: u32 = 0x0004;
pub const GL_TRIANGLE_STRIP: u32 = 0x0005;
pub const GL_TRIANGLE_FAN: u32 = 0x0006;
pub const GL_NEVER: u32 = 0x0200;
pub const GL_LESS: u32 = 0x0201;
pub const GL_EQUAL: u32 = 0x0202;
pub const GL_LEQUAL: u32 = 0x0203;
pub const GL_GREATER: u32 = 0x0204;
pub const GL_NOTEQUAL: u32 = 0x0205;
pub const GL_GEQUAL: u32 = 0x0206;
pub const GL_ALWAYS: u32 = 0x0207;
pub const GL_SRC_COLOR: u32 = 0x0300;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 0x0301;
pub const GL_SRC_ALPHA: u32 = 0x0302;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 0x0303;
pub const GL_DST_ALPHA: u32 = 0x0304;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 0x0305;
pub const GL_DST_COLOR: u32 = 0x0306;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 0x0307;
pub const GL_SRC_ALPHA_SATURATE: u32 = 0x0308;
pub const GL_FRONT: u32 = 0x0404;
pub const GL_BACK: u32 = 0x0405;
pub const GL_FRONT_AND_BACK: u32 = 0x0408;
pub const GL_INVALID_ENUM: u32 = 0x0500;
pub const GL_INVALID_VALUE: u32 = 0x0501;
pub const GL_INVALID_OPERATION: u32 = 0x0502;
pub const GL_OUT_OF_MEMORY: u32 = 0x0505;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 0x0506;
pub const GL_CW: u32 = 0x0900;
pub const GL_CCW: u32 = 0x0901;
pub const GL_LINE_WIDTH: u32 = 0x0B21;
pub const GL_CULL_FACE: u32 = 0x0B44;
pub const GL_CULL_FACE_MODE: u32 = 0x0B45;
pub const GL_FRONT_FACE: u32 = 0x0B46;
pub const GL_DEPTH_RANGE: u32 = 0x0B70;
pub const GL_DEPTH_TEST: u32 = 0x0B71;
pub const GL_DEPTH_WRITEMASK: u32 = 0x0B72;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 0x0B73;
pub const GL_DEPTH_FUNC: u32 = 0x0B74;
pub const GL_STENCIL_TEST: u32 = 0x0B90;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 0x0B91;
pub const GL_STENCIL_FUNC: u32 = 0x0B92;
pub const GL_STENCIL_VALUE_MASK: u32 = 0x0B93;
pub const GL_STENCIL_FAIL: u32 = 0x0B94;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 0x0B95;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 0x0B96;
pub const GL_STENCIL_REF: u32 = 0x0B97;
pub const GL_STENCIL_WRITEMASK: u32 = 0x0B98;
pub const GL_VIEWPORT: u32 = 0x0BA2;
pub const GL_DITHER: u32 = 0x0BD0;
pub const GL_BLEND: u32 = 0x0BE2;
pub const GL_READ_BUFFER: u32 = 0x0C02;
pub const GL_SCISSOR_BOX: u32 = 0x0C10;
pub const GL_SCISSOR_TEST: u32 = 0x0C11;
pub const GL_COLOR_CLEAR_VALUE: u32 = 0x0C22;
pub const GL_COLOR_WRITEMASK: u32 = 0x0C23;
pub const GL_UNPACK_ROW_LENGTH: u32 = 0x0CF2;
pub const GL_UNPACK_ROW_LENGTH_EXT: u32 = 0x0CF2;
pub const GL_UNPACK_SKIP_ROWS: u32 = 0x0CF3;
pub const GL_UNPACK_SKIP_ROWS_EXT: u32 = 0x0CF3;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 0x0CF4;
pub const GL_UNPACK_SKIP_PIXELS_EXT: u32 = 0x0CF4;
pub const GL_UNPACK_ALIGNMENT: u32 = 0x0CF5;
pub const GL_PACK_ROW_LENGTH: u32 = 0x0D02;
pub const GL_PACK_ROW_LENGTH_NV: u32 = 0x0D02;
pub const GL_PACK_SKIP_ROWS: u32 = 0x0D03;
pub const GL_PACK_SKIP_ROWS_NV: u32 = 0x0D03;
pub const GL_PACK_SKIP_PIXELS: u32 = 0x0D04;
pub const GL_PACK_SKIP_PIXELS_NV: u32 = 0x0D04;
pub const GL_PACK_ALIGNMENT: u32 = 0x0D05;
pub const GL_MAX_CLIP_DISTANCES_EXT: u32 = 0x0D32;
pub const GL_MAX_CLIP_DISTANCES_APPLE: u32 = 0x0D32;
pub const GL_MAX_TEXTURE_SIZE: u32 = 0x0D33;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 0x0D3A;
pub const GL_SUBPIXEL_BITS: u32 = 0x0D50;
pub const GL_RED_BITS: u32 = 0x0D52;
pub const GL_GREEN_BITS: u32 = 0x0D53;
pub const GL_BLUE_BITS: u32 = 0x0D54;
pub const GL_ALPHA_BITS: u32 = 0x0D55;
pub const GL_DEPTH_BITS: u32 = 0x0D56;
pub const GL_STENCIL_BITS: u32 = 0x0D57;
pub const GL_TEXTURE_2D: u32 = 0x0DE1;
pub const GL_TEXTURE_BORDER_COLOR_NV: u32 = 0x1004;
pub const GL_DONT_CARE: u32 = 0x1100;
pub const GL_FASTEST: u32 = 0x1101;
pub const GL_NICEST: u32 = 0x1102;
pub const GL_BYTE: u32 = 0x1400;
pub const GL_UNSIGNED_BYTE: u32 = 0x1401;
pub const GL_SHORT: u32 = 0x1402;
pub const GL_UNSIGNED_SHORT: u32 = 0x1403;
pub const GL_INT: u32 = 0x1404;
pub const GL_UNSIGNED_INT: u32 = 0x1405;
pub const GL_FLOAT: u32 = 0x1406;
pub const GL_HALF_FLOAT: u32 = 0x140B;
pub const GL_FIXED: u32 = 0x140C;
pub const GL_INVERT: u32 = 0x150A;
pub const GL_TEXTURE: u32 = 0x1702;
pub const GL_COLOR: u32 = 0x1800;
pub const GL_DEPTH: u32 = 0x1801;
pub const GL_STENCIL: u32 = 0x1802;
pub const GL_STENCIL_INDEX_OES: u32 = 0x1901;
pub const GL_DEPTH_COMPONENT: u32 = 0x1902;
pub const GL_RED: u32 = 0x1903;
pub const GL_RED_EXT: u32 = 0x1903;
pub const GL_GREEN: u32 = 0x1904;
pub const GL_BLUE: u32 = 0x1905;
pub const GL_ALPHA: u32 = 0x1906;
pub const GL_RGB: u32 = 0x1907;
pub const GL_RGBA: u32 = 0x1908;
pub const GL_LUMINANCE: u32 = 0x1909;
pub const GL_LUMINANCE_ALPHA: u32 = 0x190A;
pub const GL_KEEP: u32 = 0x1E00;
pub const GL_REPLACE: u32 = 0x1E01;
pub const GL_INCR: u32 = 0x1E02;
pub const GL_DECR: u32 = 0x1E03;
pub const GL_VENDOR: u32 = 0x1F00;
pub const GL_RENDERER: u32 = 0x1F01;
pub const GL_VERSION: u32 = 0x1F02;
pub const GL_EXTENSIONS: u32 = 0x1F03;
pub const GL_NEAREST: u32 = 0x2600;
pub const GL_LINEAR: u32 = 0x2601;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 0x2700;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 0x2701;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 0x2702;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 0x2703;
pub const GL_TEXTURE_MAG_FILTER: u32 = 0x2800;
pub const GL_TEXTURE_MIN_FILTER: u32 = 0x2801;
pub const GL_TEXTURE_WRAP_S: u32 = 0x2802;
pub const GL_TEXTURE_WRAP_T: u32 = 0x2803;
pub const GL_REPEAT: u32 = 0x2901;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 0x2A00;
pub const GL_CLIP_DISTANCE0_EXT: u32 = 0x3000;
pub const GL_CLIP_DISTANCE0_APPLE: u32 = 0x3000;
pub const GL_CLIP_DISTANCE1_EXT: u32 = 0x3001;
pub const GL_CLIP_DISTANCE1_APPLE: u32 = 0x3001;
pub const GL_CLIP_DISTANCE2_EXT: u32 = 0x3002;
pub const GL_CLIP_DISTANCE2_APPLE: u32 = 0x3002;
pub const GL_CLIP_DISTANCE3_EXT: u32 = 0x3003;
pub const GL_CLIP_DISTANCE3_APPLE: u32 = 0x3003;
pub const GL_CLIP_DISTANCE4_EXT: u32 = 0x3004;
pub const GL_CLIP_DISTANCE4_APPLE: u32 = 0x3004;
pub const GL_CLIP_DISTANCE5_EXT: u32 = 0x3005;
pub const GL_CLIP_DISTANCE5_APPLE: u32 = 0x3005;
pub const GL_CLIP_DISTANCE6_EXT: u32 = 0x3006;
pub const GL_CLIP_DISTANCE6_APPLE: u32 = 0x3006;
pub const GL_CLIP_DISTANCE7_EXT: u32 = 0x3007;
pub const GL_CLIP_DISTANCE7_APPLE: u32 = 0x3007;
pub const GL_CONSTANT_COLOR: u32 = 0x8001;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 0x8002;
pub const GL_CONSTANT_ALPHA: u32 = 0x8003;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 0x8004;
pub const GL_BLEND_COLOR: u32 = 0x8005;
pub const GL_FUNC_ADD: u32 = 0x8006;
pub const GL_MIN: u32 = 0x8007;
pub const GL_MAX: u32 = 0x8008;
pub const GL_BLEND_EQUATION: u32 = 0x8009;
pub const GL_BLEND_EQUATION_RGB: u32 = 0x8009;
pub const GL_FUNC_SUBTRACT: u32 = 0x800A;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 0x800B;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 0x8033;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 0x8034;
pub const GL_POLYGON_OFFSET_FILL: u32 = 0x8037;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 0x8038;
pub const GL_ALPHA8_OES: u32 = 0x803C;
pub const GL_LUMINANCE8_OES: u32 = 0x8040;
pub const GL_LUMINANCE4_ALPHA4_OES: u32 = 0x8043;
pub const GL_LUMINANCE8_ALPHA8_OES: u32 = 0x8045;
pub const GL_RGB8: u32 = 0x8051;
pub const GL_RGB8_OES: u32 = 0x8051;
pub const GL_RGB10_EXT: u32 = 0x8052;
pub const GL_RGB16_EXT: u32 = 0x8054;
pub const GL_RGBA4: u32 = 0x8056;
pub const GL_RGBA4_OES: u32 = 0x8056;
pub const GL_RGB5_A1: u32 = 0x8057;
pub const GL_RGB5_A1_OES: u32 = 0x8057;
pub const GL_RGBA8: u32 = 0x8058;
pub const GL_RGBA8_OES: u32 = 0x8058;
pub const GL_RGB10_A2: u32 = 0x8059;
pub const GL_RGB10_A2_EXT: u32 = 0x8059;
pub const GL_RGBA16_EXT: u32 = 0x805B;
pub const GL_TEXTURE_BINDING_2D: u32 = 0x8069;
pub const GL_TEXTURE_BINDING_3D: u32 = 0x806A;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 0x806D;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 0x806E;
pub const GL_TEXTURE_3D: u32 = 0x806F;
pub const GL_TEXTURE_WRAP_R: u32 = 0x8072;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 0x8073;
pub const GL_MULTISAMPLE_EXT: u32 = 0x809D;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT: u32 = 0x809F;
pub const GL_SAMPLE_COVERAGE: u32 = 0x80A0;
pub const GL_SAMPLE_BUFFERS: u32 = 0x80A8;
pub const GL_SAMPLES: u32 = 0x80A9;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 0x80AA;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 0x80AB;
pub const GL_BLEND_DST_RGB: u32 = 0x80C8;
pub const GL_BLEND_SRC_RGB: u32 = 0x80C9;
pub const GL_BLEND_DST_ALPHA: u32 = 0x80CA;
pub const GL_BLEND_SRC_ALPHA: u32 = 0x80CB;
pub const GL_BGR_EXT: u32 = 0x80E0;
pub const GL_BGRA_EXT: u32 = 0x80E1;
pub const GL_BGRA_IMG: u32 = 0x80E1;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 0x80E8;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 0x80E9;
pub const GL_CLAMP_TO_BORDER_NV: u32 = 0x812D;
pub const GL_CLAMP_TO_EDGE: u32 = 0x812F;
pub const GL_TEXTURE_MIN_LOD: u32 = 0x813A;
pub const GL_TEXTURE_MAX_LOD: u32 = 0x813B;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 0x813C;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 0x813D;
pub const GL_TEXTURE_MAX_LEVEL_APPLE: u32 = 0x813D;
pub const GL_GENERATE_MIPMAP_HINT: u32 = 0x8192;
pub const GL_DEPTH_COMPONENT16: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT16_OES: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT24: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT24_OES: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT32_OES: u32 = 0x81A7;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 0x8210;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: u32 = 0x8210;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: u32 = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 0x8212;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 0x8213;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 0x8214;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 0x8215;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 0x8216;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 0x8217;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 0x8218;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 0x8219;
pub const GL_FRAMEBUFFER_UNDEFINED_OES: u32 = 0x8219;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 0x821A;
pub const GL_MAJOR_VERSION: u32 = 0x821B;
pub const GL_MINOR_VERSION: u32 = 0x821C;
pub const GL_NUM_EXTENSIONS: u32 = 0x821D;
pub const GL_RG: u32 = 0x8227;
pub const GL_RG_EXT: u32 = 0x8227;
pub const GL_RG_INTEGER: u32 = 0x8228;
pub const GL_R8: u32 = 0x8229;
pub const GL_R8_EXT: u32 = 0x8229;
pub const GL_R16_EXT: u32 = 0x822A;
pub const GL_RG8: u32 = 0x822B;
pub const GL_RG8_EXT: u32 = 0x822B;
pub const GL_RG16_EXT: u32 = 0x822C;
pub const GL_R16F: u32 = 0x822D;
pub const GL_R16F_EXT: u32 = 0x822D;
pub const GL_R32F: u32 = 0x822E;
pub const GL_RG16F: u32 = 0x822F;
pub const GL_RG16F_EXT: u32 = 0x822F;
pub const GL_RG32F: u32 = 0x8230;
pub const GL_R8I: u32 = 0x8231;
pub const GL_R8UI: u32 = 0x8232;
pub const GL_R16I: u32 = 0x8233;
pub const GL_R16UI: u32 = 0x8234;
pub const GL_R32I: u32 = 0x8235;
pub const GL_R32UI: u32 = 0x8236;
pub const GL_RG8I: u32 = 0x8237;
pub const GL_RG8UI: u32 = 0x8238;
pub const GL_RG16I: u32 = 0x8239;
pub const GL_RG16UI: u32 = 0x823A;
pub const GL_RG32I: u32 = 0x823B;
pub const GL_RG32UI: u32 = 0x823C;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 0x8257;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 0x82DF;
pub const GL_MAX_CULL_DISTANCES_EXT: u32 = 0x82F9;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT: u32 = 0x82FA;
pub const GL_CONTEXT_RELEASE_BEHAVIOR: u32 = 0x82FB;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_KHR: u32 = 0x82FB;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: u32 = 0x82FC;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR: u32 = 0x82FC;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 0x8363;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT: u32 = 0x8365;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG: u32 = 0x8365;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT: u32 = 0x8366;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 0x8368;
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT: u32 = 0x8368;
pub const GL_MIRRORED_REPEAT: u32 = 0x8370;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 0x83F0;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 0x83F1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE: u32 = 0x83F2;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 0x83F2;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE: u32 = 0x83F3;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 0x83F3;
pub const GL_BLACKHOLE_RENDER_INTEL: u32 = 0x83FC;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL: u32 = 0x83FE;
pub const GL_ALIASED_POINT_SIZE_RANGE: u32 = 0x846D;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 0x846E;
pub const GL_TEXTURE0: u32 = 0x84C0;
pub const GL_TEXTURE1: u32 = 0x84C1;
pub const GL_TEXTURE2: u32 = 0x84C2;
pub const GL_TEXTURE3: u32 = 0x84C3;
pub const GL_TEXTURE4: u32 = 0x84C4;
pub const GL_TEXTURE5: u32 = 0x84C5;
pub const GL_TEXTURE6: u32 = 0x84C6;
pub const GL_TEXTURE7: u32 = 0x84C7;
pub const GL_TEXTURE8: u32 = 0x84C8;
pub const GL_TEXTURE9: u32 = 0x84C9;
pub const GL_TEXTURE10: u32 = 0x84CA;
pub const GL_TEXTURE11: u32 = 0x84CB;
pub const GL_TEXTURE12: u32 = 0x84CC;
pub const GL_TEXTURE13: u32 = 0x84CD;
pub const GL_TEXTURE14: u32 = 0x84CE;
pub const GL_TEXTURE15: u32 = 0x84CF;
pub const GL_TEXTURE16: u32 = 0x84D0;
pub const GL_TEXTURE17: u32 = 0x84D1;
pub const GL_TEXTURE18: u32 = 0x84D2;
pub const GL_TEXTURE19: u32 = 0x84D3;
pub const GL_TEXTURE20: u32 = 0x84D4;
pub const GL_TEXTURE21: u32 = 0x84D5;
pub const GL_TEXTURE22: u32 = 0x84D6;
pub const GL_TEXTURE23: u32 = 0x84D7;
pub const GL_TEXTURE24: u32 = 0x84D8;
pub const GL_TEXTURE25: u32 = 0x84D9;
pub const GL_TEXTURE26: u32 = 0x84DA;
pub const GL_TEXTURE27: u32 = 0x84DB;
pub const GL_TEXTURE28: u32 = 0x84DC;
pub const GL_TEXTURE29: u32 = 0x84DD;
pub const GL_TEXTURE30: u32 = 0x84DE;
pub const GL_TEXTURE31: u32 = 0x84DF;
pub const GL_ACTIVE_TEXTURE: u32 = 0x84E0;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 0x84E8;
pub const GL_DEPTH_STENCIL: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_OES: u32 = 0x84F9;
pub const GL_UNSIGNED_INT_24_8: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_24_8_OES: u32 = 0x84FA;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 0x84FD;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FE;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FF;
pub const GL_INCR_WRAP: u32 = 0x8507;
pub const GL_DECR_WRAP: u32 = 0x8508;
pub const GL_TEXTURE_CUBE_MAP: u32 = 0x8513;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 0x8514;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 0x851A;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 0x851C;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 0x85B5;
pub const GL_VERTEX_ARRAY_BINDING_OES: u32 = 0x85B5;
pub const GL_UNSIGNED_SHORT_8_8_APPLE: u32 = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: u32 = 0x85BB;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 0x8625;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 0x8626;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 0x8645;
pub const GL_DEPTH_CLAMP_EXT: u32 = 0x864F;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A2;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A3;
pub const GL_Z400_BINARY_AMD: u32 = 0x8740;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 0x8741;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 0x8743;
pub const GL_PROGRAM_BINARY_FORMAT_MESA: u32 = 0x875F;
pub const GL_BUFFER_SIZE: u32 = 0x8764;
pub const GL_BUFFER_USAGE: u32 = 0x8765;
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD: u32 = 0x87EE;
pub const GL_3DC_X_AMD: u32 = 0x87F9;
pub const GL_3DC_XY_AMD: u32 = 0x87FA;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 0x87FE;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 0x87FF;
pub const GL_STENCIL_BACK_FUNC: u32 = 0x8800;
pub const GL_STENCIL_BACK_FAIL: u32 = 0x8801;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 0x8803;
pub const GL_RGBA32F: u32 = 0x8814;
pub const GL_RGB32F: u32 = 0x8815;
pub const GL_RGBA16F: u32 = 0x881A;
pub const GL_RGBA16F_EXT: u32 = 0x881A;
pub const GL_RGB16F: u32 = 0x881B;
pub const GL_RGB16F_EXT: u32 = 0x881B;
pub const GL_WRITEONLY_RENDERING_QCOM: u32 = 0x8823;
pub const GL_MAX_DRAW_BUFFERS: u32 = 0x8824;
pub const GL_DRAW_BUFFER0: u32 = 0x8825;
pub const GL_DRAW_BUFFER1: u32 = 0x8826;
pub const GL_DRAW_BUFFER2: u32 = 0x8827;
pub const GL_DRAW_BUFFER3: u32 = 0x8828;
pub const GL_DRAW_BUFFER4: u32 = 0x8829;
pub const GL_DRAW_BUFFER5: u32 = 0x882A;
pub const GL_DRAW_BUFFER6: u32 = 0x882B;
pub const GL_DRAW_BUFFER7: u32 = 0x882C;
pub const GL_DRAW_BUFFER8: u32 = 0x882D;
pub const GL_DRAW_BUFFER9: u32 = 0x882E;
pub const GL_DRAW_BUFFER10: u32 = 0x882F;
pub const GL_DRAW_BUFFER11: u32 = 0x8830;
pub const GL_DRAW_BUFFER12: u32 = 0x8831;
pub const GL_DRAW_BUFFER13: u32 = 0x8832;
pub const GL_DRAW_BUFFER14: u32 = 0x8833;
pub const GL_DRAW_BUFFER15: u32 = 0x8834;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 0x883D;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 0x884C;
pub const GL_TEXTURE_COMPARE_MODE_EXT: u32 = 0x884C;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 0x884D;
pub const GL_TEXTURE_COMPARE_FUNC_EXT: u32 = 0x884D;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 0x884E;
pub const GL_COMPARE_REF_TO_TEXTURE_EXT: u32 = 0x884E;
pub const GL_CURRENT_QUERY: u32 = 0x8865;
pub const GL_QUERY_RESULT: u32 = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 0x8867;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 0x8869;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 0x886A;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 0x8872;
pub const GL_ARRAY_BUFFER: u32 = 0x8892;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 0x8893;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 0x8894;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 0x8895;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 0x889F;
pub const GL_BUFFER_MAPPED: u32 = 0x88BC;
pub const GL_BUFFER_MAP_POINTER: u32 = 0x88BD;
pub const GL_STREAM_DRAW: u32 = 0x88E0;
pub const GL_STREAM_READ: u32 = 0x88E1;
pub const GL_STREAM_COPY: u32 = 0x88E2;
pub const GL_STATIC_DRAW: u32 = 0x88E4;
pub const GL_STATIC_READ: u32 = 0x88E5;
pub const GL_STATIC_COPY: u32 = 0x88E6;
pub const GL_DYNAMIC_DRAW: u32 = 0x88E8;
pub const GL_DYNAMIC_READ: u32 = 0x88E9;
pub const GL_DYNAMIC_COPY: u32 = 0x88EA;
pub const GL_PIXEL_PACK_BUFFER: u32 = 0x88EB;
pub const GL_PIXEL_PACK_BUFFER_NV: u32 = 0x88EB;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 0x88EC;
pub const GL_PIXEL_UNPACK_BUFFER_NV: u32 = 0x88EC;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 0x88ED;
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV: u32 = 0x88ED;
pub const GL_ETC1_SRGB8_NV: u32 = 0x88EE;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 0x88EF;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV: u32 = 0x88EF;
pub const GL_DEPTH24_STENCIL8: u32 = 0x88F0;
pub const GL_DEPTH24_STENCIL8_OES: u32 = 0x88F0;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 0x88FE;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 0x88FF;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 0x8904;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 0x8905;
pub const GL_SAMPLER_BINDING: u32 = 0x8919;
pub const GL_UNIFORM_BUFFER: u32 = 0x8A11;
pub const GL_RGB_422_APPLE: u32 = 0x8A1F;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 0x8A28;
pub const GL_UNIFORM_BUFFER_START: u32 = 0x8A29;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 0x8A2A;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 0x8A2B;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 0x8A2D;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 0x8A2E;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 0x8A2F;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 0x8A30;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8A31;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8A33;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 0x8A34;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 0x8A35;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 0x8A36;
pub const GL_UNIFORM_TYPE: u32 = 0x8A37;
pub const GL_UNIFORM_SIZE: u32 = 0x8A38;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 0x8A39;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 0x8A3A;
pub const GL_UNIFORM_OFFSET: u32 = 0x8A3B;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 0x8A3C;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 0x8A3D;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 0x8A3E;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 0x8A3F;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 0x8A40;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 0x8A41;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 0x8A42;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 0x8A43;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 0x8A44;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x8A46;
pub const GL_TEXTURE_SRGB_DECODE_EXT: u32 = 0x8A48;
pub const GL_DECODE_EXT: u32 = 0x8A49;
pub const GL_SKIP_DECODE_EXT: u32 = 0x8A4A;
pub const GL_RGB_RAW_422_APPLE: u32 = 0x8A51;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: u32 = 0x8A52;
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT: u32 = 0x8A54;
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT: u32 = 0x8A55;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT: u32 = 0x8A56;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT: u32 = 0x8A57;
pub const GL_FRAGMENT_SHADER: u32 = 0x8B30;
pub const GL_VERTEX_SHADER: u32 = 0x8B31;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8B49;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8B4A;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 0x8B4B;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 0x8B4C;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 0x8B4D;
pub const GL_SHADER_TYPE: u32 = 0x8B4F;
pub const GL_FLOAT_VEC2: u32 = 0x8B50;
pub const GL_FLOAT_VEC3: u32 = 0x8B51;
pub const GL_FLOAT_VEC4: u32 = 0x8B52;
pub const GL_INT_VEC2: u32 = 0x8B53;
pub const GL_INT_VEC3: u32 = 0x8B54;
pub const GL_INT_VEC4: u32 = 0x8B55;
pub const GL_BOOL: u32 = 0x8B56;
pub const GL_BOOL_VEC2: u32 = 0x8B57;
pub const GL_BOOL_VEC3: u32 = 0x8B58;
pub const GL_BOOL_VEC4: u32 = 0x8B59;
pub const GL_FLOAT_MAT2: u32 = 0x8B5A;
pub const GL_FLOAT_MAT3: u32 = 0x8B5B;
pub const GL_FLOAT_MAT4: u32 = 0x8B5C;
pub const GL_SAMPLER_2D: u32 = 0x8B5E;
pub const GL_SAMPLER_3D: u32 = 0x8B5F;
pub const GL_SAMPLER_CUBE: u32 = 0x8B60;
pub const GL_SAMPLER_2D_SHADOW: u32 = 0x8B62;
pub const GL_SAMPLER_2D_SHADOW_EXT: u32 = 0x8B62;
pub const GL_FLOAT_MAT2x3: u32 = 0x8B65;
pub const GL_FLOAT_MAT2x4: u32 = 0x8B66;
pub const GL_FLOAT_MAT3x2: u32 = 0x8B67;
pub const GL_FLOAT_MAT3x4: u32 = 0x8B68;
pub const GL_FLOAT_MAT4x2: u32 = 0x8B69;
pub const GL_FLOAT_MAT4x3: u32 = 0x8B6A;
pub const GL_DELETE_STATUS: u32 = 0x8B80;
pub const GL_COMPILE_STATUS: u32 = 0x8B81;
pub const GL_LINK_STATUS: u32 = 0x8B82;
pub const GL_VALIDATE_STATUS: u32 = 0x8B83;
pub const GL_INFO_LOG_LENGTH: u32 = 0x8B84;
pub const GL_ATTACHED_SHADERS: u32 = 0x8B85;
pub const GL_ACTIVE_UNIFORMS: u32 = 0x8B86;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 0x8B87;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 0x8B88;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 0x8B89;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 0x8B8A;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES: u32 = 0x8B8B;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 0x8B8C;
pub const GL_CURRENT_PROGRAM: u32 = 0x8B8D;
pub const GL_PALETTE4_RGB8_OES: u32 = 0x8B90;
pub const GL_PALETTE4_RGBA8_OES: u32 = 0x8B91;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 0x8B92;
pub const GL_PALETTE4_RGBA4_OES: u32 = 0x8B93;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 0x8B94;
pub const GL_PALETTE8_RGB8_OES: u32 = 0x8B95;
pub const GL_PALETTE8_RGBA8_OES: u32 = 0x8B96;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 0x8B97;
pub const GL_PALETTE8_RGBA4_OES: u32 = 0x8B98;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 0x8B99;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 0x8B9A;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 0x8B9B;
pub const GL_FRAMEBUFFER_FLIP_X_MESA: u32 = 0x8BBC;
pub const GL_FRAMEBUFFER_SWAP_XY_MESA: u32 = 0x8BBD;
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT: u32 = 0x8BE7;
pub const GL_TEXTURE_PROTECTED_EXT: u32 = 0x8BFA;
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG: u32 = 0x8C00;
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG: u32 = 0x8C01;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: u32 = 0x8C02;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: u32 = 0x8C03;
pub const GL_SGX_BINARY_IMG: u32 = 0x8C0A;
pub const GL_UNSIGNED_NORMALIZED: u32 = 0x8C17;
pub const GL_UNSIGNED_NORMALIZED_EXT: u32 = 0x8C17;
pub const GL_TEXTURE_2D_ARRAY: u32 = 0x8C1A;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 0x8C1D;
pub const GL_ANY_SAMPLES_PASSED: u32 = 0x8C2F;
pub const GL_R11F_G11F_B10F: u32 = 0x8C3A;
pub const GL_R11F_G11F_B10F_APPLE: u32 = 0x8C3A;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 0x8C3B;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE: u32 = 0x8C3B;
pub const GL_RGB9_E5: u32 = 0x8C3D;
pub const GL_RGB9_E5_APPLE: u32 = 0x8C3D;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 0x8C3E;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE: u32 = 0x8C3E;
pub const GL_SRGB: u32 = 0x8C40;
pub const GL_SRGB_EXT: u32 = 0x8C40;
pub const GL_SRGB8: u32 = 0x8C41;
pub const GL_SRGB8_NV: u32 = 0x8C41;
pub const GL_SRGB_ALPHA_EXT: u32 = 0x8C42;
pub const GL_SRGB8_ALPHA8: u32 = 0x8C43;
pub const GL_SRGB8_ALPHA8_EXT: u32 = 0x8C43;
pub const GL_SLUMINANCE_ALPHA_NV: u32 = 0x8C44;
pub const GL_SLUMINANCE8_ALPHA8_NV: u32 = 0x8C45;
pub const GL_SLUMINANCE_NV: u32 = 0x8C46;
pub const GL_SLUMINANCE8_NV: u32 = 0x8C47;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: u32 = 0x8C4C;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV: u32 = 0x8C4C;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: u32 = 0x8C4D;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV: u32 = 0x8C4D;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: u32 = 0x8C4E;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV: u32 = 0x8C4E;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: u32 = 0x8C4F;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV: u32 = 0x8C4F;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 0x8C76;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 0x8C7F;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 0x8C80;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 0x8C88;
pub const GL_RASTERIZER_DISCARD: u32 = 0x8C89;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 0x8C8B;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 0x8C8C;
pub const GL_SEPARATE_ATTRIBS: u32 = 0x8C8D;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 0x8C8F;
pub const GL_ATC_RGB_AMD: u32 = 0x8C92;
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD: u32 = 0x8C93;
pub const GL_TEXTURE_LOD_BIAS_QCOM: u32 = 0x8C96;
pub const GL_STENCIL_BACK_REF: u32 = 0x8CA3;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 0x8CA4;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 0x8CA5;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_RENDERBUFFER_BINDING: u32 = 0x8CA7;
pub const GL_READ_FRAMEBUFFER: u32 = 0x8CA8;
pub const GL_DRAW_FRAMEBUFFER: u32 = 0x8CA9;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 0x8CAA;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 0x8CAB;
pub const GL_DEPTH_COMPONENT32F: u32 = 0x8CAC;
pub const GL_DEPTH32F_STENCIL8: u32 = 0x8CAD;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: u32 = 0x8CD9;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 0x8CDD;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 0x8CDF;
pub const GL_MAX_COLOR_ATTACHMENTS_NV: u32 = 0x8CDF;
pub const GL_COLOR_ATTACHMENT0: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT0_NV: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT1: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT1_NV: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT2: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT2_NV: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT3: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT3_NV: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT4: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT4_NV: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT5: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT5_NV: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT6: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT6_NV: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT7: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT7_NV: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT8: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT8_NV: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT9: u32 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT9_NV: u32 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT10: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT10_NV: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT11: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT11_NV: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT12: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT12_NV: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT13: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT13_NV: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT14: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT14_NV: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT15: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT15_NV: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT16: u32 = 0x8CF0;
pub const GL_COLOR_ATTACHMENT17: u32 = 0x8CF1;
pub const GL_COLOR_ATTACHMENT18: u32 = 0x8CF2;
pub const GL_COLOR_ATTACHMENT19: u32 = 0x8CF3;
pub const GL_COLOR_ATTACHMENT20: u32 = 0x8CF4;
pub const GL_COLOR_ATTACHMENT21: u32 = 0x8CF5;
pub const GL_COLOR_ATTACHMENT22: u32 = 0x8CF6;
pub const GL_COLOR_ATTACHMENT23: u32 = 0x8CF7;
pub const GL_COLOR_ATTACHMENT24: u32 = 0x8CF8;
pub const GL_COLOR_ATTACHMENT25: u32 = 0x8CF9;
pub const GL_COLOR_ATTACHMENT26: u32 = 0x8CFA;
pub const GL_COLOR_ATTACHMENT27: u32 = 0x8CFB;
pub const GL_COLOR_ATTACHMENT28: u32 = 0x8CFC;
pub const GL_COLOR_ATTACHMENT29: u32 = 0x8CFD;
pub const GL_COLOR_ATTACHMENT30: u32 = 0x8CFE;
pub const GL_COLOR_ATTACHMENT31: u32 = 0x8CFF;
pub const GL_DEPTH_ATTACHMENT: u32 = 0x8D00;
pub const GL_STENCIL_ATTACHMENT: u32 = 0x8D20;
pub const GL_FRAMEBUFFER: u32 = 0x8D40;
pub const GL_RENDERBUFFER: u32 = 0x8D41;
pub const GL_RENDERBUFFER_WIDTH: u32 = 0x8D42;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 0x8D44;
pub const GL_STENCIL_INDEX1_OES: u32 = 0x8D46;
pub const GL_STENCIL_INDEX4_OES: u32 = 0x8D47;
pub const GL_STENCIL_INDEX8: u32 = 0x8D48;
pub const GL_STENCIL_INDEX8_OES: u32 = 0x8D48;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 0x8D50;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 0x8D51;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 0x8D52;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 0x8D53;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 0x8D54;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 0x8D55;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 0x8D56;
pub const GL_MAX_SAMPLES: u32 = 0x8D57;
pub const GL_HALF_FLOAT_OES: u32 = 0x8D61;
pub const GL_RGB565_OES: u32 = 0x8D62;
pub const GL_RGB565: u32 = 0x8D62;
pub const GL_ETC1_RGB8_OES: u32 = 0x8D64;
pub const GL_TEXTURE_EXTERNAL_OES: u32 = 0x8D65;
pub const GL_SAMPLER_EXTERNAL_OES: u32 = 0x8D66;
pub const GL_TEXTURE_BINDING_EXTERNAL_OES: u32 = 0x8D67;
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES: u32 = 0x8D68;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: u32 = 0x8D69;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: u32 = 0x8D6A;
pub const GL_MAX_ELEMENT_INDEX: u32 = 0x8D6B;
pub const GL_RGBA32UI: u32 = 0x8D70;
pub const GL_RGB32UI: u32 = 0x8D71;
pub const GL_RGBA16UI: u32 = 0x8D76;
pub const GL_RGB16UI: u32 = 0x8D77;
pub const GL_RGBA8UI: u32 = 0x8D7C;
pub const GL_RGB8UI: u32 = 0x8D7D;
pub const GL_RGBA32I: u32 = 0x8D82;
pub const GL_RGB32I: u32 = 0x8D83;
pub const GL_RGBA16I: u32 = 0x8D88;
pub const GL_RGB16I: u32 = 0x8D89;
pub const GL_RGBA8I: u32 = 0x8D8E;
pub const GL_RGB8I: u32 = 0x8D8F;
pub const GL_RED_INTEGER: u32 = 0x8D94;
pub const GL_RGB_INTEGER: u32 = 0x8D98;
pub const GL_RGBA_INTEGER: u32 = 0x8D99;
pub const GL_INT_2_10_10_10_REV: u32 = 0x8D9F;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 0x8DAD;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 0x8DB9;
pub const GL_COMPRESSED_RED_RGTC1_EXT: u32 = 0x8DBB;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT: u32 = 0x8DBC;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT: u32 = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: u32 = 0x8DBE;
pub const GL_SAMPLER_2D_ARRAY: u32 = 0x8DC1;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 0x8DC4;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV: u32 = 0x8DC4;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 0x8DC5;
pub const GL_SAMPLER_CUBE_SHADOW_NV: u32 = 0x8DC5;
pub const GL_UNSIGNED_INT_VEC2: u32 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC3: u32 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC4: u32 = 0x8DC8;
pub const GL_INT_SAMPLER_2D: u32 = 0x8DCA;
pub const GL_INT_SAMPLER_3D: u32 = 0x8DCB;
pub const GL_INT_SAMPLER_CUBE: u32 = 0x8DCC;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 0x8DCF;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 0x8DD7;
pub const GL_LOW_FLOAT: u32 = 0x8DF0;
pub const GL_MEDIUM_FLOAT: u32 = 0x8DF1;
pub const GL_HIGH_FLOAT: u32 = 0x8DF2;
pub const GL_LOW_INT: u32 = 0x8DF3;
pub const GL_MEDIUM_INT: u32 = 0x8DF4;
pub const GL_HIGH_INT: u32 = 0x8DF5;
pub const GL_UNSIGNED_INT_10_10_10_2_OES: u32 = 0x8DF6;
pub const GL_INT_10_10_10_2_OES: u32 = 0x8DF7;
pub const GL_SHADER_BINARY_FORMATS: u32 = 0x8DF8;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 0x8DF9;
pub const GL_SHADER_COMPILER: u32 = 0x8DFA;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 0x8DFB;
pub const GL_MAX_VARYING_VECTORS: u32 = 0x8DFC;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 0x8DFD;
pub const GL_TRANSFORM_FEEDBACK: u32 = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_PAUSED: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 0x8E25;
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV: u32 = 0x8E2C;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 0x8E45;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES: u32 = 0x8E5B;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES: u32 = 0x8E5C;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES: u32 = 0x8E5D;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT: u32 = 0x8E8C;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: u32 = 0x8E8D;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: u32 = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: u32 = 0x8E8F;
pub const GL_COPY_READ_BUFFER: u32 = 0x8F36;
pub const GL_COPY_READ_BUFFER_BINDING: u32 = 0x8F36;
pub const GL_COPY_WRITE_BUFFER: u32 = 0x8F37;
pub const GL_COPY_WRITE_BUFFER_BINDING: u32 = 0x8F37;
pub const GL_MALI_SHADER_BINARY_ARM: u32 = 0x8F60;
pub const GL_MALI_PROGRAM_BINARY_ARM: u32 = 0x8F61;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT: u32 = 0x8F63;
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT: u32 = 0x8F64;
pub const GL_FETCH_PER_SAMPLE_ARM: u32 = 0x8F65;
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM: u32 = 0x8F66;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT: u32 = 0x8F67;
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT: u32 = 0x8F69;
pub const GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM: u32 = 0x8F6A;
pub const GL_R8_SNORM: u32 = 0x8F94;
pub const GL_RG8_SNORM: u32 = 0x8F95;
pub const GL_RGB8_SNORM: u32 = 0x8F96;
pub const GL_RGBA8_SNORM: u32 = 0x8F97;
pub const GL_R16_SNORM_EXT: u32 = 0x8F98;
pub const GL_RG16_SNORM_EXT: u32 = 0x8F99;
pub const GL_RGB16_SNORM_EXT: u32 = 0x8F9A;
pub const GL_RGBA16_SNORM_EXT: u32 = 0x8F9B;
pub const GL_SIGNED_NORMALIZED: u32 = 0x8F9C;
pub const GL_PERFMON_GLOBAL_MODE_QCOM: u32 = 0x8FA0;
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM: u32 = 0x8FA1;
pub const GL_BINNING_CONTROL_HINT_QCOM: u32 = 0x8FB0;
pub const GL_CPU_OPTIMIZED_QCOM: u32 = 0x8FB1;
pub const GL_GPU_OPTIMIZED_QCOM: u32 = 0x8FB2;
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM: u32 = 0x8FB3;
pub const GL_SR8_EXT: u32 = 0x8FBD;
pub const GL_SRG8_EXT: u32 = 0x8FBE;
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT: u32 = 0x8FBF;
pub const GL_SHADER_BINARY_VIV: u32 = 0x8FC4;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES: u32 = 0x9009;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES: u32 = 0x900A;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT: u32 = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES: u32 = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT: u32 = 0x900D;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES: u32 = 0x900D;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT: u32 = 0x900E;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES: u32 = 0x900E;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT: u32 = 0x900F;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES: u32 = 0x900F;
pub const GL_FACTOR_MIN_AMD: u32 = 0x901C;
pub const GL_FACTOR_MAX_AMD: u32 = 0x901D;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x9054;
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES: u32 = 0x9054;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x905F;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES: u32 = 0x905F;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 0x906A;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES: u32 = 0x906A;
pub const GL_RGB10_A2UI: u32 = 0x906F;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 0x9111;
pub const GL_OBJECT_TYPE: u32 = 0x9112;
pub const GL_SYNC_CONDITION: u32 = 0x9113;
pub const GL_SYNC_STATUS: u32 = 0x9114;
pub const GL_SYNC_FLAGS: u32 = 0x9115;
pub const GL_SYNC_FENCE: u32 = 0x9116;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 0x9117;
pub const GL_UNSIGNALED: u32 = 0x9118;
pub const GL_SIGNALED: u32 = 0x9119;
pub const GL_ALREADY_SIGNALED: u32 = 0x911A;
pub const GL_TIMEOUT_EXPIRED: u32 = 0x911B;
pub const GL_CONDITION_SATISFIED: u32 = 0x911C;
pub const GL_WAIT_FAILED: u32 = 0x911D;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 0x911F;
pub const GL_BUFFER_MAP_LENGTH: u32 = 0x9120;
pub const GL_BUFFER_MAP_OFFSET: u32 = 0x9121;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 0x9122;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 0x9125;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 0x912F;
pub const GL_SGX_PROGRAM_BINARY_IMG: u32 = 0x9130;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG: u32 = 0x9137;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG: u32 = 0x9138;
pub const GL_CUBIC_IMG: u32 = 0x9139;
pub const GL_CUBIC_MIPMAP_NEAREST_IMG: u32 = 0x913A;
pub const GL_CUBIC_MIPMAP_LINEAR_IMG: u32 = 0x913B;
pub const GL_SHADER_BINARY_DMP: u32 = 0x9250;
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP: u32 = 0x9251;
pub const GL_SMAPHS_PROGRAM_BINARY_DMP: u32 = 0x9252;
pub const GL_DMP_PROGRAM_BINARY_DMP: u32 = 0x9253;
pub const GL_GCCSO_SHADER_BINARY_FJ: u32 = 0x9260;
pub const GL_COMPRESSED_R11_EAC: u32 = 0x9270;
pub const GL_COMPRESSED_SIGNED_R11_EAC: u32 = 0x9271;
pub const GL_COMPRESSED_RG11_EAC: u32 = 0x9272;
pub const GL_COMPRESSED_SIGNED_RG11_EAC: u32 = 0x9273;
pub const GL_COMPRESSED_RGB8_ETC2: u32 = 0x9274;
pub const GL_COMPRESSED_SRGB8_ETC2: u32 = 0x9275;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9276;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9277;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 0x9278;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: u32 = 0x9279;
pub const GL_BLEND_ADVANCED_COHERENT_KHR: u32 = 0x9285;
pub const GL_BLEND_ADVANCED_COHERENT_NV: u32 = 0x9285;
pub const GL_FILL_RECTANGLE_NV: u32 = 0x933C;
pub const GL_TEXTURE_REDUCTION_MODE_EXT: u32 = 0x9366;
pub const GL_WEIGHTED_AVERAGE_EXT: u32 = 0x9367;
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV: u32 = 0x937F;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 0x9380;
pub const GL_BGRA8_EXT: u32 = 0x93A1;
pub const GL_TEXTURE_USAGE_ANGLE: u32 = 0x93A2;
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE: u32 = 0x93A3;
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE: u32 = 0x93A4;
pub const GL_PROGRAM_BINARY_ANGLE: u32 = 0x93A6;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: u32 = 0x93B0;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: u32 = 0x93B1;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: u32 = 0x93B2;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: u32 = 0x93B3;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: u32 = 0x93B4;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: u32 = 0x93B5;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: u32 = 0x93B6;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: u32 = 0x93B7;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: u32 = 0x93B8;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: u32 = 0x93B9;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: u32 = 0x93BA;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: u32 = 0x93BB;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: u32 = 0x93BC;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: u32 = 0x93BD;
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES: u32 = 0x93C0;
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES: u32 = 0x93C1;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES: u32 = 0x93C2;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES: u32 = 0x93C3;
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES: u32 = 0x93C4;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES: u32 = 0x93C5;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES: u32 = 0x93C6;
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES: u32 = 0x93C7;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES: u32 = 0x93C8;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES: u32 = 0x93C9;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: u32 = 0x93D0;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: u32 = 0x93D1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: u32 = 0x93D2;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: u32 = 0x93D3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: u32 = 0x93D4;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: u32 = 0x93D5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: u32 = 0x93D6;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: u32 = 0x93D7;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: u32 = 0x93D8;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: u32 = 0x93D9;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: u32 = 0x93DA;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: u32 = 0x93DB;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: u32 = 0x93DC;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: u32 = 0x93DD;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES: u32 = 0x93E0;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES: u32 = 0x93E1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES: u32 = 0x93E2;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES: u32 = 0x93E3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES: u32 = 0x93E4;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES: u32 = 0x93E5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES: u32 = 0x93E6;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES: u32 = 0x93E7;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES: u32 = 0x93E8;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES: u32 = 0x93E9;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG: u32 = 0x93F0;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG: u32 = 0x93F1;
pub const GL_SUBGROUP_SIZE_KHR: u32 = 0x9532;
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR: u32 = 0x9533;
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR: u32 = 0x9534;
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR: u32 = 0x9535;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: u32 = 0x9550;
pub const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV: u32 = 0x95B1;
pub const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV: u32 = 0x95B2;
pub const GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM: u32 = 0x96A0;
pub const GL_SURFACE_COMPRESSION_EXT: u32 = 0x96C0;
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT: u32 = 0x96C1;
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT: u32 = 0x96C2;
pub const GL_TEXTURE_Y_DEGAMMA_QCOM: u32 = 0x9710;
pub const GL_TEXTURE_CBCR_DEGAMMA_QCOM: u32 = 0x9711;
#[derive(Clone, Copy)]
pub enum GLEnumGroupAlphaFunction {
    GL_NEVER,
    GL_LESS,
    GL_EQUAL,
    GL_LEQUAL,
    GL_GREATER,
    GL_NOTEQUAL,
    GL_GEQUAL,
    GL_ALWAYS,
}
impl GLEnumGroupAlphaFunction {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupAlphaFunction> {
        match raw {
            0x0200 => Some(GLEnumGroupAlphaFunction::GL_NEVER),
            0x0201 => Some(GLEnumGroupAlphaFunction::GL_LESS),
            0x0202 => Some(GLEnumGroupAlphaFunction::GL_EQUAL),
            0x0203 => Some(GLEnumGroupAlphaFunction::GL_LEQUAL),
            0x0204 => Some(GLEnumGroupAlphaFunction::GL_GREATER),
            0x0205 => Some(GLEnumGroupAlphaFunction::GL_NOTEQUAL),
            0x0206 => Some(GLEnumGroupAlphaFunction::GL_GEQUAL),
            0x0207 => Some(GLEnumGroupAlphaFunction::GL_ALWAYS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupAttribMask {
    GL_DEPTH_BUFFER_BIT,
    GL_STENCIL_BUFFER_BIT,
    GL_COLOR_BUFFER_BIT,
}
impl GLEnumGroupAttribMask {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupAttribMask> {
        match raw {
            0x00000100 => Some(GLEnumGroupAttribMask::GL_DEPTH_BUFFER_BIT),
            0x00000400 => Some(GLEnumGroupAttribMask::GL_STENCIL_BUFFER_BIT),
            0x00004000 => Some(GLEnumGroupAttribMask::GL_COLOR_BUFFER_BIT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupAttributeType {
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
    GL_FLOAT_VEC2,
    GL_FLOAT_VEC3,
    GL_FLOAT_VEC4,
    GL_INT_VEC2,
    GL_INT_VEC3,
    GL_INT_VEC4,
    GL_BOOL,
    GL_BOOL_VEC2,
    GL_BOOL_VEC3,
    GL_BOOL_VEC4,
    GL_FLOAT_MAT2,
    GL_FLOAT_MAT3,
    GL_FLOAT_MAT4,
    GL_SAMPLER_2D,
    GL_SAMPLER_3D,
    GL_SAMPLER_CUBE,
    GL_SAMPLER_2D_SHADOW,
    GL_SAMPLER_2D_SHADOW_EXT,
    GL_FLOAT_MAT2x3,
    GL_FLOAT_MAT2x4,
    GL_FLOAT_MAT3x2,
    GL_FLOAT_MAT3x4,
    GL_FLOAT_MAT4x2,
    GL_FLOAT_MAT4x3,
    GL_SAMPLER_2D_ARRAY_SHADOW,
    GL_SAMPLER_CUBE_SHADOW,
    GL_UNSIGNED_INT_VEC2,
    GL_UNSIGNED_INT_VEC3,
    GL_UNSIGNED_INT_VEC4,
    GL_INT_SAMPLER_2D,
    GL_INT_SAMPLER_3D,
    GL_INT_SAMPLER_CUBE,
    GL_INT_SAMPLER_2D_ARRAY,
    GL_UNSIGNED_INT_SAMPLER_2D,
    GL_UNSIGNED_INT_SAMPLER_3D,
    GL_UNSIGNED_INT_SAMPLER_CUBE,
    GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,
}
impl GLEnumGroupAttributeType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupAttributeType> {
        match raw {
            0x1404 => Some(GLEnumGroupAttributeType::GL_INT),
            0x1405 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupAttributeType::GL_FLOAT),
            0x8B50 => Some(GLEnumGroupAttributeType::GL_FLOAT_VEC2),
            0x8B51 => Some(GLEnumGroupAttributeType::GL_FLOAT_VEC3),
            0x8B52 => Some(GLEnumGroupAttributeType::GL_FLOAT_VEC4),
            0x8B53 => Some(GLEnumGroupAttributeType::GL_INT_VEC2),
            0x8B54 => Some(GLEnumGroupAttributeType::GL_INT_VEC3),
            0x8B55 => Some(GLEnumGroupAttributeType::GL_INT_VEC4),
            0x8B56 => Some(GLEnumGroupAttributeType::GL_BOOL),
            0x8B57 => Some(GLEnumGroupAttributeType::GL_BOOL_VEC2),
            0x8B58 => Some(GLEnumGroupAttributeType::GL_BOOL_VEC3),
            0x8B59 => Some(GLEnumGroupAttributeType::GL_BOOL_VEC4),
            0x8B5A => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT2),
            0x8B5B => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT3),
            0x8B5C => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT4),
            0x8B5E => Some(GLEnumGroupAttributeType::GL_SAMPLER_2D),
            0x8B5F => Some(GLEnumGroupAttributeType::GL_SAMPLER_3D),
            0x8B60 => Some(GLEnumGroupAttributeType::GL_SAMPLER_CUBE),
            0x8B62 => Some(GLEnumGroupAttributeType::GL_SAMPLER_2D_SHADOW),
            0x8B62 => Some(GLEnumGroupAttributeType::GL_SAMPLER_2D_SHADOW_EXT),
            0x8B65 => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT2x3),
            0x8B66 => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT2x4),
            0x8B67 => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT3x2),
            0x8B68 => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT3x4),
            0x8B69 => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT4x2),
            0x8B6A => Some(GLEnumGroupAttributeType::GL_FLOAT_MAT4x3),
            0x8DC4 => Some(GLEnumGroupAttributeType::GL_SAMPLER_2D_ARRAY_SHADOW),
            0x8DC5 => Some(GLEnumGroupAttributeType::GL_SAMPLER_CUBE_SHADOW),
            0x8DC6 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_VEC2),
            0x8DC7 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_VEC3),
            0x8DC8 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_VEC4),
            0x8DCA => Some(GLEnumGroupAttributeType::GL_INT_SAMPLER_2D),
            0x8DCB => Some(GLEnumGroupAttributeType::GL_INT_SAMPLER_3D),
            0x8DCC => Some(GLEnumGroupAttributeType::GL_INT_SAMPLER_CUBE),
            0x8DCF => Some(GLEnumGroupAttributeType::GL_INT_SAMPLER_2D_ARRAY),
            0x8DD2 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_SAMPLER_2D),
            0x8DD3 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_SAMPLER_3D),
            0x8DD4 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_SAMPLER_CUBE),
            0x8DD7 => Some(GLEnumGroupAttributeType::GL_UNSIGNED_INT_SAMPLER_2D_ARRAY),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBindTransformFeedbackTarget {
    GL_TRANSFORM_FEEDBACK,
}
impl GLEnumGroupBindTransformFeedbackTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBindTransformFeedbackTarget> {
        match raw {
            0x8E22 => Some(GLEnumGroupBindTransformFeedbackTarget::GL_TRANSFORM_FEEDBACK),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBinormalPointerTypeEXT {
    GL_BYTE,
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupBinormalPointerTypeEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBinormalPointerTypeEXT> {
        match raw {
            0x1400 => Some(GLEnumGroupBinormalPointerTypeEXT::GL_BYTE),
            0x1402 => Some(GLEnumGroupBinormalPointerTypeEXT::GL_SHORT),
            0x1404 => Some(GLEnumGroupBinormalPointerTypeEXT::GL_INT),
            0x1406 => Some(GLEnumGroupBinormalPointerTypeEXT::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBlendEquationModeEXT {
    GL_FUNC_ADD,
    GL_MIN,
    GL_MAX,
    GL_FUNC_SUBTRACT,
    GL_FUNC_REVERSE_SUBTRACT,
}
impl GLEnumGroupBlendEquationModeEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBlendEquationModeEXT> {
        match raw {
            0x8006 => Some(GLEnumGroupBlendEquationModeEXT::GL_FUNC_ADD),
            0x8007 => Some(GLEnumGroupBlendEquationModeEXT::GL_MIN),
            0x8008 => Some(GLEnumGroupBlendEquationModeEXT::GL_MAX),
            0x800A => Some(GLEnumGroupBlendEquationModeEXT::GL_FUNC_SUBTRACT),
            0x800B => Some(GLEnumGroupBlendEquationModeEXT::GL_FUNC_REVERSE_SUBTRACT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBlendingFactor {
    GL_ZERO,
    GL_ONE,
    GL_SRC_COLOR,
    GL_ONE_MINUS_SRC_COLOR,
    GL_SRC_ALPHA,
    GL_ONE_MINUS_SRC_ALPHA,
    GL_DST_ALPHA,
    GL_ONE_MINUS_DST_ALPHA,
    GL_DST_COLOR,
    GL_ONE_MINUS_DST_COLOR,
    GL_SRC_ALPHA_SATURATE,
    GL_CONSTANT_COLOR,
    GL_ONE_MINUS_CONSTANT_COLOR,
    GL_CONSTANT_ALPHA,
    GL_ONE_MINUS_CONSTANT_ALPHA,
}
impl GLEnumGroupBlendingFactor {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBlendingFactor> {
        match raw {
            0 => Some(GLEnumGroupBlendingFactor::GL_ZERO),
            1 => Some(GLEnumGroupBlendingFactor::GL_ONE),
            0x0300 => Some(GLEnumGroupBlendingFactor::GL_SRC_COLOR),
            0x0301 => Some(GLEnumGroupBlendingFactor::GL_ONE_MINUS_SRC_COLOR),
            0x0302 => Some(GLEnumGroupBlendingFactor::GL_SRC_ALPHA),
            0x0303 => Some(GLEnumGroupBlendingFactor::GL_ONE_MINUS_SRC_ALPHA),
            0x0304 => Some(GLEnumGroupBlendingFactor::GL_DST_ALPHA),
            0x0305 => Some(GLEnumGroupBlendingFactor::GL_ONE_MINUS_DST_ALPHA),
            0x0306 => Some(GLEnumGroupBlendingFactor::GL_DST_COLOR),
            0x0307 => Some(GLEnumGroupBlendingFactor::GL_ONE_MINUS_DST_COLOR),
            0x0308 => Some(GLEnumGroupBlendingFactor::GL_SRC_ALPHA_SATURATE),
            0x8001 => Some(GLEnumGroupBlendingFactor::GL_CONSTANT_COLOR),
            0x8002 => Some(GLEnumGroupBlendingFactor::GL_ONE_MINUS_CONSTANT_COLOR),
            0x8003 => Some(GLEnumGroupBlendingFactor::GL_CONSTANT_ALPHA),
            0x8004 => Some(GLEnumGroupBlendingFactor::GL_ONE_MINUS_CONSTANT_ALPHA),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBlitFramebufferFilter {
    GL_NEAREST,
    GL_LINEAR,
}
impl GLEnumGroupBlitFramebufferFilter {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBlitFramebufferFilter> {
        match raw {
            0x2600 => Some(GLEnumGroupBlitFramebufferFilter::GL_NEAREST),
            0x2601 => Some(GLEnumGroupBlitFramebufferFilter::GL_LINEAR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBoolean {
    GL_FALSE,
    GL_TRUE,
}
impl GLEnumGroupBoolean {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBoolean> {
        match raw {
            0 => Some(GLEnumGroupBoolean::GL_FALSE),
            1 => Some(GLEnumGroupBoolean::GL_TRUE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBuffer {
    GL_COLOR,
    GL_DEPTH,
    GL_STENCIL,
}
impl GLEnumGroupBuffer {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBuffer> {
        match raw {
            0x1800 => Some(GLEnumGroupBuffer::GL_COLOR),
            0x1801 => Some(GLEnumGroupBuffer::GL_DEPTH),
            0x1802 => Some(GLEnumGroupBuffer::GL_STENCIL),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBufferPNameARB {
    GL_BUFFER_SIZE,
    GL_BUFFER_USAGE,
    GL_BUFFER_MAPPED,
    GL_BUFFER_ACCESS_FLAGS,
    GL_BUFFER_MAP_LENGTH,
    GL_BUFFER_MAP_OFFSET,
}
impl GLEnumGroupBufferPNameARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBufferPNameARB> {
        match raw {
            0x8764 => Some(GLEnumGroupBufferPNameARB::GL_BUFFER_SIZE),
            0x8765 => Some(GLEnumGroupBufferPNameARB::GL_BUFFER_USAGE),
            0x88BC => Some(GLEnumGroupBufferPNameARB::GL_BUFFER_MAPPED),
            0x911F => Some(GLEnumGroupBufferPNameARB::GL_BUFFER_ACCESS_FLAGS),
            0x9120 => Some(GLEnumGroupBufferPNameARB::GL_BUFFER_MAP_LENGTH),
            0x9121 => Some(GLEnumGroupBufferPNameARB::GL_BUFFER_MAP_OFFSET),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBufferPointerNameARB {
    GL_BUFFER_MAP_POINTER,
}
impl GLEnumGroupBufferPointerNameARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBufferPointerNameARB> {
        match raw {
            0x88BD => Some(GLEnumGroupBufferPointerNameARB::GL_BUFFER_MAP_POINTER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBufferStorageMask {
    GL_MAP_READ_BIT,
    GL_MAP_WRITE_BIT,
}
impl GLEnumGroupBufferStorageMask {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBufferStorageMask> {
        match raw {
            0x0001 => Some(GLEnumGroupBufferStorageMask::GL_MAP_READ_BIT),
            0x0002 => Some(GLEnumGroupBufferStorageMask::GL_MAP_WRITE_BIT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBufferStorageTarget {
    GL_ARRAY_BUFFER,
    GL_ELEMENT_ARRAY_BUFFER,
    GL_PIXEL_PACK_BUFFER,
    GL_PIXEL_UNPACK_BUFFER,
    GL_UNIFORM_BUFFER,
    GL_TRANSFORM_FEEDBACK_BUFFER,
    GL_COPY_READ_BUFFER,
    GL_COPY_WRITE_BUFFER,
}
impl GLEnumGroupBufferStorageTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBufferStorageTarget> {
        match raw {
            0x8892 => Some(GLEnumGroupBufferStorageTarget::GL_ARRAY_BUFFER),
            0x8893 => Some(GLEnumGroupBufferStorageTarget::GL_ELEMENT_ARRAY_BUFFER),
            0x88EB => Some(GLEnumGroupBufferStorageTarget::GL_PIXEL_PACK_BUFFER),
            0x88EC => Some(GLEnumGroupBufferStorageTarget::GL_PIXEL_UNPACK_BUFFER),
            0x8A11 => Some(GLEnumGroupBufferStorageTarget::GL_UNIFORM_BUFFER),
            0x8C8E => Some(GLEnumGroupBufferStorageTarget::GL_TRANSFORM_FEEDBACK_BUFFER),
            0x8F36 => Some(GLEnumGroupBufferStorageTarget::GL_COPY_READ_BUFFER),
            0x8F37 => Some(GLEnumGroupBufferStorageTarget::GL_COPY_WRITE_BUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBufferTargetARB {
    GL_ARRAY_BUFFER,
    GL_ELEMENT_ARRAY_BUFFER,
    GL_PIXEL_PACK_BUFFER,
    GL_PIXEL_UNPACK_BUFFER,
    GL_UNIFORM_BUFFER,
    GL_TRANSFORM_FEEDBACK_BUFFER,
    GL_COPY_READ_BUFFER,
    GL_COPY_WRITE_BUFFER,
}
impl GLEnumGroupBufferTargetARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBufferTargetARB> {
        match raw {
            0x8892 => Some(GLEnumGroupBufferTargetARB::GL_ARRAY_BUFFER),
            0x8893 => Some(GLEnumGroupBufferTargetARB::GL_ELEMENT_ARRAY_BUFFER),
            0x88EB => Some(GLEnumGroupBufferTargetARB::GL_PIXEL_PACK_BUFFER),
            0x88EC => Some(GLEnumGroupBufferTargetARB::GL_PIXEL_UNPACK_BUFFER),
            0x8A11 => Some(GLEnumGroupBufferTargetARB::GL_UNIFORM_BUFFER),
            0x8C8E => Some(GLEnumGroupBufferTargetARB::GL_TRANSFORM_FEEDBACK_BUFFER),
            0x8F36 => Some(GLEnumGroupBufferTargetARB::GL_COPY_READ_BUFFER),
            0x8F37 => Some(GLEnumGroupBufferTargetARB::GL_COPY_WRITE_BUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupBufferUsageARB {
    GL_STREAM_DRAW,
    GL_STREAM_READ,
    GL_STREAM_COPY,
    GL_STATIC_DRAW,
    GL_STATIC_READ,
    GL_STATIC_COPY,
    GL_DYNAMIC_DRAW,
    GL_DYNAMIC_READ,
    GL_DYNAMIC_COPY,
}
impl GLEnumGroupBufferUsageARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupBufferUsageARB> {
        match raw {
            0x88E0 => Some(GLEnumGroupBufferUsageARB::GL_STREAM_DRAW),
            0x88E1 => Some(GLEnumGroupBufferUsageARB::GL_STREAM_READ),
            0x88E2 => Some(GLEnumGroupBufferUsageARB::GL_STREAM_COPY),
            0x88E4 => Some(GLEnumGroupBufferUsageARB::GL_STATIC_DRAW),
            0x88E5 => Some(GLEnumGroupBufferUsageARB::GL_STATIC_READ),
            0x88E6 => Some(GLEnumGroupBufferUsageARB::GL_STATIC_COPY),
            0x88E8 => Some(GLEnumGroupBufferUsageARB::GL_DYNAMIC_DRAW),
            0x88E9 => Some(GLEnumGroupBufferUsageARB::GL_DYNAMIC_READ),
            0x88EA => Some(GLEnumGroupBufferUsageARB::GL_DYNAMIC_COPY),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupClampColorModeARB {
    GL_FALSE,
    GL_TRUE,
}
impl GLEnumGroupClampColorModeARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupClampColorModeARB> {
        match raw {
            0 => Some(GLEnumGroupClampColorModeARB::GL_FALSE),
            1 => Some(GLEnumGroupClampColorModeARB::GL_TRUE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupClearBufferMask {
    GL_DEPTH_BUFFER_BIT,
    GL_STENCIL_BUFFER_BIT,
    GL_COLOR_BUFFER_BIT,
}
impl GLEnumGroupClearBufferMask {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupClearBufferMask> {
        match raw {
            0x00000100 => Some(GLEnumGroupClearBufferMask::GL_DEPTH_BUFFER_BIT),
            0x00000400 => Some(GLEnumGroupClearBufferMask::GL_STENCIL_BUFFER_BIT),
            0x00004000 => Some(GLEnumGroupClearBufferMask::GL_COLOR_BUFFER_BIT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupColorBuffer {
    GL_NONE,
    GL_FRONT,
    GL_BACK,
    GL_FRONT_AND_BACK,
    GL_COLOR_ATTACHMENT0,
    GL_COLOR_ATTACHMENT1,
    GL_COLOR_ATTACHMENT2,
    GL_COLOR_ATTACHMENT3,
    GL_COLOR_ATTACHMENT4,
    GL_COLOR_ATTACHMENT5,
    GL_COLOR_ATTACHMENT6,
    GL_COLOR_ATTACHMENT7,
    GL_COLOR_ATTACHMENT8,
    GL_COLOR_ATTACHMENT9,
    GL_COLOR_ATTACHMENT10,
    GL_COLOR_ATTACHMENT11,
    GL_COLOR_ATTACHMENT12,
    GL_COLOR_ATTACHMENT13,
    GL_COLOR_ATTACHMENT14,
    GL_COLOR_ATTACHMENT15,
    GL_COLOR_ATTACHMENT16,
    GL_COLOR_ATTACHMENT17,
    GL_COLOR_ATTACHMENT18,
    GL_COLOR_ATTACHMENT19,
    GL_COLOR_ATTACHMENT20,
    GL_COLOR_ATTACHMENT21,
    GL_COLOR_ATTACHMENT22,
    GL_COLOR_ATTACHMENT23,
    GL_COLOR_ATTACHMENT24,
    GL_COLOR_ATTACHMENT25,
    GL_COLOR_ATTACHMENT26,
    GL_COLOR_ATTACHMENT27,
    GL_COLOR_ATTACHMENT28,
    GL_COLOR_ATTACHMENT29,
    GL_COLOR_ATTACHMENT30,
    GL_COLOR_ATTACHMENT31,
}
impl GLEnumGroupColorBuffer {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupColorBuffer> {
        match raw {
            0 => Some(GLEnumGroupColorBuffer::GL_NONE),
            0x0404 => Some(GLEnumGroupColorBuffer::GL_FRONT),
            0x0405 => Some(GLEnumGroupColorBuffer::GL_BACK),
            0x0408 => Some(GLEnumGroupColorBuffer::GL_FRONT_AND_BACK),
            0x8CE0 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT0),
            0x8CE1 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT1),
            0x8CE2 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT2),
            0x8CE3 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT3),
            0x8CE4 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT4),
            0x8CE5 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT5),
            0x8CE6 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT6),
            0x8CE7 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT7),
            0x8CE8 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT8),
            0x8CE9 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT9),
            0x8CEA => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT10),
            0x8CEB => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT11),
            0x8CEC => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT12),
            0x8CED => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT13),
            0x8CEE => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT14),
            0x8CEF => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT15),
            0x8CF0 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT16),
            0x8CF1 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT17),
            0x8CF2 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT18),
            0x8CF3 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT19),
            0x8CF4 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT20),
            0x8CF5 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT21),
            0x8CF6 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT22),
            0x8CF7 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT23),
            0x8CF8 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT24),
            0x8CF9 => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT25),
            0x8CFA => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT26),
            0x8CFB => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT27),
            0x8CFC => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT28),
            0x8CFD => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT29),
            0x8CFE => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT30),
            0x8CFF => Some(GLEnumGroupColorBuffer::GL_COLOR_ATTACHMENT31),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupColorPointerType {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
}
impl GLEnumGroupColorPointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupColorPointerType> {
        match raw {
            0x1400 => Some(GLEnumGroupColorPointerType::GL_BYTE),
            0x1401 => Some(GLEnumGroupColorPointerType::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupColorPointerType::GL_SHORT),
            0x1403 => Some(GLEnumGroupColorPointerType::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupColorPointerType::GL_INT),
            0x1405 => Some(GLEnumGroupColorPointerType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupColorPointerType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupCombinerBiasNV {
    GL_NONE,
}
impl GLEnumGroupCombinerBiasNV {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupCombinerBiasNV> {
        match raw {
            0 => Some(GLEnumGroupCombinerBiasNV::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupCombinerComponentUsageNV {
    GL_BLUE,
    GL_ALPHA,
    GL_RGB,
}
impl GLEnumGroupCombinerComponentUsageNV {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupCombinerComponentUsageNV> {
        match raw {
            0x1905 => Some(GLEnumGroupCombinerComponentUsageNV::GL_BLUE),
            0x1906 => Some(GLEnumGroupCombinerComponentUsageNV::GL_ALPHA),
            0x1907 => Some(GLEnumGroupCombinerComponentUsageNV::GL_RGB),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupCombinerPortionNV {
    GL_ALPHA,
    GL_RGB,
}
impl GLEnumGroupCombinerPortionNV {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupCombinerPortionNV> {
        match raw {
            0x1906 => Some(GLEnumGroupCombinerPortionNV::GL_ALPHA),
            0x1907 => Some(GLEnumGroupCombinerPortionNV::GL_RGB),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupCombinerScaleNV {
    GL_NONE,
}
impl GLEnumGroupCombinerScaleNV {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupCombinerScaleNV> {
        match raw {
            0 => Some(GLEnumGroupCombinerScaleNV::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupContextFlagMask {
    GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR,
    GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT,
}
impl GLEnumGroupContextFlagMask {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupContextFlagMask> {
        match raw {
            0x00000008 => Some(GLEnumGroupContextFlagMask::GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR),
            0x00000010 => Some(GLEnumGroupContextFlagMask::GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupCopyBufferSubDataTarget {
    GL_ARRAY_BUFFER,
    GL_ELEMENT_ARRAY_BUFFER,
    GL_PIXEL_PACK_BUFFER,
    GL_PIXEL_UNPACK_BUFFER,
    GL_UNIFORM_BUFFER,
    GL_TRANSFORM_FEEDBACK_BUFFER,
    GL_COPY_READ_BUFFER,
    GL_COPY_WRITE_BUFFER,
}
impl GLEnumGroupCopyBufferSubDataTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupCopyBufferSubDataTarget> {
        match raw {
            0x8892 => Some(GLEnumGroupCopyBufferSubDataTarget::GL_ARRAY_BUFFER),
            0x8893 => Some(GLEnumGroupCopyBufferSubDataTarget::GL_ELEMENT_ARRAY_BUFFER),
            0x88EB => Some(GLEnumGroupCopyBufferSubDataTarget::GL_PIXEL_PACK_BUFFER),
            0x88EC => Some(GLEnumGroupCopyBufferSubDataTarget::GL_PIXEL_UNPACK_BUFFER),
            0x8A11 => Some(GLEnumGroupCopyBufferSubDataTarget::GL_UNIFORM_BUFFER),
            0x8C8E => Some(GLEnumGroupCopyBufferSubDataTarget::GL_TRANSFORM_FEEDBACK_BUFFER),
            0x8F36 => Some(GLEnumGroupCopyBufferSubDataTarget::GL_COPY_READ_BUFFER),
            0x8F37 => Some(GLEnumGroupCopyBufferSubDataTarget::GL_COPY_WRITE_BUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupCopyImageSubDataTarget {
    GL_TEXTURE_2D,
    GL_TEXTURE_3D,
    GL_TEXTURE_CUBE_MAP,
    GL_TEXTURE_2D_ARRAY,
    GL_RENDERBUFFER,
}
impl GLEnumGroupCopyImageSubDataTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupCopyImageSubDataTarget> {
        match raw {
            0x0DE1 => Some(GLEnumGroupCopyImageSubDataTarget::GL_TEXTURE_2D),
            0x806F => Some(GLEnumGroupCopyImageSubDataTarget::GL_TEXTURE_3D),
            0x8513 => Some(GLEnumGroupCopyImageSubDataTarget::GL_TEXTURE_CUBE_MAP),
            0x8C1A => Some(GLEnumGroupCopyImageSubDataTarget::GL_TEXTURE_2D_ARRAY),
            0x8D41 => Some(GLEnumGroupCopyImageSubDataTarget::GL_RENDERBUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDebugSeverity {
    GL_DONT_CARE,
}
impl GLEnumGroupDebugSeverity {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDebugSeverity> {
        match raw {
            0x1100 => Some(GLEnumGroupDebugSeverity::GL_DONT_CARE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDebugSource {
    GL_DONT_CARE,
}
impl GLEnumGroupDebugSource {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDebugSource> {
        match raw {
            0x1100 => Some(GLEnumGroupDebugSource::GL_DONT_CARE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDebugType {
    GL_DONT_CARE,
}
impl GLEnumGroupDebugType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDebugType> {
        match raw {
            0x1100 => Some(GLEnumGroupDebugType::GL_DONT_CARE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDepthFunction {
    GL_NEVER,
    GL_LESS,
    GL_EQUAL,
    GL_LEQUAL,
    GL_GREATER,
    GL_NOTEQUAL,
    GL_GEQUAL,
    GL_ALWAYS,
}
impl GLEnumGroupDepthFunction {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDepthFunction> {
        match raw {
            0x0200 => Some(GLEnumGroupDepthFunction::GL_NEVER),
            0x0201 => Some(GLEnumGroupDepthFunction::GL_LESS),
            0x0202 => Some(GLEnumGroupDepthFunction::GL_EQUAL),
            0x0203 => Some(GLEnumGroupDepthFunction::GL_LEQUAL),
            0x0204 => Some(GLEnumGroupDepthFunction::GL_GREATER),
            0x0205 => Some(GLEnumGroupDepthFunction::GL_NOTEQUAL),
            0x0206 => Some(GLEnumGroupDepthFunction::GL_GEQUAL),
            0x0207 => Some(GLEnumGroupDepthFunction::GL_ALWAYS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDepthStencilTextureMode {
    GL_DEPTH_COMPONENT,
}
impl GLEnumGroupDepthStencilTextureMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDepthStencilTextureMode> {
        match raw {
            0x1902 => Some(GLEnumGroupDepthStencilTextureMode::GL_DEPTH_COMPONENT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDrawBufferMode {
    GL_NONE,
    GL_FRONT,
    GL_BACK,
    GL_FRONT_AND_BACK,
    GL_COLOR_ATTACHMENT0,
    GL_COLOR_ATTACHMENT0_NV,
    GL_COLOR_ATTACHMENT1,
    GL_COLOR_ATTACHMENT1_NV,
    GL_COLOR_ATTACHMENT2,
    GL_COLOR_ATTACHMENT2_NV,
    GL_COLOR_ATTACHMENT3,
    GL_COLOR_ATTACHMENT3_NV,
    GL_COLOR_ATTACHMENT4,
    GL_COLOR_ATTACHMENT4_NV,
    GL_COLOR_ATTACHMENT5,
    GL_COLOR_ATTACHMENT5_NV,
    GL_COLOR_ATTACHMENT6,
    GL_COLOR_ATTACHMENT6_NV,
    GL_COLOR_ATTACHMENT7,
    GL_COLOR_ATTACHMENT7_NV,
    GL_COLOR_ATTACHMENT8,
    GL_COLOR_ATTACHMENT8_NV,
    GL_COLOR_ATTACHMENT9,
    GL_COLOR_ATTACHMENT9_NV,
    GL_COLOR_ATTACHMENT10,
    GL_COLOR_ATTACHMENT10_NV,
    GL_COLOR_ATTACHMENT11,
    GL_COLOR_ATTACHMENT11_NV,
    GL_COLOR_ATTACHMENT12,
    GL_COLOR_ATTACHMENT12_NV,
    GL_COLOR_ATTACHMENT13,
    GL_COLOR_ATTACHMENT13_NV,
    GL_COLOR_ATTACHMENT14,
    GL_COLOR_ATTACHMENT14_NV,
    GL_COLOR_ATTACHMENT15,
    GL_COLOR_ATTACHMENT15_NV,
    GL_COLOR_ATTACHMENT16,
    GL_COLOR_ATTACHMENT17,
    GL_COLOR_ATTACHMENT18,
    GL_COLOR_ATTACHMENT19,
    GL_COLOR_ATTACHMENT20,
    GL_COLOR_ATTACHMENT21,
    GL_COLOR_ATTACHMENT22,
    GL_COLOR_ATTACHMENT23,
    GL_COLOR_ATTACHMENT24,
    GL_COLOR_ATTACHMENT25,
    GL_COLOR_ATTACHMENT26,
    GL_COLOR_ATTACHMENT27,
    GL_COLOR_ATTACHMENT28,
    GL_COLOR_ATTACHMENT29,
    GL_COLOR_ATTACHMENT30,
    GL_COLOR_ATTACHMENT31,
}
impl GLEnumGroupDrawBufferMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDrawBufferMode> {
        match raw {
            0 => Some(GLEnumGroupDrawBufferMode::GL_NONE),
            0x0404 => Some(GLEnumGroupDrawBufferMode::GL_FRONT),
            0x0405 => Some(GLEnumGroupDrawBufferMode::GL_BACK),
            0x0408 => Some(GLEnumGroupDrawBufferMode::GL_FRONT_AND_BACK),
            0x8CE0 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT0),
            0x8CE0 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT0_NV),
            0x8CE1 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT1),
            0x8CE1 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT1_NV),
            0x8CE2 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT2),
            0x8CE2 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT2_NV),
            0x8CE3 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT3),
            0x8CE3 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT3_NV),
            0x8CE4 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT4),
            0x8CE4 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT4_NV),
            0x8CE5 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT5),
            0x8CE5 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT5_NV),
            0x8CE6 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT6),
            0x8CE6 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT6_NV),
            0x8CE7 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT7),
            0x8CE7 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT7_NV),
            0x8CE8 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT8),
            0x8CE8 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT8_NV),
            0x8CE9 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT9),
            0x8CE9 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT9_NV),
            0x8CEA => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT10),
            0x8CEA => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT10_NV),
            0x8CEB => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT11),
            0x8CEB => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT11_NV),
            0x8CEC => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT12),
            0x8CEC => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT12_NV),
            0x8CED => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT13),
            0x8CED => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT13_NV),
            0x8CEE => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT14),
            0x8CEE => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT14_NV),
            0x8CEF => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT15),
            0x8CEF => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT15_NV),
            0x8CF0 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT16),
            0x8CF1 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT17),
            0x8CF2 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT18),
            0x8CF3 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT19),
            0x8CF4 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT20),
            0x8CF5 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT21),
            0x8CF6 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT22),
            0x8CF7 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT23),
            0x8CF8 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT24),
            0x8CF9 => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT25),
            0x8CFA => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT26),
            0x8CFB => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT27),
            0x8CFC => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT28),
            0x8CFD => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT29),
            0x8CFE => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT30),
            0x8CFF => Some(GLEnumGroupDrawBufferMode::GL_COLOR_ATTACHMENT31),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupDrawElementsType {
    GL_UNSIGNED_BYTE,
    GL_UNSIGNED_SHORT,
    GL_UNSIGNED_INT,
}
impl GLEnumGroupDrawElementsType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupDrawElementsType> {
        match raw {
            0x1401 => Some(GLEnumGroupDrawElementsType::GL_UNSIGNED_BYTE),
            0x1403 => Some(GLEnumGroupDrawElementsType::GL_UNSIGNED_SHORT),
            0x1405 => Some(GLEnumGroupDrawElementsType::GL_UNSIGNED_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupElementPointerTypeATI {
    GL_UNSIGNED_BYTE,
    GL_UNSIGNED_SHORT,
    GL_UNSIGNED_INT,
}
impl GLEnumGroupElementPointerTypeATI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupElementPointerTypeATI> {
        match raw {
            0x1401 => Some(GLEnumGroupElementPointerTypeATI::GL_UNSIGNED_BYTE),
            0x1403 => Some(GLEnumGroupElementPointerTypeATI::GL_UNSIGNED_SHORT),
            0x1405 => Some(GLEnumGroupElementPointerTypeATI::GL_UNSIGNED_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupEnableCap {
    GL_CULL_FACE,
    GL_DEPTH_TEST,
    GL_STENCIL_TEST,
    GL_DITHER,
    GL_BLEND,
    GL_SCISSOR_TEST,
    GL_TEXTURE_2D,
    GL_POLYGON_OFFSET_FILL,
    GL_SAMPLE_ALPHA_TO_COVERAGE,
    GL_SAMPLE_COVERAGE,
    GL_TEXTURE_CUBE_MAP,
    GL_RASTERIZER_DISCARD,
    GL_PRIMITIVE_RESTART_FIXED_INDEX,
    GL_FETCH_PER_SAMPLE_ARM,
    GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV,
}
impl GLEnumGroupEnableCap {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupEnableCap> {
        match raw {
            0x0B44 => Some(GLEnumGroupEnableCap::GL_CULL_FACE),
            0x0B71 => Some(GLEnumGroupEnableCap::GL_DEPTH_TEST),
            0x0B90 => Some(GLEnumGroupEnableCap::GL_STENCIL_TEST),
            0x0BD0 => Some(GLEnumGroupEnableCap::GL_DITHER),
            0x0BE2 => Some(GLEnumGroupEnableCap::GL_BLEND),
            0x0C11 => Some(GLEnumGroupEnableCap::GL_SCISSOR_TEST),
            0x0DE1 => Some(GLEnumGroupEnableCap::GL_TEXTURE_2D),
            0x8037 => Some(GLEnumGroupEnableCap::GL_POLYGON_OFFSET_FILL),
            0x809E => Some(GLEnumGroupEnableCap::GL_SAMPLE_ALPHA_TO_COVERAGE),
            0x80A0 => Some(GLEnumGroupEnableCap::GL_SAMPLE_COVERAGE),
            0x8513 => Some(GLEnumGroupEnableCap::GL_TEXTURE_CUBE_MAP),
            0x8C89 => Some(GLEnumGroupEnableCap::GL_RASTERIZER_DISCARD),
            0x8D69 => Some(GLEnumGroupEnableCap::GL_PRIMITIVE_RESTART_FIXED_INDEX),
            0x8F65 => Some(GLEnumGroupEnableCap::GL_FETCH_PER_SAMPLE_ARM),
            0x95B1 => Some(GLEnumGroupEnableCap::GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupErrorCode {
    GL_NO_ERROR,
    GL_INVALID_ENUM,
    GL_INVALID_VALUE,
    GL_INVALID_OPERATION,
    GL_OUT_OF_MEMORY,
    GL_INVALID_FRAMEBUFFER_OPERATION,
}
impl GLEnumGroupErrorCode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupErrorCode> {
        match raw {
            0 => Some(GLEnumGroupErrorCode::GL_NO_ERROR),
            0x0500 => Some(GLEnumGroupErrorCode::GL_INVALID_ENUM),
            0x0501 => Some(GLEnumGroupErrorCode::GL_INVALID_VALUE),
            0x0502 => Some(GLEnumGroupErrorCode::GL_INVALID_OPERATION),
            0x0505 => Some(GLEnumGroupErrorCode::GL_OUT_OF_MEMORY),
            0x0506 => Some(GLEnumGroupErrorCode::GL_INVALID_FRAMEBUFFER_OPERATION),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFogCoordinatePointerType {
    GL_FLOAT,
}
impl GLEnumGroupFogCoordinatePointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFogCoordinatePointerType> {
        match raw {
            0x1406 => Some(GLEnumGroupFogCoordinatePointerType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFogMode {
    GL_LINEAR,
}
impl GLEnumGroupFogMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFogMode> {
        match raw {
            0x2601 => Some(GLEnumGroupFogMode::GL_LINEAR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFogPointerTypeEXT {
    GL_FLOAT,
}
impl GLEnumGroupFogPointerTypeEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFogPointerTypeEXT> {
        match raw {
            0x1406 => Some(GLEnumGroupFogPointerTypeEXT::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFogPointerTypeIBM {
    GL_FLOAT,
}
impl GLEnumGroupFogPointerTypeIBM {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFogPointerTypeIBM> {
        match raw {
            0x1406 => Some(GLEnumGroupFogPointerTypeIBM::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFoveationConfigBitQCOM {
    GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM,
}
impl GLEnumGroupFoveationConfigBitQCOM {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFoveationConfigBitQCOM> {
        match raw {
            0x00000004 => Some(GLEnumGroupFoveationConfigBitQCOM::GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFragmentShaderDestMaskATI {
    GL_NONE,
}
impl GLEnumGroupFragmentShaderDestMaskATI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFragmentShaderDestMaskATI> {
        match raw {
            0 => Some(GLEnumGroupFragmentShaderDestMaskATI::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFragmentShaderDestModMaskATI {
    GL_NONE,
}
impl GLEnumGroupFragmentShaderDestModMaskATI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFragmentShaderDestModMaskATI> {
        match raw {
            0 => Some(GLEnumGroupFragmentShaderDestModMaskATI::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFragmentShaderGenericSourceATI {
    GL_ZERO,
    GL_ONE,
}
impl GLEnumGroupFragmentShaderGenericSourceATI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFragmentShaderGenericSourceATI> {
        match raw {
            0 => Some(GLEnumGroupFragmentShaderGenericSourceATI::GL_ZERO),
            1 => Some(GLEnumGroupFragmentShaderGenericSourceATI::GL_ONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFragmentShaderTextureSourceATI {
    GL_TEXTURE0,
    GL_TEXTURE1,
    GL_TEXTURE2,
    GL_TEXTURE3,
    GL_TEXTURE4,
    GL_TEXTURE5,
    GL_TEXTURE6,
    GL_TEXTURE7,
    GL_TEXTURE8,
    GL_TEXTURE9,
    GL_TEXTURE10,
    GL_TEXTURE11,
    GL_TEXTURE12,
    GL_TEXTURE13,
    GL_TEXTURE14,
    GL_TEXTURE15,
    GL_TEXTURE16,
    GL_TEXTURE17,
    GL_TEXTURE18,
    GL_TEXTURE19,
    GL_TEXTURE20,
    GL_TEXTURE21,
    GL_TEXTURE22,
    GL_TEXTURE23,
    GL_TEXTURE24,
    GL_TEXTURE25,
    GL_TEXTURE26,
    GL_TEXTURE27,
    GL_TEXTURE28,
    GL_TEXTURE29,
    GL_TEXTURE30,
    GL_TEXTURE31,
}
impl GLEnumGroupFragmentShaderTextureSourceATI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFragmentShaderTextureSourceATI> {
        match raw {
            0x84C0 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE0),
            0x84C1 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE1),
            0x84C2 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE2),
            0x84C3 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE3),
            0x84C4 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE4),
            0x84C5 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE5),
            0x84C6 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE6),
            0x84C7 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE7),
            0x84C8 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE8),
            0x84C9 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE9),
            0x84CA => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE10),
            0x84CB => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE11),
            0x84CC => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE12),
            0x84CD => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE13),
            0x84CE => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE14),
            0x84CF => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE15),
            0x84D0 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE16),
            0x84D1 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE17),
            0x84D2 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE18),
            0x84D3 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE19),
            0x84D4 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE20),
            0x84D5 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE21),
            0x84D6 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE22),
            0x84D7 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE23),
            0x84D8 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE24),
            0x84D9 => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE25),
            0x84DA => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE26),
            0x84DB => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE27),
            0x84DC => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE28),
            0x84DD => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE29),
            0x84DE => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE30),
            0x84DF => Some(GLEnumGroupFragmentShaderTextureSourceATI::GL_TEXTURE31),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFragmentShaderValueRepATI {
    GL_NONE,
    GL_RED,
    GL_GREEN,
    GL_BLUE,
    GL_ALPHA,
}
impl GLEnumGroupFragmentShaderValueRepATI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFragmentShaderValueRepATI> {
        match raw {
            0 => Some(GLEnumGroupFragmentShaderValueRepATI::GL_NONE),
            0x1903 => Some(GLEnumGroupFragmentShaderValueRepATI::GL_RED),
            0x1904 => Some(GLEnumGroupFragmentShaderValueRepATI::GL_GREEN),
            0x1905 => Some(GLEnumGroupFragmentShaderValueRepATI::GL_BLUE),
            0x1906 => Some(GLEnumGroupFragmentShaderValueRepATI::GL_ALPHA),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFramebufferAttachment {
    GL_DEPTH_STENCIL_ATTACHMENT,
    GL_COLOR_ATTACHMENT0,
    GL_COLOR_ATTACHMENT1,
    GL_COLOR_ATTACHMENT2,
    GL_COLOR_ATTACHMENT3,
    GL_COLOR_ATTACHMENT4,
    GL_COLOR_ATTACHMENT5,
    GL_COLOR_ATTACHMENT6,
    GL_COLOR_ATTACHMENT7,
    GL_COLOR_ATTACHMENT8,
    GL_COLOR_ATTACHMENT9,
    GL_COLOR_ATTACHMENT10,
    GL_COLOR_ATTACHMENT11,
    GL_COLOR_ATTACHMENT12,
    GL_COLOR_ATTACHMENT13,
    GL_COLOR_ATTACHMENT14,
    GL_COLOR_ATTACHMENT15,
    GL_COLOR_ATTACHMENT16,
    GL_COLOR_ATTACHMENT17,
    GL_COLOR_ATTACHMENT18,
    GL_COLOR_ATTACHMENT19,
    GL_COLOR_ATTACHMENT20,
    GL_COLOR_ATTACHMENT21,
    GL_COLOR_ATTACHMENT22,
    GL_COLOR_ATTACHMENT23,
    GL_COLOR_ATTACHMENT24,
    GL_COLOR_ATTACHMENT25,
    GL_COLOR_ATTACHMENT26,
    GL_COLOR_ATTACHMENT27,
    GL_COLOR_ATTACHMENT28,
    GL_COLOR_ATTACHMENT29,
    GL_COLOR_ATTACHMENT30,
    GL_COLOR_ATTACHMENT31,
    GL_DEPTH_ATTACHMENT,
    GL_STENCIL_ATTACHMENT,
}
impl GLEnumGroupFramebufferAttachment {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFramebufferAttachment> {
        match raw {
            0x821A => Some(GLEnumGroupFramebufferAttachment::GL_DEPTH_STENCIL_ATTACHMENT),
            0x8CE0 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT0),
            0x8CE1 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT1),
            0x8CE2 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT2),
            0x8CE3 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT3),
            0x8CE4 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT4),
            0x8CE5 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT5),
            0x8CE6 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT6),
            0x8CE7 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT7),
            0x8CE8 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT8),
            0x8CE9 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT9),
            0x8CEA => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT10),
            0x8CEB => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT11),
            0x8CEC => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT12),
            0x8CED => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT13),
            0x8CEE => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT14),
            0x8CEF => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT15),
            0x8CF0 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT16),
            0x8CF1 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT17),
            0x8CF2 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT18),
            0x8CF3 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT19),
            0x8CF4 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT20),
            0x8CF5 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT21),
            0x8CF6 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT22),
            0x8CF7 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT23),
            0x8CF8 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT24),
            0x8CF9 => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT25),
            0x8CFA => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT26),
            0x8CFB => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT27),
            0x8CFC => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT28),
            0x8CFD => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT29),
            0x8CFE => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT30),
            0x8CFF => Some(GLEnumGroupFramebufferAttachment::GL_COLOR_ATTACHMENT31),
            0x8D00 => Some(GLEnumGroupFramebufferAttachment::GL_DEPTH_ATTACHMENT),
            0x8D20 => Some(GLEnumGroupFramebufferAttachment::GL_STENCIL_ATTACHMENT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFramebufferAttachmentParameterName {
    GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING,
    GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT,
    GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE,
    GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT,
    GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE,
    GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
    GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE,
    GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
    GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE,
    GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE,
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER,
}
impl GLEnumGroupFramebufferAttachmentParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFramebufferAttachmentParameterName> {
        match raw {
            0x8210 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING),
            0x8210 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT),
            0x8211 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE),
            0x8211 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT),
            0x8212 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE),
            0x8213 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE),
            0x8214 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE),
            0x8215 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE),
            0x8216 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE),
            0x8217 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE),
            0x8CD0 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE),
            0x8CD1 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME),
            0x8CD2 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL),
            0x8CD3 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE),
            0x8CD4 => Some(GLEnumGroupFramebufferAttachmentParameterName::GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFramebufferStatus {
    GL_FRAMEBUFFER_UNDEFINED,
    GL_FRAMEBUFFER_COMPLETE,
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
    GL_FRAMEBUFFER_UNSUPPORTED,
    GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
}
impl GLEnumGroupFramebufferStatus {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFramebufferStatus> {
        match raw {
            0x8219 => Some(GLEnumGroupFramebufferStatus::GL_FRAMEBUFFER_UNDEFINED),
            0x8CD5 => Some(GLEnumGroupFramebufferStatus::GL_FRAMEBUFFER_COMPLETE),
            0x8CD6 => Some(GLEnumGroupFramebufferStatus::GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT),
            0x8CD7 => Some(GLEnumGroupFramebufferStatus::GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT),
            0x8CDD => Some(GLEnumGroupFramebufferStatus::GL_FRAMEBUFFER_UNSUPPORTED),
            0x8D56 => Some(GLEnumGroupFramebufferStatus::GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFramebufferTarget {
    GL_READ_FRAMEBUFFER,
    GL_DRAW_FRAMEBUFFER,
    GL_FRAMEBUFFER,
}
impl GLEnumGroupFramebufferTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFramebufferTarget> {
        match raw {
            0x8CA8 => Some(GLEnumGroupFramebufferTarget::GL_READ_FRAMEBUFFER),
            0x8CA9 => Some(GLEnumGroupFramebufferTarget::GL_DRAW_FRAMEBUFFER),
            0x8D40 => Some(GLEnumGroupFramebufferTarget::GL_FRAMEBUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupFrontFaceDirection {
    GL_CW,
    GL_CCW,
}
impl GLEnumGroupFrontFaceDirection {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupFrontFaceDirection> {
        match raw {
            0x0900 => Some(GLEnumGroupFrontFaceDirection::GL_CW),
            0x0901 => Some(GLEnumGroupFrontFaceDirection::GL_CCW),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupGetFramebufferParameter {
    GL_SAMPLE_BUFFERS,
    GL_SAMPLES,
    GL_IMPLEMENTATION_COLOR_READ_TYPE,
    GL_IMPLEMENTATION_COLOR_READ_FORMAT,
}
impl GLEnumGroupGetFramebufferParameter {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupGetFramebufferParameter> {
        match raw {
            0x80A8 => Some(GLEnumGroupGetFramebufferParameter::GL_SAMPLE_BUFFERS),
            0x80A9 => Some(GLEnumGroupGetFramebufferParameter::GL_SAMPLES),
            0x8B9A => Some(GLEnumGroupGetFramebufferParameter::GL_IMPLEMENTATION_COLOR_READ_TYPE),
            0x8B9B => Some(GLEnumGroupGetFramebufferParameter::GL_IMPLEMENTATION_COLOR_READ_FORMAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupGetPName {
    GL_LINE_WIDTH,
    GL_CULL_FACE,
    GL_CULL_FACE_MODE,
    GL_FRONT_FACE,
    GL_DEPTH_RANGE,
    GL_DEPTH_TEST,
    GL_DEPTH_WRITEMASK,
    GL_DEPTH_CLEAR_VALUE,
    GL_DEPTH_FUNC,
    GL_STENCIL_TEST,
    GL_STENCIL_CLEAR_VALUE,
    GL_STENCIL_FUNC,
    GL_STENCIL_VALUE_MASK,
    GL_STENCIL_FAIL,
    GL_STENCIL_PASS_DEPTH_FAIL,
    GL_STENCIL_PASS_DEPTH_PASS,
    GL_STENCIL_REF,
    GL_STENCIL_WRITEMASK,
    GL_VIEWPORT,
    GL_DITHER,
    GL_BLEND,
    GL_READ_BUFFER,
    GL_SCISSOR_BOX,
    GL_SCISSOR_TEST,
    GL_COLOR_CLEAR_VALUE,
    GL_COLOR_WRITEMASK,
    GL_UNPACK_ROW_LENGTH,
    GL_UNPACK_SKIP_ROWS,
    GL_UNPACK_SKIP_PIXELS,
    GL_UNPACK_ALIGNMENT,
    GL_PACK_ROW_LENGTH,
    GL_PACK_ROW_LENGTH_NV,
    GL_PACK_SKIP_ROWS,
    GL_PACK_SKIP_ROWS_NV,
    GL_PACK_SKIP_PIXELS,
    GL_PACK_SKIP_PIXELS_NV,
    GL_PACK_ALIGNMENT,
    GL_MAX_TEXTURE_SIZE,
    GL_MAX_VIEWPORT_DIMS,
    GL_SUBPIXEL_BITS,
    GL_RED_BITS,
    GL_GREEN_BITS,
    GL_BLUE_BITS,
    GL_ALPHA_BITS,
    GL_DEPTH_BITS,
    GL_STENCIL_BITS,
    GL_TEXTURE_2D,
    GL_POLYGON_OFFSET_UNITS,
    GL_BLEND_COLOR,
    GL_BLEND_EQUATION,
    GL_BLEND_EQUATION_RGB,
    GL_POLYGON_OFFSET_FILL,
    GL_POLYGON_OFFSET_FACTOR,
    GL_TEXTURE_BINDING_2D,
    GL_TEXTURE_BINDING_3D,
    GL_UNPACK_SKIP_IMAGES,
    GL_UNPACK_IMAGE_HEIGHT,
    GL_MAX_3D_TEXTURE_SIZE,
    GL_SAMPLE_BUFFERS,
    GL_SAMPLES,
    GL_SAMPLE_COVERAGE_VALUE,
    GL_SAMPLE_COVERAGE_INVERT,
    GL_BLEND_DST_RGB,
    GL_BLEND_SRC_RGB,
    GL_BLEND_DST_ALPHA,
    GL_BLEND_SRC_ALPHA,
    GL_MAX_ELEMENTS_VERTICES,
    GL_MAX_ELEMENTS_INDICES,
    GL_MAJOR_VERSION,
    GL_MINOR_VERSION,
    GL_NUM_EXTENSIONS,
    GL_ALIASED_POINT_SIZE_RANGE,
    GL_ALIASED_LINE_WIDTH_RANGE,
    GL_ACTIVE_TEXTURE,
    GL_MAX_RENDERBUFFER_SIZE,
    GL_MAX_TEXTURE_LOD_BIAS,
    GL_TEXTURE_BINDING_CUBE_MAP,
    GL_MAX_CUBE_MAP_TEXTURE_SIZE,
    GL_VERTEX_ARRAY_BINDING,
    GL_NUM_COMPRESSED_TEXTURE_FORMATS,
    GL_COMPRESSED_TEXTURE_FORMATS,
    GL_NUM_PROGRAM_BINARY_FORMATS,
    GL_PROGRAM_BINARY_FORMATS,
    GL_STENCIL_BACK_FUNC,
    GL_STENCIL_BACK_FAIL,
    GL_STENCIL_BACK_PASS_DEPTH_FAIL,
    GL_STENCIL_BACK_PASS_DEPTH_PASS,
    GL_MAX_DRAW_BUFFERS,
    GL_BLEND_EQUATION_ALPHA,
    GL_MAX_VERTEX_ATTRIBS,
    GL_MAX_TEXTURE_IMAGE_UNITS,
    GL_ARRAY_BUFFER_BINDING,
    GL_ELEMENT_ARRAY_BUFFER_BINDING,
    GL_PIXEL_PACK_BUFFER_BINDING,
    GL_PIXEL_UNPACK_BUFFER_BINDING,
    GL_MAX_ARRAY_TEXTURE_LAYERS,
    GL_MIN_PROGRAM_TEXEL_OFFSET,
    GL_MAX_PROGRAM_TEXEL_OFFSET,
    GL_SAMPLER_BINDING,
    GL_UNIFORM_BUFFER_BINDING,
    GL_UNIFORM_BUFFER_START,
    GL_UNIFORM_BUFFER_SIZE,
    GL_MAX_VERTEX_UNIFORM_BLOCKS,
    GL_MAX_FRAGMENT_UNIFORM_BLOCKS,
    GL_MAX_COMBINED_UNIFORM_BLOCKS,
    GL_MAX_UNIFORM_BUFFER_BINDINGS,
    GL_MAX_UNIFORM_BLOCK_SIZE,
    GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
    GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
    GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT,
    GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,
    GL_MAX_VERTEX_UNIFORM_COMPONENTS,
    GL_MAX_VARYING_COMPONENTS,
    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,
    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS,
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
    GL_CURRENT_PROGRAM,
    GL_IMPLEMENTATION_COLOR_READ_TYPE,
    GL_IMPLEMENTATION_COLOR_READ_FORMAT,
    GL_TEXTURE_BINDING_2D_ARRAY,
    GL_TRANSFORM_FEEDBACK_BUFFER_START,
    GL_TRANSFORM_FEEDBACK_BUFFER_SIZE,
    GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
    GL_STENCIL_BACK_REF,
    GL_STENCIL_BACK_VALUE_MASK,
    GL_STENCIL_BACK_WRITEMASK,
    GL_DRAW_FRAMEBUFFER_BINDING,
    GL_RENDERBUFFER_BINDING,
    GL_READ_FRAMEBUFFER_BINDING,
    GL_MAX_COLOR_ATTACHMENTS,
    GL_MAX_COLOR_ATTACHMENTS_NV,
    GL_MAX_ELEMENT_INDEX,
    GL_SHADER_BINARY_FORMATS,
    GL_NUM_SHADER_BINARY_FORMATS,
    GL_SHADER_COMPILER,
    GL_MAX_VERTEX_UNIFORM_VECTORS,
    GL_MAX_VARYING_VECTORS,
    GL_MAX_FRAGMENT_UNIFORM_VECTORS,
    GL_FETCH_PER_SAMPLE_ARM,
    GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM,
    GL_MAX_SERVER_WAIT_TIMEOUT,
    GL_MAX_VERTEX_OUTPUT_COMPONENTS,
    GL_MAX_FRAGMENT_INPUT_COMPONENTS,
    GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV,
    GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV,
}
impl GLEnumGroupGetPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupGetPName> {
        match raw {
            0x0B21 => Some(GLEnumGroupGetPName::GL_LINE_WIDTH),
            0x0B44 => Some(GLEnumGroupGetPName::GL_CULL_FACE),
            0x0B45 => Some(GLEnumGroupGetPName::GL_CULL_FACE_MODE),
            0x0B46 => Some(GLEnumGroupGetPName::GL_FRONT_FACE),
            0x0B70 => Some(GLEnumGroupGetPName::GL_DEPTH_RANGE),
            0x0B71 => Some(GLEnumGroupGetPName::GL_DEPTH_TEST),
            0x0B72 => Some(GLEnumGroupGetPName::GL_DEPTH_WRITEMASK),
            0x0B73 => Some(GLEnumGroupGetPName::GL_DEPTH_CLEAR_VALUE),
            0x0B74 => Some(GLEnumGroupGetPName::GL_DEPTH_FUNC),
            0x0B90 => Some(GLEnumGroupGetPName::GL_STENCIL_TEST),
            0x0B91 => Some(GLEnumGroupGetPName::GL_STENCIL_CLEAR_VALUE),
            0x0B92 => Some(GLEnumGroupGetPName::GL_STENCIL_FUNC),
            0x0B93 => Some(GLEnumGroupGetPName::GL_STENCIL_VALUE_MASK),
            0x0B94 => Some(GLEnumGroupGetPName::GL_STENCIL_FAIL),
            0x0B95 => Some(GLEnumGroupGetPName::GL_STENCIL_PASS_DEPTH_FAIL),
            0x0B96 => Some(GLEnumGroupGetPName::GL_STENCIL_PASS_DEPTH_PASS),
            0x0B97 => Some(GLEnumGroupGetPName::GL_STENCIL_REF),
            0x0B98 => Some(GLEnumGroupGetPName::GL_STENCIL_WRITEMASK),
            0x0BA2 => Some(GLEnumGroupGetPName::GL_VIEWPORT),
            0x0BD0 => Some(GLEnumGroupGetPName::GL_DITHER),
            0x0BE2 => Some(GLEnumGroupGetPName::GL_BLEND),
            0x0C02 => Some(GLEnumGroupGetPName::GL_READ_BUFFER),
            0x0C10 => Some(GLEnumGroupGetPName::GL_SCISSOR_BOX),
            0x0C11 => Some(GLEnumGroupGetPName::GL_SCISSOR_TEST),
            0x0C22 => Some(GLEnumGroupGetPName::GL_COLOR_CLEAR_VALUE),
            0x0C23 => Some(GLEnumGroupGetPName::GL_COLOR_WRITEMASK),
            0x0CF2 => Some(GLEnumGroupGetPName::GL_UNPACK_ROW_LENGTH),
            0x0CF3 => Some(GLEnumGroupGetPName::GL_UNPACK_SKIP_ROWS),
            0x0CF4 => Some(GLEnumGroupGetPName::GL_UNPACK_SKIP_PIXELS),
            0x0CF5 => Some(GLEnumGroupGetPName::GL_UNPACK_ALIGNMENT),
            0x0D02 => Some(GLEnumGroupGetPName::GL_PACK_ROW_LENGTH),
            0x0D02 => Some(GLEnumGroupGetPName::GL_PACK_ROW_LENGTH_NV),
            0x0D03 => Some(GLEnumGroupGetPName::GL_PACK_SKIP_ROWS),
            0x0D03 => Some(GLEnumGroupGetPName::GL_PACK_SKIP_ROWS_NV),
            0x0D04 => Some(GLEnumGroupGetPName::GL_PACK_SKIP_PIXELS),
            0x0D04 => Some(GLEnumGroupGetPName::GL_PACK_SKIP_PIXELS_NV),
            0x0D05 => Some(GLEnumGroupGetPName::GL_PACK_ALIGNMENT),
            0x0D33 => Some(GLEnumGroupGetPName::GL_MAX_TEXTURE_SIZE),
            0x0D3A => Some(GLEnumGroupGetPName::GL_MAX_VIEWPORT_DIMS),
            0x0D50 => Some(GLEnumGroupGetPName::GL_SUBPIXEL_BITS),
            0x0D52 => Some(GLEnumGroupGetPName::GL_RED_BITS),
            0x0D53 => Some(GLEnumGroupGetPName::GL_GREEN_BITS),
            0x0D54 => Some(GLEnumGroupGetPName::GL_BLUE_BITS),
            0x0D55 => Some(GLEnumGroupGetPName::GL_ALPHA_BITS),
            0x0D56 => Some(GLEnumGroupGetPName::GL_DEPTH_BITS),
            0x0D57 => Some(GLEnumGroupGetPName::GL_STENCIL_BITS),
            0x0DE1 => Some(GLEnumGroupGetPName::GL_TEXTURE_2D),
            0x2A00 => Some(GLEnumGroupGetPName::GL_POLYGON_OFFSET_UNITS),
            0x8005 => Some(GLEnumGroupGetPName::GL_BLEND_COLOR),
            0x8009 => Some(GLEnumGroupGetPName::GL_BLEND_EQUATION),
            0x8009 => Some(GLEnumGroupGetPName::GL_BLEND_EQUATION_RGB),
            0x8037 => Some(GLEnumGroupGetPName::GL_POLYGON_OFFSET_FILL),
            0x8038 => Some(GLEnumGroupGetPName::GL_POLYGON_OFFSET_FACTOR),
            0x8069 => Some(GLEnumGroupGetPName::GL_TEXTURE_BINDING_2D),
            0x806A => Some(GLEnumGroupGetPName::GL_TEXTURE_BINDING_3D),
            0x806D => Some(GLEnumGroupGetPName::GL_UNPACK_SKIP_IMAGES),
            0x806E => Some(GLEnumGroupGetPName::GL_UNPACK_IMAGE_HEIGHT),
            0x8073 => Some(GLEnumGroupGetPName::GL_MAX_3D_TEXTURE_SIZE),
            0x80A8 => Some(GLEnumGroupGetPName::GL_SAMPLE_BUFFERS),
            0x80A9 => Some(GLEnumGroupGetPName::GL_SAMPLES),
            0x80AA => Some(GLEnumGroupGetPName::GL_SAMPLE_COVERAGE_VALUE),
            0x80AB => Some(GLEnumGroupGetPName::GL_SAMPLE_COVERAGE_INVERT),
            0x80C8 => Some(GLEnumGroupGetPName::GL_BLEND_DST_RGB),
            0x80C9 => Some(GLEnumGroupGetPName::GL_BLEND_SRC_RGB),
            0x80CA => Some(GLEnumGroupGetPName::GL_BLEND_DST_ALPHA),
            0x80CB => Some(GLEnumGroupGetPName::GL_BLEND_SRC_ALPHA),
            0x80E8 => Some(GLEnumGroupGetPName::GL_MAX_ELEMENTS_VERTICES),
            0x80E9 => Some(GLEnumGroupGetPName::GL_MAX_ELEMENTS_INDICES),
            0x821B => Some(GLEnumGroupGetPName::GL_MAJOR_VERSION),
            0x821C => Some(GLEnumGroupGetPName::GL_MINOR_VERSION),
            0x821D => Some(GLEnumGroupGetPName::GL_NUM_EXTENSIONS),
            0x846D => Some(GLEnumGroupGetPName::GL_ALIASED_POINT_SIZE_RANGE),
            0x846E => Some(GLEnumGroupGetPName::GL_ALIASED_LINE_WIDTH_RANGE),
            0x84E0 => Some(GLEnumGroupGetPName::GL_ACTIVE_TEXTURE),
            0x84E8 => Some(GLEnumGroupGetPName::GL_MAX_RENDERBUFFER_SIZE),
            0x84FD => Some(GLEnumGroupGetPName::GL_MAX_TEXTURE_LOD_BIAS),
            0x8514 => Some(GLEnumGroupGetPName::GL_TEXTURE_BINDING_CUBE_MAP),
            0x851C => Some(GLEnumGroupGetPName::GL_MAX_CUBE_MAP_TEXTURE_SIZE),
            0x85B5 => Some(GLEnumGroupGetPName::GL_VERTEX_ARRAY_BINDING),
            0x86A2 => Some(GLEnumGroupGetPName::GL_NUM_COMPRESSED_TEXTURE_FORMATS),
            0x86A3 => Some(GLEnumGroupGetPName::GL_COMPRESSED_TEXTURE_FORMATS),
            0x87FE => Some(GLEnumGroupGetPName::GL_NUM_PROGRAM_BINARY_FORMATS),
            0x87FF => Some(GLEnumGroupGetPName::GL_PROGRAM_BINARY_FORMATS),
            0x8800 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_FUNC),
            0x8801 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_FAIL),
            0x8802 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_PASS_DEPTH_FAIL),
            0x8803 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_PASS_DEPTH_PASS),
            0x8824 => Some(GLEnumGroupGetPName::GL_MAX_DRAW_BUFFERS),
            0x883D => Some(GLEnumGroupGetPName::GL_BLEND_EQUATION_ALPHA),
            0x8869 => Some(GLEnumGroupGetPName::GL_MAX_VERTEX_ATTRIBS),
            0x8872 => Some(GLEnumGroupGetPName::GL_MAX_TEXTURE_IMAGE_UNITS),
            0x8894 => Some(GLEnumGroupGetPName::GL_ARRAY_BUFFER_BINDING),
            0x8895 => Some(GLEnumGroupGetPName::GL_ELEMENT_ARRAY_BUFFER_BINDING),
            0x88ED => Some(GLEnumGroupGetPName::GL_PIXEL_PACK_BUFFER_BINDING),
            0x88EF => Some(GLEnumGroupGetPName::GL_PIXEL_UNPACK_BUFFER_BINDING),
            0x88FF => Some(GLEnumGroupGetPName::GL_MAX_ARRAY_TEXTURE_LAYERS),
            0x8904 => Some(GLEnumGroupGetPName::GL_MIN_PROGRAM_TEXEL_OFFSET),
            0x8905 => Some(GLEnumGroupGetPName::GL_MAX_PROGRAM_TEXEL_OFFSET),
            0x8919 => Some(GLEnumGroupGetPName::GL_SAMPLER_BINDING),
            0x8A28 => Some(GLEnumGroupGetPName::GL_UNIFORM_BUFFER_BINDING),
            0x8A29 => Some(GLEnumGroupGetPName::GL_UNIFORM_BUFFER_START),
            0x8A2A => Some(GLEnumGroupGetPName::GL_UNIFORM_BUFFER_SIZE),
            0x8A2B => Some(GLEnumGroupGetPName::GL_MAX_VERTEX_UNIFORM_BLOCKS),
            0x8A2D => Some(GLEnumGroupGetPName::GL_MAX_FRAGMENT_UNIFORM_BLOCKS),
            0x8A2E => Some(GLEnumGroupGetPName::GL_MAX_COMBINED_UNIFORM_BLOCKS),
            0x8A2F => Some(GLEnumGroupGetPName::GL_MAX_UNIFORM_BUFFER_BINDINGS),
            0x8A30 => Some(GLEnumGroupGetPName::GL_MAX_UNIFORM_BLOCK_SIZE),
            0x8A31 => Some(GLEnumGroupGetPName::GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS),
            0x8A33 => Some(GLEnumGroupGetPName::GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS),
            0x8A34 => Some(GLEnumGroupGetPName::GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT),
            0x8B49 => Some(GLEnumGroupGetPName::GL_MAX_FRAGMENT_UNIFORM_COMPONENTS),
            0x8B4A => Some(GLEnumGroupGetPName::GL_MAX_VERTEX_UNIFORM_COMPONENTS),
            0x8B4B => Some(GLEnumGroupGetPName::GL_MAX_VARYING_COMPONENTS),
            0x8B4C => Some(GLEnumGroupGetPName::GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
            0x8B4D => Some(GLEnumGroupGetPName::GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
            0x8B8B => Some(GLEnumGroupGetPName::GL_FRAGMENT_SHADER_DERIVATIVE_HINT),
            0x8B8D => Some(GLEnumGroupGetPName::GL_CURRENT_PROGRAM),
            0x8B9A => Some(GLEnumGroupGetPName::GL_IMPLEMENTATION_COLOR_READ_TYPE),
            0x8B9B => Some(GLEnumGroupGetPName::GL_IMPLEMENTATION_COLOR_READ_FORMAT),
            0x8C1D => Some(GLEnumGroupGetPName::GL_TEXTURE_BINDING_2D_ARRAY),
            0x8C84 => Some(GLEnumGroupGetPName::GL_TRANSFORM_FEEDBACK_BUFFER_START),
            0x8C85 => Some(GLEnumGroupGetPName::GL_TRANSFORM_FEEDBACK_BUFFER_SIZE),
            0x8C8F => Some(GLEnumGroupGetPName::GL_TRANSFORM_FEEDBACK_BUFFER_BINDING),
            0x8CA3 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_REF),
            0x8CA4 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_VALUE_MASK),
            0x8CA5 => Some(GLEnumGroupGetPName::GL_STENCIL_BACK_WRITEMASK),
            0x8CA6 => Some(GLEnumGroupGetPName::GL_DRAW_FRAMEBUFFER_BINDING),
            0x8CA7 => Some(GLEnumGroupGetPName::GL_RENDERBUFFER_BINDING),
            0x8CAA => Some(GLEnumGroupGetPName::GL_READ_FRAMEBUFFER_BINDING),
            0x8CDF => Some(GLEnumGroupGetPName::GL_MAX_COLOR_ATTACHMENTS),
            0x8CDF => Some(GLEnumGroupGetPName::GL_MAX_COLOR_ATTACHMENTS_NV),
            0x8D6B => Some(GLEnumGroupGetPName::GL_MAX_ELEMENT_INDEX),
            0x8DF8 => Some(GLEnumGroupGetPName::GL_SHADER_BINARY_FORMATS),
            0x8DF9 => Some(GLEnumGroupGetPName::GL_NUM_SHADER_BINARY_FORMATS),
            0x8DFA => Some(GLEnumGroupGetPName::GL_SHADER_COMPILER),
            0x8DFB => Some(GLEnumGroupGetPName::GL_MAX_VERTEX_UNIFORM_VECTORS),
            0x8DFC => Some(GLEnumGroupGetPName::GL_MAX_VARYING_VECTORS),
            0x8DFD => Some(GLEnumGroupGetPName::GL_MAX_FRAGMENT_UNIFORM_VECTORS),
            0x8F65 => Some(GLEnumGroupGetPName::GL_FETCH_PER_SAMPLE_ARM),
            0x8F66 => Some(GLEnumGroupGetPName::GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM),
            0x9111 => Some(GLEnumGroupGetPName::GL_MAX_SERVER_WAIT_TIMEOUT),
            0x9122 => Some(GLEnumGroupGetPName::GL_MAX_VERTEX_OUTPUT_COMPONENTS),
            0x9125 => Some(GLEnumGroupGetPName::GL_MAX_FRAGMENT_INPUT_COMPONENTS),
            0x95B1 => Some(GLEnumGroupGetPName::GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV),
            0x95B2 => Some(GLEnumGroupGetPName::GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupGetTextureParameter {
    GL_TEXTURE_BORDER_COLOR_NV,
    GL_TEXTURE_MAG_FILTER,
    GL_TEXTURE_MIN_FILTER,
    GL_TEXTURE_WRAP_S,
    GL_TEXTURE_WRAP_T,
    GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM,
    GL_SURFACE_COMPRESSION_EXT,
    GL_TEXTURE_Y_DEGAMMA_QCOM,
    GL_TEXTURE_CBCR_DEGAMMA_QCOM,
}
impl GLEnumGroupGetTextureParameter {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupGetTextureParameter> {
        match raw {
            0x1004 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_BORDER_COLOR_NV),
            0x2800 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_MAG_FILTER),
            0x2801 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_MIN_FILTER),
            0x2802 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_WRAP_S),
            0x2803 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_WRAP_T),
            0x8F6A => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM),
            0x96C0 => Some(GLEnumGroupGetTextureParameter::GL_SURFACE_COMPRESSION_EXT),
            0x9710 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_Y_DEGAMMA_QCOM),
            0x9711 => Some(GLEnumGroupGetTextureParameter::GL_TEXTURE_CBCR_DEGAMMA_QCOM),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupGraphicsResetStatus {
    GL_NO_ERROR,
}
impl GLEnumGroupGraphicsResetStatus {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupGraphicsResetStatus> {
        match raw {
            0 => Some(GLEnumGroupGraphicsResetStatus::GL_NO_ERROR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupHintMode {
    GL_DONT_CARE,
    GL_FASTEST,
    GL_NICEST,
}
impl GLEnumGroupHintMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupHintMode> {
        match raw {
            0x1100 => Some(GLEnumGroupHintMode::GL_DONT_CARE),
            0x1101 => Some(GLEnumGroupHintMode::GL_FASTEST),
            0x1102 => Some(GLEnumGroupHintMode::GL_NICEST),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupHintTarget {
    GL_GENERATE_MIPMAP_HINT,
    GL_PROGRAM_BINARY_RETRIEVABLE_HINT,
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES,
    GL_BINNING_CONTROL_HINT_QCOM,
}
impl GLEnumGroupHintTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupHintTarget> {
        match raw {
            0x8192 => Some(GLEnumGroupHintTarget::GL_GENERATE_MIPMAP_HINT),
            0x8257 => Some(GLEnumGroupHintTarget::GL_PROGRAM_BINARY_RETRIEVABLE_HINT),
            0x8B8B => Some(GLEnumGroupHintTarget::GL_FRAGMENT_SHADER_DERIVATIVE_HINT),
            0x8B8B => Some(GLEnumGroupHintTarget::GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES),
            0x8FB0 => Some(GLEnumGroupHintTarget::GL_BINNING_CONTROL_HINT_QCOM),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupIndexFunctionEXT {
    GL_NEVER,
    GL_LESS,
    GL_EQUAL,
    GL_LEQUAL,
    GL_GREATER,
    GL_NOTEQUAL,
    GL_GEQUAL,
    GL_ALWAYS,
}
impl GLEnumGroupIndexFunctionEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupIndexFunctionEXT> {
        match raw {
            0x0200 => Some(GLEnumGroupIndexFunctionEXT::GL_NEVER),
            0x0201 => Some(GLEnumGroupIndexFunctionEXT::GL_LESS),
            0x0202 => Some(GLEnumGroupIndexFunctionEXT::GL_EQUAL),
            0x0203 => Some(GLEnumGroupIndexFunctionEXT::GL_LEQUAL),
            0x0204 => Some(GLEnumGroupIndexFunctionEXT::GL_GREATER),
            0x0205 => Some(GLEnumGroupIndexFunctionEXT::GL_NOTEQUAL),
            0x0206 => Some(GLEnumGroupIndexFunctionEXT::GL_GEQUAL),
            0x0207 => Some(GLEnumGroupIndexFunctionEXT::GL_ALWAYS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupIndexPointerType {
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupIndexPointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupIndexPointerType> {
        match raw {
            0x1402 => Some(GLEnumGroupIndexPointerType::GL_SHORT),
            0x1404 => Some(GLEnumGroupIndexPointerType::GL_INT),
            0x1406 => Some(GLEnumGroupIndexPointerType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupInternalFormat {
    GL_STENCIL_INDEX_OES,
    GL_DEPTH_COMPONENT,
    GL_RED,
    GL_RED_EXT,
    GL_RGB,
    GL_RGBA,
    GL_ALPHA8_OES,
    GL_LUMINANCE8_OES,
    GL_LUMINANCE4_ALPHA4_OES,
    GL_LUMINANCE8_ALPHA8_OES,
    GL_RGB8,
    GL_RGB8_OES,
    GL_RGB10_EXT,
    GL_RGB16_EXT,
    GL_RGBA4,
    GL_RGBA4_OES,
    GL_RGB5_A1,
    GL_RGB5_A1_OES,
    GL_RGBA8,
    GL_RGBA8_OES,
    GL_RGB10_A2,
    GL_RGB10_A2_EXT,
    GL_RGBA16_EXT,
    GL_DEPTH_COMPONENT16,
    GL_DEPTH_COMPONENT16_OES,
    GL_DEPTH_COMPONENT24,
    GL_DEPTH_COMPONENT24_OES,
    GL_DEPTH_COMPONENT32_OES,
    GL_RG,
    GL_R8,
    GL_R8_EXT,
    GL_R16_EXT,
    GL_RG8,
    GL_RG8_EXT,
    GL_RG16_EXT,
    GL_R16F,
    GL_R16F_EXT,
    GL_R32F,
    GL_RG16F,
    GL_RG16F_EXT,
    GL_RG32F,
    GL_R8I,
    GL_R8UI,
    GL_R16I,
    GL_R16UI,
    GL_R32I,
    GL_R32UI,
    GL_RG8I,
    GL_RG8UI,
    GL_RG16I,
    GL_RG16UI,
    GL_RG32I,
    GL_RG32UI,
    GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
    GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE,
    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
    GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE,
    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
    GL_DEPTH_STENCIL,
    GL_DEPTH_STENCIL_OES,
    GL_RGBA32F,
    GL_RGB32F,
    GL_RGBA16F,
    GL_RGBA16F_EXT,
    GL_RGB16F,
    GL_RGB16F_EXT,
    GL_DEPTH24_STENCIL8,
    GL_DEPTH24_STENCIL8_OES,
    GL_R11F_G11F_B10F,
    GL_R11F_G11F_B10F_APPLE,
    GL_RGB9_E5,
    GL_RGB9_E5_APPLE,
    GL_SRGB,
    GL_SRGB_EXT,
    GL_SRGB8,
    GL_SRGB8_NV,
    GL_SRGB_ALPHA_EXT,
    GL_SRGB8_ALPHA8,
    GL_SRGB8_ALPHA8_EXT,
    GL_COMPRESSED_SRGB_S3TC_DXT1_EXT,
    GL_COMPRESSED_SRGB_S3TC_DXT1_NV,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV,
    GL_DEPTH_COMPONENT32F,
    GL_DEPTH32F_STENCIL8,
    GL_STENCIL_INDEX1_OES,
    GL_STENCIL_INDEX4_OES,
    GL_STENCIL_INDEX8,
    GL_STENCIL_INDEX8_OES,
    GL_RGB565_OES,
    GL_RGB565,
    GL_ETC1_RGB8_OES,
    GL_RGBA32UI,
    GL_RGB32UI,
    GL_RGBA16UI,
    GL_RGB16UI,
    GL_RGBA8UI,
    GL_RGB8UI,
    GL_RGBA32I,
    GL_RGB32I,
    GL_RGBA16I,
    GL_RGB16I,
    GL_RGBA8I,
    GL_RGB8I,
    GL_COMPRESSED_RED_RGTC1_EXT,
    GL_COMPRESSED_SIGNED_RED_RGTC1_EXT,
    GL_COMPRESSED_RED_GREEN_RGTC2_EXT,
    GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,
    GL_COMPRESSED_RGBA_BPTC_UNORM_EXT,
    GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,
    GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,
    GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,
    GL_R8_SNORM,
    GL_RG8_SNORM,
    GL_RGB8_SNORM,
    GL_RGBA8_SNORM,
    GL_R16_SNORM_EXT,
    GL_RG16_SNORM_EXT,
    GL_RGB16_SNORM_EXT,
    GL_RGBA16_SNORM_EXT,
    GL_SR8_EXT,
    GL_SRG8_EXT,
    GL_RGB10_A2UI,
    GL_COMPRESSED_R11_EAC,
    GL_COMPRESSED_SIGNED_R11_EAC,
    GL_COMPRESSED_RG11_EAC,
    GL_COMPRESSED_SIGNED_RG11_EAC,
    GL_COMPRESSED_RGB8_ETC2,
    GL_COMPRESSED_SRGB8_ETC2,
    GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
    GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
    GL_COMPRESSED_RGBA8_ETC2_EAC,
    GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
    GL_COMPRESSED_RGBA_ASTC_4x4_KHR,
    GL_COMPRESSED_RGBA_ASTC_5x4_KHR,
    GL_COMPRESSED_RGBA_ASTC_5x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_6x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_6x6_KHR,
    GL_COMPRESSED_RGBA_ASTC_8x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_8x6_KHR,
    GL_COMPRESSED_RGBA_ASTC_8x8_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x6_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x8_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x10_KHR,
    GL_COMPRESSED_RGBA_ASTC_12x10_KHR,
    GL_COMPRESSED_RGBA_ASTC_12x12_KHR,
    GL_COMPRESSED_RGBA_ASTC_3x3x3_OES,
    GL_COMPRESSED_RGBA_ASTC_4x3x3_OES,
    GL_COMPRESSED_RGBA_ASTC_4x4x3_OES,
    GL_COMPRESSED_RGBA_ASTC_4x4x4_OES,
    GL_COMPRESSED_RGBA_ASTC_5x4x4_OES,
    GL_COMPRESSED_RGBA_ASTC_5x5x4_OES,
    GL_COMPRESSED_RGBA_ASTC_5x5x5_OES,
    GL_COMPRESSED_RGBA_ASTC_6x5x5_OES,
    GL_COMPRESSED_RGBA_ASTC_6x6x5_OES,
    GL_COMPRESSED_RGBA_ASTC_6x6x6_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES,
}
impl GLEnumGroupInternalFormat {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupInternalFormat> {
        match raw {
            0x1901 => Some(GLEnumGroupInternalFormat::GL_STENCIL_INDEX_OES),
            0x1902 => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT),
            0x1903 => Some(GLEnumGroupInternalFormat::GL_RED),
            0x1903 => Some(GLEnumGroupInternalFormat::GL_RED_EXT),
            0x1907 => Some(GLEnumGroupInternalFormat::GL_RGB),
            0x1908 => Some(GLEnumGroupInternalFormat::GL_RGBA),
            0x803C => Some(GLEnumGroupInternalFormat::GL_ALPHA8_OES),
            0x8040 => Some(GLEnumGroupInternalFormat::GL_LUMINANCE8_OES),
            0x8043 => Some(GLEnumGroupInternalFormat::GL_LUMINANCE4_ALPHA4_OES),
            0x8045 => Some(GLEnumGroupInternalFormat::GL_LUMINANCE8_ALPHA8_OES),
            0x8051 => Some(GLEnumGroupInternalFormat::GL_RGB8),
            0x8051 => Some(GLEnumGroupInternalFormat::GL_RGB8_OES),
            0x8052 => Some(GLEnumGroupInternalFormat::GL_RGB10_EXT),
            0x8054 => Some(GLEnumGroupInternalFormat::GL_RGB16_EXT),
            0x8056 => Some(GLEnumGroupInternalFormat::GL_RGBA4),
            0x8056 => Some(GLEnumGroupInternalFormat::GL_RGBA4_OES),
            0x8057 => Some(GLEnumGroupInternalFormat::GL_RGB5_A1),
            0x8057 => Some(GLEnumGroupInternalFormat::GL_RGB5_A1_OES),
            0x8058 => Some(GLEnumGroupInternalFormat::GL_RGBA8),
            0x8058 => Some(GLEnumGroupInternalFormat::GL_RGBA8_OES),
            0x8059 => Some(GLEnumGroupInternalFormat::GL_RGB10_A2),
            0x8059 => Some(GLEnumGroupInternalFormat::GL_RGB10_A2_EXT),
            0x805B => Some(GLEnumGroupInternalFormat::GL_RGBA16_EXT),
            0x81A5 => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT16),
            0x81A5 => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT16_OES),
            0x81A6 => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT24),
            0x81A6 => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT24_OES),
            0x81A7 => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT32_OES),
            0x8227 => Some(GLEnumGroupInternalFormat::GL_RG),
            0x8229 => Some(GLEnumGroupInternalFormat::GL_R8),
            0x8229 => Some(GLEnumGroupInternalFormat::GL_R8_EXT),
            0x822A => Some(GLEnumGroupInternalFormat::GL_R16_EXT),
            0x822B => Some(GLEnumGroupInternalFormat::GL_RG8),
            0x822B => Some(GLEnumGroupInternalFormat::GL_RG8_EXT),
            0x822C => Some(GLEnumGroupInternalFormat::GL_RG16_EXT),
            0x822D => Some(GLEnumGroupInternalFormat::GL_R16F),
            0x822D => Some(GLEnumGroupInternalFormat::GL_R16F_EXT),
            0x822E => Some(GLEnumGroupInternalFormat::GL_R32F),
            0x822F => Some(GLEnumGroupInternalFormat::GL_RG16F),
            0x822F => Some(GLEnumGroupInternalFormat::GL_RG16F_EXT),
            0x8230 => Some(GLEnumGroupInternalFormat::GL_RG32F),
            0x8231 => Some(GLEnumGroupInternalFormat::GL_R8I),
            0x8232 => Some(GLEnumGroupInternalFormat::GL_R8UI),
            0x8233 => Some(GLEnumGroupInternalFormat::GL_R16I),
            0x8234 => Some(GLEnumGroupInternalFormat::GL_R16UI),
            0x8235 => Some(GLEnumGroupInternalFormat::GL_R32I),
            0x8236 => Some(GLEnumGroupInternalFormat::GL_R32UI),
            0x8237 => Some(GLEnumGroupInternalFormat::GL_RG8I),
            0x8238 => Some(GLEnumGroupInternalFormat::GL_RG8UI),
            0x8239 => Some(GLEnumGroupInternalFormat::GL_RG16I),
            0x823A => Some(GLEnumGroupInternalFormat::GL_RG16UI),
            0x823B => Some(GLEnumGroupInternalFormat::GL_RG32I),
            0x823C => Some(GLEnumGroupInternalFormat::GL_RG32UI),
            0x83F0 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGB_S3TC_DXT1_EXT),
            0x83F1 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT1_EXT),
            0x83F2 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE),
            0x83F2 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT3_EXT),
            0x83F3 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE),
            0x83F3 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT5_EXT),
            0x84F9 => Some(GLEnumGroupInternalFormat::GL_DEPTH_STENCIL),
            0x84F9 => Some(GLEnumGroupInternalFormat::GL_DEPTH_STENCIL_OES),
            0x8814 => Some(GLEnumGroupInternalFormat::GL_RGBA32F),
            0x8815 => Some(GLEnumGroupInternalFormat::GL_RGB32F),
            0x881A => Some(GLEnumGroupInternalFormat::GL_RGBA16F),
            0x881A => Some(GLEnumGroupInternalFormat::GL_RGBA16F_EXT),
            0x881B => Some(GLEnumGroupInternalFormat::GL_RGB16F),
            0x881B => Some(GLEnumGroupInternalFormat::GL_RGB16F_EXT),
            0x88F0 => Some(GLEnumGroupInternalFormat::GL_DEPTH24_STENCIL8),
            0x88F0 => Some(GLEnumGroupInternalFormat::GL_DEPTH24_STENCIL8_OES),
            0x8C3A => Some(GLEnumGroupInternalFormat::GL_R11F_G11F_B10F),
            0x8C3A => Some(GLEnumGroupInternalFormat::GL_R11F_G11F_B10F_APPLE),
            0x8C3D => Some(GLEnumGroupInternalFormat::GL_RGB9_E5),
            0x8C3D => Some(GLEnumGroupInternalFormat::GL_RGB9_E5_APPLE),
            0x8C40 => Some(GLEnumGroupInternalFormat::GL_SRGB),
            0x8C40 => Some(GLEnumGroupInternalFormat::GL_SRGB_EXT),
            0x8C41 => Some(GLEnumGroupInternalFormat::GL_SRGB8),
            0x8C41 => Some(GLEnumGroupInternalFormat::GL_SRGB8_NV),
            0x8C42 => Some(GLEnumGroupInternalFormat::GL_SRGB_ALPHA_EXT),
            0x8C43 => Some(GLEnumGroupInternalFormat::GL_SRGB8_ALPHA8),
            0x8C43 => Some(GLEnumGroupInternalFormat::GL_SRGB8_ALPHA8_EXT),
            0x8C4C => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_S3TC_DXT1_EXT),
            0x8C4C => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_S3TC_DXT1_NV),
            0x8C4D => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT),
            0x8C4D => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV),
            0x8C4E => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT),
            0x8C4E => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV),
            0x8C4F => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT),
            0x8C4F => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV),
            0x8CAC => Some(GLEnumGroupInternalFormat::GL_DEPTH_COMPONENT32F),
            0x8CAD => Some(GLEnumGroupInternalFormat::GL_DEPTH32F_STENCIL8),
            0x8D46 => Some(GLEnumGroupInternalFormat::GL_STENCIL_INDEX1_OES),
            0x8D47 => Some(GLEnumGroupInternalFormat::GL_STENCIL_INDEX4_OES),
            0x8D48 => Some(GLEnumGroupInternalFormat::GL_STENCIL_INDEX8),
            0x8D48 => Some(GLEnumGroupInternalFormat::GL_STENCIL_INDEX8_OES),
            0x8D62 => Some(GLEnumGroupInternalFormat::GL_RGB565_OES),
            0x8D62 => Some(GLEnumGroupInternalFormat::GL_RGB565),
            0x8D64 => Some(GLEnumGroupInternalFormat::GL_ETC1_RGB8_OES),
            0x8D70 => Some(GLEnumGroupInternalFormat::GL_RGBA32UI),
            0x8D71 => Some(GLEnumGroupInternalFormat::GL_RGB32UI),
            0x8D76 => Some(GLEnumGroupInternalFormat::GL_RGBA16UI),
            0x8D77 => Some(GLEnumGroupInternalFormat::GL_RGB16UI),
            0x8D7C => Some(GLEnumGroupInternalFormat::GL_RGBA8UI),
            0x8D7D => Some(GLEnumGroupInternalFormat::GL_RGB8UI),
            0x8D82 => Some(GLEnumGroupInternalFormat::GL_RGBA32I),
            0x8D83 => Some(GLEnumGroupInternalFormat::GL_RGB32I),
            0x8D88 => Some(GLEnumGroupInternalFormat::GL_RGBA16I),
            0x8D89 => Some(GLEnumGroupInternalFormat::GL_RGB16I),
            0x8D8E => Some(GLEnumGroupInternalFormat::GL_RGBA8I),
            0x8D8F => Some(GLEnumGroupInternalFormat::GL_RGB8I),
            0x8DBB => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RED_RGTC1_EXT),
            0x8DBC => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SIGNED_RED_RGTC1_EXT),
            0x8DBD => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RED_GREEN_RGTC2_EXT),
            0x8DBE => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT),
            0x8E8C => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_BPTC_UNORM_EXT),
            0x8E8D => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT),
            0x8E8E => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT),
            0x8E8F => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT),
            0x8F94 => Some(GLEnumGroupInternalFormat::GL_R8_SNORM),
            0x8F95 => Some(GLEnumGroupInternalFormat::GL_RG8_SNORM),
            0x8F96 => Some(GLEnumGroupInternalFormat::GL_RGB8_SNORM),
            0x8F97 => Some(GLEnumGroupInternalFormat::GL_RGBA8_SNORM),
            0x8F98 => Some(GLEnumGroupInternalFormat::GL_R16_SNORM_EXT),
            0x8F99 => Some(GLEnumGroupInternalFormat::GL_RG16_SNORM_EXT),
            0x8F9A => Some(GLEnumGroupInternalFormat::GL_RGB16_SNORM_EXT),
            0x8F9B => Some(GLEnumGroupInternalFormat::GL_RGBA16_SNORM_EXT),
            0x8FBD => Some(GLEnumGroupInternalFormat::GL_SR8_EXT),
            0x8FBE => Some(GLEnumGroupInternalFormat::GL_SRG8_EXT),
            0x906F => Some(GLEnumGroupInternalFormat::GL_RGB10_A2UI),
            0x9270 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_R11_EAC),
            0x9271 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SIGNED_R11_EAC),
            0x9272 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RG11_EAC),
            0x9273 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SIGNED_RG11_EAC),
            0x9274 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGB8_ETC2),
            0x9275 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ETC2),
            0x9276 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2),
            0x9277 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2),
            0x9278 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA8_ETC2_EAC),
            0x9279 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC),
            0x93B0 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x4_KHR),
            0x93B1 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x4_KHR),
            0x93B2 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x5_KHR),
            0x93B3 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x5_KHR),
            0x93B4 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x6_KHR),
            0x93B5 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_8x5_KHR),
            0x93B6 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_8x6_KHR),
            0x93B7 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_8x8_KHR),
            0x93B8 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x5_KHR),
            0x93B9 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x6_KHR),
            0x93BA => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x8_KHR),
            0x93BB => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x10_KHR),
            0x93BC => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_12x10_KHR),
            0x93BD => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_12x12_KHR),
            0x93C0 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_3x3x3_OES),
            0x93C1 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x3x3_OES),
            0x93C2 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x4x3_OES),
            0x93C3 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x4x4_OES),
            0x93C4 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x4x4_OES),
            0x93C5 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x5x4_OES),
            0x93C6 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x5x5_OES),
            0x93C7 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x5x5_OES),
            0x93C8 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x6x5_OES),
            0x93C9 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x6x6_OES),
            0x93D0 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR),
            0x93D1 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR),
            0x93D2 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR),
            0x93D3 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR),
            0x93D4 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR),
            0x93D5 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR),
            0x93D6 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR),
            0x93D7 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR),
            0x93D8 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR),
            0x93D9 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR),
            0x93DA => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR),
            0x93DB => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR),
            0x93DC => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR),
            0x93DD => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR),
            0x93E0 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES),
            0x93E1 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES),
            0x93E2 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES),
            0x93E3 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES),
            0x93E4 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES),
            0x93E5 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES),
            0x93E6 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES),
            0x93E7 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES),
            0x93E8 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES),
            0x93E9 => Some(GLEnumGroupInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupInternalFormatPName {
    GL_SAMPLES,
    GL_NUM_SAMPLE_COUNTS,
}
impl GLEnumGroupInternalFormatPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupInternalFormatPName> {
        match raw {
            0x80A9 => Some(GLEnumGroupInternalFormatPName::GL_SAMPLES),
            0x9380 => Some(GLEnumGroupInternalFormatPName::GL_NUM_SAMPLE_COUNTS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupInvalidateFramebufferAttachment {
    GL_COLOR,
    GL_DEPTH,
    GL_STENCIL,
    GL_DEPTH_STENCIL_ATTACHMENT,
    GL_COLOR_ATTACHMENT0,
    GL_COLOR_ATTACHMENT0_NV,
    GL_COLOR_ATTACHMENT1,
    GL_COLOR_ATTACHMENT1_NV,
    GL_COLOR_ATTACHMENT2,
    GL_COLOR_ATTACHMENT2_NV,
    GL_COLOR_ATTACHMENT3,
    GL_COLOR_ATTACHMENT3_NV,
    GL_COLOR_ATTACHMENT4,
    GL_COLOR_ATTACHMENT4_NV,
    GL_COLOR_ATTACHMENT5,
    GL_COLOR_ATTACHMENT5_NV,
    GL_COLOR_ATTACHMENT6,
    GL_COLOR_ATTACHMENT6_NV,
    GL_COLOR_ATTACHMENT7,
    GL_COLOR_ATTACHMENT7_NV,
    GL_COLOR_ATTACHMENT8,
    GL_COLOR_ATTACHMENT8_NV,
    GL_COLOR_ATTACHMENT9,
    GL_COLOR_ATTACHMENT9_NV,
    GL_COLOR_ATTACHMENT10,
    GL_COLOR_ATTACHMENT10_NV,
    GL_COLOR_ATTACHMENT11,
    GL_COLOR_ATTACHMENT11_NV,
    GL_COLOR_ATTACHMENT12,
    GL_COLOR_ATTACHMENT12_NV,
    GL_COLOR_ATTACHMENT13,
    GL_COLOR_ATTACHMENT13_NV,
    GL_COLOR_ATTACHMENT14,
    GL_COLOR_ATTACHMENT14_NV,
    GL_COLOR_ATTACHMENT15,
    GL_COLOR_ATTACHMENT15_NV,
    GL_COLOR_ATTACHMENT16,
    GL_COLOR_ATTACHMENT17,
    GL_COLOR_ATTACHMENT18,
    GL_COLOR_ATTACHMENT19,
    GL_COLOR_ATTACHMENT20,
    GL_COLOR_ATTACHMENT21,
    GL_COLOR_ATTACHMENT22,
    GL_COLOR_ATTACHMENT23,
    GL_COLOR_ATTACHMENT24,
    GL_COLOR_ATTACHMENT25,
    GL_COLOR_ATTACHMENT26,
    GL_COLOR_ATTACHMENT27,
    GL_COLOR_ATTACHMENT28,
    GL_COLOR_ATTACHMENT29,
    GL_COLOR_ATTACHMENT30,
    GL_COLOR_ATTACHMENT31,
    GL_DEPTH_ATTACHMENT,
}
impl GLEnumGroupInvalidateFramebufferAttachment {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupInvalidateFramebufferAttachment> {
        match raw {
            0x1800 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR),
            0x1801 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_DEPTH),
            0x1802 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_STENCIL),
            0x821A => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_DEPTH_STENCIL_ATTACHMENT),
            0x8CE0 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT0),
            0x8CE0 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT0_NV),
            0x8CE1 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT1),
            0x8CE1 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT1_NV),
            0x8CE2 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT2),
            0x8CE2 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT2_NV),
            0x8CE3 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT3),
            0x8CE3 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT3_NV),
            0x8CE4 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT4),
            0x8CE4 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT4_NV),
            0x8CE5 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT5),
            0x8CE5 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT5_NV),
            0x8CE6 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT6),
            0x8CE6 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT6_NV),
            0x8CE7 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT7),
            0x8CE7 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT7_NV),
            0x8CE8 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT8),
            0x8CE8 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT8_NV),
            0x8CE9 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT9),
            0x8CE9 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT9_NV),
            0x8CEA => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT10),
            0x8CEA => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT10_NV),
            0x8CEB => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT11),
            0x8CEB => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT11_NV),
            0x8CEC => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT12),
            0x8CEC => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT12_NV),
            0x8CED => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT13),
            0x8CED => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT13_NV),
            0x8CEE => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT14),
            0x8CEE => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT14_NV),
            0x8CEF => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT15),
            0x8CEF => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT15_NV),
            0x8CF0 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT16),
            0x8CF1 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT17),
            0x8CF2 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT18),
            0x8CF3 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT19),
            0x8CF4 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT20),
            0x8CF5 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT21),
            0x8CF6 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT22),
            0x8CF7 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT23),
            0x8CF8 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT24),
            0x8CF9 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT25),
            0x8CFA => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT26),
            0x8CFB => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT27),
            0x8CFC => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT28),
            0x8CFD => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT29),
            0x8CFE => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT30),
            0x8CFF => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_COLOR_ATTACHMENT31),
            0x8D00 => Some(GLEnumGroupInvalidateFramebufferAttachment::GL_DEPTH_ATTACHMENT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupLightEnvModeSGIX {
    GL_REPLACE,
}
impl GLEnumGroupLightEnvModeSGIX {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupLightEnvModeSGIX> {
        match raw {
            0x1E01 => Some(GLEnumGroupLightEnvModeSGIX::GL_REPLACE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupListNameType {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
}
impl GLEnumGroupListNameType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupListNameType> {
        match raw {
            0x1400 => Some(GLEnumGroupListNameType::GL_BYTE),
            0x1401 => Some(GLEnumGroupListNameType::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupListNameType::GL_SHORT),
            0x1403 => Some(GLEnumGroupListNameType::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupListNameType::GL_INT),
            0x1405 => Some(GLEnumGroupListNameType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupListNameType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupLogicOp {
    GL_INVERT,
}
impl GLEnumGroupLogicOp {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupLogicOp> {
        match raw {
            0x150A => Some(GLEnumGroupLogicOp::GL_INVERT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupMapBufferAccessMask {
    GL_MAP_READ_BIT,
    GL_MAP_WRITE_BIT,
    GL_MAP_INVALIDATE_RANGE_BIT,
    GL_MAP_INVALIDATE_BUFFER_BIT,
    GL_MAP_FLUSH_EXPLICIT_BIT,
    GL_MAP_UNSYNCHRONIZED_BIT,
}
impl GLEnumGroupMapBufferAccessMask {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupMapBufferAccessMask> {
        match raw {
            0x0001 => Some(GLEnumGroupMapBufferAccessMask::GL_MAP_READ_BIT),
            0x0002 => Some(GLEnumGroupMapBufferAccessMask::GL_MAP_WRITE_BIT),
            0x0004 => Some(GLEnumGroupMapBufferAccessMask::GL_MAP_INVALIDATE_RANGE_BIT),
            0x0008 => Some(GLEnumGroupMapBufferAccessMask::GL_MAP_INVALIDATE_BUFFER_BIT),
            0x0010 => Some(GLEnumGroupMapBufferAccessMask::GL_MAP_FLUSH_EXPLICIT_BIT),
            0x0020 => Some(GLEnumGroupMapBufferAccessMask::GL_MAP_UNSYNCHRONIZED_BIT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupMapTypeNV {
    GL_FLOAT,
}
impl GLEnumGroupMapTypeNV {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupMapTypeNV> {
        match raw {
            0x1406 => Some(GLEnumGroupMapTypeNV::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupMatrixIndexPointerTypeARB {
    GL_UNSIGNED_BYTE,
    GL_UNSIGNED_SHORT,
    GL_UNSIGNED_INT,
}
impl GLEnumGroupMatrixIndexPointerTypeARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupMatrixIndexPointerTypeARB> {
        match raw {
            0x1401 => Some(GLEnumGroupMatrixIndexPointerTypeARB::GL_UNSIGNED_BYTE),
            0x1403 => Some(GLEnumGroupMatrixIndexPointerTypeARB::GL_UNSIGNED_SHORT),
            0x1405 => Some(GLEnumGroupMatrixIndexPointerTypeARB::GL_UNSIGNED_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupMatrixMode {
    GL_TEXTURE,
}
impl GLEnumGroupMatrixMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupMatrixMode> {
        match raw {
            0x1702 => Some(GLEnumGroupMatrixMode::GL_TEXTURE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupNormalPointerType {
    GL_BYTE,
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupNormalPointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupNormalPointerType> {
        match raw {
            0x1400 => Some(GLEnumGroupNormalPointerType::GL_BYTE),
            0x1402 => Some(GLEnumGroupNormalPointerType::GL_SHORT),
            0x1404 => Some(GLEnumGroupNormalPointerType::GL_INT),
            0x1406 => Some(GLEnumGroupNormalPointerType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupObjectIdentifier {
    GL_TEXTURE,
    GL_FRAMEBUFFER,
    GL_RENDERBUFFER,
    GL_TRANSFORM_FEEDBACK,
}
impl GLEnumGroupObjectIdentifier {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupObjectIdentifier> {
        match raw {
            0x1702 => Some(GLEnumGroupObjectIdentifier::GL_TEXTURE),
            0x8D40 => Some(GLEnumGroupObjectIdentifier::GL_FRAMEBUFFER),
            0x8D41 => Some(GLEnumGroupObjectIdentifier::GL_RENDERBUFFER),
            0x8E22 => Some(GLEnumGroupObjectIdentifier::GL_TRANSFORM_FEEDBACK),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPathColorFormat {
    GL_NONE,
    GL_ALPHA,
    GL_RGB,
    GL_RGBA,
    GL_LUMINANCE,
    GL_LUMINANCE_ALPHA,
}
impl GLEnumGroupPathColorFormat {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPathColorFormat> {
        match raw {
            0 => Some(GLEnumGroupPathColorFormat::GL_NONE),
            0x1906 => Some(GLEnumGroupPathColorFormat::GL_ALPHA),
            0x1907 => Some(GLEnumGroupPathColorFormat::GL_RGB),
            0x1908 => Some(GLEnumGroupPathColorFormat::GL_RGBA),
            0x1909 => Some(GLEnumGroupPathColorFormat::GL_LUMINANCE),
            0x190A => Some(GLEnumGroupPathColorFormat::GL_LUMINANCE_ALPHA),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPathFillMode {
    GL_INVERT,
}
impl GLEnumGroupPathFillMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPathFillMode> {
        match raw {
            0x150A => Some(GLEnumGroupPathFillMode::GL_INVERT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPathFontStyle {
    GL_NONE,
}
impl GLEnumGroupPathFontStyle {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPathFontStyle> {
        match raw {
            0 => Some(GLEnumGroupPathFontStyle::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPathGenMode {
    GL_NONE,
}
impl GLEnumGroupPathGenMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPathGenMode> {
        match raw {
            0 => Some(GLEnumGroupPathGenMode::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPathTransformType {
    GL_NONE,
}
impl GLEnumGroupPathTransformType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPathTransformType> {
        match raw {
            0 => Some(GLEnumGroupPathTransformType::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPipelineParameterName {
    GL_FRAGMENT_SHADER,
    GL_VERTEX_SHADER,
    GL_INFO_LOG_LENGTH,
}
impl GLEnumGroupPipelineParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPipelineParameterName> {
        match raw {
            0x8B30 => Some(GLEnumGroupPipelineParameterName::GL_FRAGMENT_SHADER),
            0x8B31 => Some(GLEnumGroupPipelineParameterName::GL_VERTEX_SHADER),
            0x8B84 => Some(GLEnumGroupPipelineParameterName::GL_INFO_LOG_LENGTH),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPixelCopyType {
    GL_COLOR,
    GL_DEPTH,
    GL_STENCIL,
}
impl GLEnumGroupPixelCopyType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPixelCopyType> {
        match raw {
            0x1800 => Some(GLEnumGroupPixelCopyType::GL_COLOR),
            0x1801 => Some(GLEnumGroupPixelCopyType::GL_DEPTH),
            0x1802 => Some(GLEnumGroupPixelCopyType::GL_STENCIL),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPixelFormat {
    GL_UNSIGNED_SHORT,
    GL_UNSIGNED_INT,
    GL_DEPTH_COMPONENT,
    GL_RED,
    GL_RED_EXT,
    GL_GREEN,
    GL_BLUE,
    GL_ALPHA,
    GL_RGB,
    GL_RGBA,
    GL_LUMINANCE,
    GL_LUMINANCE_ALPHA,
    GL_BGR_EXT,
    GL_BGRA_EXT,
    GL_BGRA_IMG,
    GL_RG,
    GL_RG_INTEGER,
    GL_DEPTH_STENCIL,
    GL_RED_INTEGER,
    GL_RGB_INTEGER,
    GL_RGBA_INTEGER,
}
impl GLEnumGroupPixelFormat {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPixelFormat> {
        match raw {
            0x1403 => Some(GLEnumGroupPixelFormat::GL_UNSIGNED_SHORT),
            0x1405 => Some(GLEnumGroupPixelFormat::GL_UNSIGNED_INT),
            0x1902 => Some(GLEnumGroupPixelFormat::GL_DEPTH_COMPONENT),
            0x1903 => Some(GLEnumGroupPixelFormat::GL_RED),
            0x1903 => Some(GLEnumGroupPixelFormat::GL_RED_EXT),
            0x1904 => Some(GLEnumGroupPixelFormat::GL_GREEN),
            0x1905 => Some(GLEnumGroupPixelFormat::GL_BLUE),
            0x1906 => Some(GLEnumGroupPixelFormat::GL_ALPHA),
            0x1907 => Some(GLEnumGroupPixelFormat::GL_RGB),
            0x1908 => Some(GLEnumGroupPixelFormat::GL_RGBA),
            0x1909 => Some(GLEnumGroupPixelFormat::GL_LUMINANCE),
            0x190A => Some(GLEnumGroupPixelFormat::GL_LUMINANCE_ALPHA),
            0x80E0 => Some(GLEnumGroupPixelFormat::GL_BGR_EXT),
            0x80E1 => Some(GLEnumGroupPixelFormat::GL_BGRA_EXT),
            0x80E1 => Some(GLEnumGroupPixelFormat::GL_BGRA_IMG),
            0x8227 => Some(GLEnumGroupPixelFormat::GL_RG),
            0x8228 => Some(GLEnumGroupPixelFormat::GL_RG_INTEGER),
            0x84F9 => Some(GLEnumGroupPixelFormat::GL_DEPTH_STENCIL),
            0x8D94 => Some(GLEnumGroupPixelFormat::GL_RED_INTEGER),
            0x8D98 => Some(GLEnumGroupPixelFormat::GL_RGB_INTEGER),
            0x8D99 => Some(GLEnumGroupPixelFormat::GL_RGBA_INTEGER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPixelStoreParameter {
    GL_UNPACK_ROW_LENGTH,
    GL_UNPACK_ROW_LENGTH_EXT,
    GL_UNPACK_SKIP_ROWS,
    GL_UNPACK_SKIP_ROWS_EXT,
    GL_UNPACK_SKIP_PIXELS,
    GL_UNPACK_SKIP_PIXELS_EXT,
    GL_UNPACK_ALIGNMENT,
    GL_PACK_ROW_LENGTH,
    GL_PACK_ROW_LENGTH_NV,
    GL_PACK_SKIP_ROWS,
    GL_PACK_SKIP_ROWS_NV,
    GL_PACK_SKIP_PIXELS,
    GL_PACK_SKIP_PIXELS_NV,
    GL_PACK_ALIGNMENT,
    GL_UNPACK_SKIP_IMAGES,
    GL_UNPACK_IMAGE_HEIGHT,
}
impl GLEnumGroupPixelStoreParameter {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPixelStoreParameter> {
        match raw {
            0x0CF2 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_ROW_LENGTH),
            0x0CF2 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_ROW_LENGTH_EXT),
            0x0CF3 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_SKIP_ROWS),
            0x0CF3 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_SKIP_ROWS_EXT),
            0x0CF4 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_SKIP_PIXELS),
            0x0CF4 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_SKIP_PIXELS_EXT),
            0x0CF5 => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_ALIGNMENT),
            0x0D02 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_ROW_LENGTH),
            0x0D02 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_ROW_LENGTH_NV),
            0x0D03 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_SKIP_ROWS),
            0x0D03 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_SKIP_ROWS_NV),
            0x0D04 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_SKIP_PIXELS),
            0x0D04 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_SKIP_PIXELS_NV),
            0x0D05 => Some(GLEnumGroupPixelStoreParameter::GL_PACK_ALIGNMENT),
            0x806D => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_SKIP_IMAGES),
            0x806E => Some(GLEnumGroupPixelStoreParameter::GL_UNPACK_IMAGE_HEIGHT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPixelTexGenModeSGIX {
    GL_NONE,
    GL_ALPHA,
    GL_RGB,
    GL_RGBA,
}
impl GLEnumGroupPixelTexGenModeSGIX {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPixelTexGenModeSGIX> {
        match raw {
            0 => Some(GLEnumGroupPixelTexGenModeSGIX::GL_NONE),
            0x1906 => Some(GLEnumGroupPixelTexGenModeSGIX::GL_ALPHA),
            0x1907 => Some(GLEnumGroupPixelTexGenModeSGIX::GL_RGB),
            0x1908 => Some(GLEnumGroupPixelTexGenModeSGIX::GL_RGBA),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPixelType {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
    GL_HALF_FLOAT,
    GL_UNSIGNED_SHORT_4_4_4_4,
    GL_UNSIGNED_SHORT_5_5_5_1,
    GL_UNSIGNED_SHORT_5_6_5,
    GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT,
    GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG,
    GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT,
    GL_UNSIGNED_INT_2_10_10_10_REV,
    GL_UNSIGNED_INT_2_10_10_10_REV_EXT,
    GL_UNSIGNED_INT_24_8,
    GL_UNSIGNED_INT_24_8_OES,
    GL_UNSIGNED_INT_10F_11F_11F_REV,
    GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE,
    GL_UNSIGNED_INT_5_9_9_9_REV,
    GL_UNSIGNED_INT_5_9_9_9_REV_APPLE,
    GL_FLOAT_32_UNSIGNED_INT_24_8_REV,
}
impl GLEnumGroupPixelType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPixelType> {
        match raw {
            0x1400 => Some(GLEnumGroupPixelType::GL_BYTE),
            0x1401 => Some(GLEnumGroupPixelType::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupPixelType::GL_SHORT),
            0x1403 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupPixelType::GL_INT),
            0x1405 => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupPixelType::GL_FLOAT),
            0x140B => Some(GLEnumGroupPixelType::GL_HALF_FLOAT),
            0x8033 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT_4_4_4_4),
            0x8034 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT_5_5_5_1),
            0x8363 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT_5_6_5),
            0x8365 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT),
            0x8365 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG),
            0x8366 => Some(GLEnumGroupPixelType::GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT),
            0x8368 => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_2_10_10_10_REV),
            0x8368 => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_2_10_10_10_REV_EXT),
            0x84FA => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_24_8),
            0x84FA => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_24_8_OES),
            0x8C3B => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_10F_11F_11F_REV),
            0x8C3B => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE),
            0x8C3E => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_5_9_9_9_REV),
            0x8C3E => Some(GLEnumGroupPixelType::GL_UNSIGNED_INT_5_9_9_9_REV_APPLE),
            0x8DAD => Some(GLEnumGroupPixelType::GL_FLOAT_32_UNSIGNED_INT_24_8_REV),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPrecisionType {
    GL_LOW_FLOAT,
    GL_MEDIUM_FLOAT,
    GL_HIGH_FLOAT,
    GL_LOW_INT,
    GL_MEDIUM_INT,
    GL_HIGH_INT,
}
impl GLEnumGroupPrecisionType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPrecisionType> {
        match raw {
            0x8DF0 => Some(GLEnumGroupPrecisionType::GL_LOW_FLOAT),
            0x8DF1 => Some(GLEnumGroupPrecisionType::GL_MEDIUM_FLOAT),
            0x8DF2 => Some(GLEnumGroupPrecisionType::GL_HIGH_FLOAT),
            0x8DF3 => Some(GLEnumGroupPrecisionType::GL_LOW_INT),
            0x8DF4 => Some(GLEnumGroupPrecisionType::GL_MEDIUM_INT),
            0x8DF5 => Some(GLEnumGroupPrecisionType::GL_HIGH_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupPrimitiveType {
    GL_POINTS,
    GL_LINES,
    GL_LINE_LOOP,
    GL_LINE_STRIP,
    GL_TRIANGLES,
    GL_TRIANGLE_STRIP,
    GL_TRIANGLE_FAN,
}
impl GLEnumGroupPrimitiveType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupPrimitiveType> {
        match raw {
            0x0000 => Some(GLEnumGroupPrimitiveType::GL_POINTS),
            0x0001 => Some(GLEnumGroupPrimitiveType::GL_LINES),
            0x0002 => Some(GLEnumGroupPrimitiveType::GL_LINE_LOOP),
            0x0003 => Some(GLEnumGroupPrimitiveType::GL_LINE_STRIP),
            0x0004 => Some(GLEnumGroupPrimitiveType::GL_TRIANGLES),
            0x0005 => Some(GLEnumGroupPrimitiveType::GL_TRIANGLE_STRIP),
            0x0006 => Some(GLEnumGroupPrimitiveType::GL_TRIANGLE_FAN),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupProgramInterface {
    GL_TRANSFORM_FEEDBACK_BUFFER,
}
impl GLEnumGroupProgramInterface {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupProgramInterface> {
        match raw {
            0x8C8E => Some(GLEnumGroupProgramInterface::GL_TRANSFORM_FEEDBACK_BUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupProgramParameterPName {
    GL_PROGRAM_BINARY_RETRIEVABLE_HINT,
}
impl GLEnumGroupProgramParameterPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupProgramParameterPName> {
        match raw {
            0x8257 => Some(GLEnumGroupProgramParameterPName::GL_PROGRAM_BINARY_RETRIEVABLE_HINT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupProgramPropertyARB {
    GL_PROGRAM_BINARY_LENGTH,
    GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH,
    GL_ACTIVE_UNIFORM_BLOCKS,
    GL_DELETE_STATUS,
    GL_LINK_STATUS,
    GL_VALIDATE_STATUS,
    GL_INFO_LOG_LENGTH,
    GL_ATTACHED_SHADERS,
    GL_ACTIVE_UNIFORMS,
    GL_ACTIVE_UNIFORM_MAX_LENGTH,
    GL_ACTIVE_ATTRIBUTES,
    GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
    GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH,
    GL_TRANSFORM_FEEDBACK_BUFFER_MODE,
    GL_TRANSFORM_FEEDBACK_VARYINGS,
}
impl GLEnumGroupProgramPropertyARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupProgramPropertyARB> {
        match raw {
            0x8741 => Some(GLEnumGroupProgramPropertyARB::GL_PROGRAM_BINARY_LENGTH),
            0x8A35 => Some(GLEnumGroupProgramPropertyARB::GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH),
            0x8A36 => Some(GLEnumGroupProgramPropertyARB::GL_ACTIVE_UNIFORM_BLOCKS),
            0x8B80 => Some(GLEnumGroupProgramPropertyARB::GL_DELETE_STATUS),
            0x8B82 => Some(GLEnumGroupProgramPropertyARB::GL_LINK_STATUS),
            0x8B83 => Some(GLEnumGroupProgramPropertyARB::GL_VALIDATE_STATUS),
            0x8B84 => Some(GLEnumGroupProgramPropertyARB::GL_INFO_LOG_LENGTH),
            0x8B85 => Some(GLEnumGroupProgramPropertyARB::GL_ATTACHED_SHADERS),
            0x8B86 => Some(GLEnumGroupProgramPropertyARB::GL_ACTIVE_UNIFORMS),
            0x8B87 => Some(GLEnumGroupProgramPropertyARB::GL_ACTIVE_UNIFORM_MAX_LENGTH),
            0x8B89 => Some(GLEnumGroupProgramPropertyARB::GL_ACTIVE_ATTRIBUTES),
            0x8B8A => Some(GLEnumGroupProgramPropertyARB::GL_ACTIVE_ATTRIBUTE_MAX_LENGTH),
            0x8C76 => Some(GLEnumGroupProgramPropertyARB::GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH),
            0x8C7F => Some(GLEnumGroupProgramPropertyARB::GL_TRANSFORM_FEEDBACK_BUFFER_MODE),
            0x8C83 => Some(GLEnumGroupProgramPropertyARB::GL_TRANSFORM_FEEDBACK_VARYINGS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupQueryObjectParameterName {
    GL_QUERY_RESULT,
    GL_QUERY_RESULT_AVAILABLE,
}
impl GLEnumGroupQueryObjectParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupQueryObjectParameterName> {
        match raw {
            0x8866 => Some(GLEnumGroupQueryObjectParameterName::GL_QUERY_RESULT),
            0x8867 => Some(GLEnumGroupQueryObjectParameterName::GL_QUERY_RESULT_AVAILABLE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupQueryParameterName {
    GL_CURRENT_QUERY,
}
impl GLEnumGroupQueryParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupQueryParameterName> {
        match raw {
            0x8865 => Some(GLEnumGroupQueryParameterName::GL_CURRENT_QUERY),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupQueryTarget {
    GL_ANY_SAMPLES_PASSED,
    GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN,
    GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
}
impl GLEnumGroupQueryTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupQueryTarget> {
        match raw {
            0x8C2F => Some(GLEnumGroupQueryTarget::GL_ANY_SAMPLES_PASSED),
            0x8C88 => Some(GLEnumGroupQueryTarget::GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN),
            0x8D6A => Some(GLEnumGroupQueryTarget::GL_ANY_SAMPLES_PASSED_CONSERVATIVE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupReadBufferMode {
    GL_NONE,
    GL_FRONT,
    GL_BACK,
    GL_COLOR_ATTACHMENT0,
    GL_COLOR_ATTACHMENT1,
    GL_COLOR_ATTACHMENT2,
    GL_COLOR_ATTACHMENT3,
    GL_COLOR_ATTACHMENT4,
    GL_COLOR_ATTACHMENT5,
    GL_COLOR_ATTACHMENT6,
    GL_COLOR_ATTACHMENT7,
    GL_COLOR_ATTACHMENT8,
    GL_COLOR_ATTACHMENT9,
    GL_COLOR_ATTACHMENT10,
    GL_COLOR_ATTACHMENT11,
    GL_COLOR_ATTACHMENT12,
    GL_COLOR_ATTACHMENT13,
    GL_COLOR_ATTACHMENT14,
    GL_COLOR_ATTACHMENT15,
}
impl GLEnumGroupReadBufferMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupReadBufferMode> {
        match raw {
            0 => Some(GLEnumGroupReadBufferMode::GL_NONE),
            0x0404 => Some(GLEnumGroupReadBufferMode::GL_FRONT),
            0x0405 => Some(GLEnumGroupReadBufferMode::GL_BACK),
            0x8CE0 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT0),
            0x8CE1 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT1),
            0x8CE2 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT2),
            0x8CE3 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT3),
            0x8CE4 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT4),
            0x8CE5 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT5),
            0x8CE6 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT6),
            0x8CE7 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT7),
            0x8CE8 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT8),
            0x8CE9 => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT9),
            0x8CEA => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT10),
            0x8CEB => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT11),
            0x8CEC => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT12),
            0x8CED => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT13),
            0x8CEE => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT14),
            0x8CEF => Some(GLEnumGroupReadBufferMode::GL_COLOR_ATTACHMENT15),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupRenderbufferParameterName {
    GL_RENDERBUFFER_SAMPLES,
    GL_RENDERBUFFER_WIDTH,
    GL_RENDERBUFFER_HEIGHT,
    GL_RENDERBUFFER_INTERNAL_FORMAT,
    GL_RENDERBUFFER_RED_SIZE,
    GL_RENDERBUFFER_GREEN_SIZE,
    GL_RENDERBUFFER_BLUE_SIZE,
    GL_RENDERBUFFER_ALPHA_SIZE,
    GL_RENDERBUFFER_DEPTH_SIZE,
    GL_RENDERBUFFER_STENCIL_SIZE,
}
impl GLEnumGroupRenderbufferParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupRenderbufferParameterName> {
        match raw {
            0x8CAB => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_SAMPLES),
            0x8D42 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_WIDTH),
            0x8D43 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_HEIGHT),
            0x8D44 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_INTERNAL_FORMAT),
            0x8D50 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_RED_SIZE),
            0x8D51 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_GREEN_SIZE),
            0x8D52 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_BLUE_SIZE),
            0x8D53 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_ALPHA_SIZE),
            0x8D54 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_DEPTH_SIZE),
            0x8D55 => Some(GLEnumGroupRenderbufferParameterName::GL_RENDERBUFFER_STENCIL_SIZE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupRenderbufferTarget {
    GL_RENDERBUFFER,
}
impl GLEnumGroupRenderbufferTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupRenderbufferTarget> {
        match raw {
            0x8D41 => Some(GLEnumGroupRenderbufferTarget::GL_RENDERBUFFER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupReplacementCodeTypeSUN {
    GL_UNSIGNED_BYTE,
    GL_UNSIGNED_SHORT,
    GL_UNSIGNED_INT,
}
impl GLEnumGroupReplacementCodeTypeSUN {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupReplacementCodeTypeSUN> {
        match raw {
            0x1401 => Some(GLEnumGroupReplacementCodeTypeSUN::GL_UNSIGNED_BYTE),
            0x1403 => Some(GLEnumGroupReplacementCodeTypeSUN::GL_UNSIGNED_SHORT),
            0x1405 => Some(GLEnumGroupReplacementCodeTypeSUN::GL_UNSIGNED_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSamplerParameterF {
    GL_TEXTURE_MIN_LOD,
    GL_TEXTURE_MAX_LOD,
    GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM,
}
impl GLEnumGroupSamplerParameterF {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSamplerParameterF> {
        match raw {
            0x813A => Some(GLEnumGroupSamplerParameterF::GL_TEXTURE_MIN_LOD),
            0x813B => Some(GLEnumGroupSamplerParameterF::GL_TEXTURE_MAX_LOD),
            0x8F6A => Some(GLEnumGroupSamplerParameterF::GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSamplerParameterI {
    GL_TEXTURE_MAG_FILTER,
    GL_TEXTURE_MIN_FILTER,
    GL_TEXTURE_WRAP_S,
    GL_TEXTURE_WRAP_T,
    GL_TEXTURE_WRAP_R,
    GL_TEXTURE_COMPARE_MODE,
    GL_TEXTURE_COMPARE_FUNC,
    GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM,
}
impl GLEnumGroupSamplerParameterI {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSamplerParameterI> {
        match raw {
            0x2800 => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_MAG_FILTER),
            0x2801 => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_MIN_FILTER),
            0x2802 => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_WRAP_S),
            0x2803 => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_WRAP_T),
            0x8072 => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_WRAP_R),
            0x884C => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_COMPARE_MODE),
            0x884D => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_COMPARE_FUNC),
            0x8F6A => Some(GLEnumGroupSamplerParameterI::GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupScalarType {
    GL_UNSIGNED_BYTE,
    GL_UNSIGNED_SHORT,
    GL_UNSIGNED_INT,
}
impl GLEnumGroupScalarType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupScalarType> {
        match raw {
            0x1401 => Some(GLEnumGroupScalarType::GL_UNSIGNED_BYTE),
            0x1403 => Some(GLEnumGroupScalarType::GL_UNSIGNED_SHORT),
            0x1405 => Some(GLEnumGroupScalarType::GL_UNSIGNED_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSecondaryColorPointerTypeIBM {
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupSecondaryColorPointerTypeIBM {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSecondaryColorPointerTypeIBM> {
        match raw {
            0x1402 => Some(GLEnumGroupSecondaryColorPointerTypeIBM::GL_SHORT),
            0x1404 => Some(GLEnumGroupSecondaryColorPointerTypeIBM::GL_INT),
            0x1406 => Some(GLEnumGroupSecondaryColorPointerTypeIBM::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupShaderBinaryFormat {
    GL_SGX_BINARY_IMG,
    GL_MALI_SHADER_BINARY_ARM,
    GL_SHADER_BINARY_VIV,
    GL_SHADER_BINARY_DMP,
    GL_GCCSO_SHADER_BINARY_FJ,
}
impl GLEnumGroupShaderBinaryFormat {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupShaderBinaryFormat> {
        match raw {
            0x8C0A => Some(GLEnumGroupShaderBinaryFormat::GL_SGX_BINARY_IMG),
            0x8F60 => Some(GLEnumGroupShaderBinaryFormat::GL_MALI_SHADER_BINARY_ARM),
            0x8FC4 => Some(GLEnumGroupShaderBinaryFormat::GL_SHADER_BINARY_VIV),
            0x9250 => Some(GLEnumGroupShaderBinaryFormat::GL_SHADER_BINARY_DMP),
            0x9260 => Some(GLEnumGroupShaderBinaryFormat::GL_GCCSO_SHADER_BINARY_FJ),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupShaderParameterName {
    GL_SHADER_TYPE,
    GL_DELETE_STATUS,
    GL_COMPILE_STATUS,
    GL_INFO_LOG_LENGTH,
    GL_SHADER_SOURCE_LENGTH,
}
impl GLEnumGroupShaderParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupShaderParameterName> {
        match raw {
            0x8B4F => Some(GLEnumGroupShaderParameterName::GL_SHADER_TYPE),
            0x8B80 => Some(GLEnumGroupShaderParameterName::GL_DELETE_STATUS),
            0x8B81 => Some(GLEnumGroupShaderParameterName::GL_COMPILE_STATUS),
            0x8B84 => Some(GLEnumGroupShaderParameterName::GL_INFO_LOG_LENGTH),
            0x8B88 => Some(GLEnumGroupShaderParameterName::GL_SHADER_SOURCE_LENGTH),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupShaderType {
    GL_FRAGMENT_SHADER,
    GL_VERTEX_SHADER,
}
impl GLEnumGroupShaderType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupShaderType> {
        match raw {
            0x8B30 => Some(GLEnumGroupShaderType::GL_FRAGMENT_SHADER),
            0x8B31 => Some(GLEnumGroupShaderType::GL_VERTEX_SHADER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSizedInternalFormat {
    GL_ALPHA8_OES,
    GL_LUMINANCE8_OES,
    GL_LUMINANCE4_ALPHA4_OES,
    GL_LUMINANCE8_ALPHA8_OES,
    GL_RGB8,
    GL_RGB8_OES,
    GL_RGB10_EXT,
    GL_RGB16_EXT,
    GL_RGBA4,
    GL_RGBA4_OES,
    GL_RGB5_A1,
    GL_RGB5_A1_OES,
    GL_RGBA8,
    GL_RGBA8_OES,
    GL_RGB10_A2,
    GL_RGB10_A2_EXT,
    GL_RGBA16_EXT,
    GL_DEPTH_COMPONENT16,
    GL_DEPTH_COMPONENT16_OES,
    GL_DEPTH_COMPONENT24,
    GL_DEPTH_COMPONENT24_OES,
    GL_DEPTH_COMPONENT32_OES,
    GL_R8,
    GL_R8_EXT,
    GL_R16_EXT,
    GL_RG8,
    GL_RG8_EXT,
    GL_RG16_EXT,
    GL_R16F,
    GL_R16F_EXT,
    GL_R32F,
    GL_RG16F,
    GL_RG16F_EXT,
    GL_RG32F,
    GL_R8I,
    GL_R8UI,
    GL_R16I,
    GL_R16UI,
    GL_R32I,
    GL_R32UI,
    GL_RG8I,
    GL_RG8UI,
    GL_RG16I,
    GL_RG16UI,
    GL_RG32I,
    GL_RG32UI,
    GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
    GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE,
    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
    GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE,
    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
    GL_RGBA32F,
    GL_RGB32F,
    GL_RGBA16F,
    GL_RGBA16F_EXT,
    GL_RGB16F,
    GL_RGB16F_EXT,
    GL_DEPTH24_STENCIL8,
    GL_DEPTH24_STENCIL8_OES,
    GL_R11F_G11F_B10F,
    GL_R11F_G11F_B10F_APPLE,
    GL_RGB9_E5,
    GL_RGB9_E5_APPLE,
    GL_SRGB8,
    GL_SRGB8_NV,
    GL_SRGB8_ALPHA8,
    GL_SRGB8_ALPHA8_EXT,
    GL_COMPRESSED_SRGB_S3TC_DXT1_EXT,
    GL_COMPRESSED_SRGB_S3TC_DXT1_NV,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,
    GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV,
    GL_DEPTH_COMPONENT32F,
    GL_DEPTH32F_STENCIL8,
    GL_STENCIL_INDEX1_OES,
    GL_STENCIL_INDEX4_OES,
    GL_STENCIL_INDEX8,
    GL_STENCIL_INDEX8_OES,
    GL_RGB565_OES,
    GL_RGB565,
    GL_ETC1_RGB8_OES,
    GL_RGBA32UI,
    GL_RGB32UI,
    GL_RGBA16UI,
    GL_RGB16UI,
    GL_RGBA8UI,
    GL_RGB8UI,
    GL_RGBA32I,
    GL_RGB32I,
    GL_RGBA16I,
    GL_RGB16I,
    GL_RGBA8I,
    GL_RGB8I,
    GL_COMPRESSED_RED_RGTC1_EXT,
    GL_COMPRESSED_SIGNED_RED_RGTC1_EXT,
    GL_COMPRESSED_RED_GREEN_RGTC2_EXT,
    GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,
    GL_COMPRESSED_RGBA_BPTC_UNORM_EXT,
    GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,
    GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,
    GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,
    GL_R8_SNORM,
    GL_RG8_SNORM,
    GL_RGB8_SNORM,
    GL_RGBA8_SNORM,
    GL_R16_SNORM_EXT,
    GL_RG16_SNORM_EXT,
    GL_RGB16_SNORM_EXT,
    GL_RGBA16_SNORM_EXT,
    GL_RGB10_A2UI,
    GL_COMPRESSED_R11_EAC,
    GL_COMPRESSED_SIGNED_R11_EAC,
    GL_COMPRESSED_RG11_EAC,
    GL_COMPRESSED_SIGNED_RG11_EAC,
    GL_COMPRESSED_RGB8_ETC2,
    GL_COMPRESSED_SRGB8_ETC2,
    GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
    GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
    GL_COMPRESSED_RGBA8_ETC2_EAC,
    GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
    GL_COMPRESSED_RGBA_ASTC_4x4_KHR,
    GL_COMPRESSED_RGBA_ASTC_5x4_KHR,
    GL_COMPRESSED_RGBA_ASTC_5x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_6x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_6x6_KHR,
    GL_COMPRESSED_RGBA_ASTC_8x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_8x6_KHR,
    GL_COMPRESSED_RGBA_ASTC_8x8_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x5_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x6_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x8_KHR,
    GL_COMPRESSED_RGBA_ASTC_10x10_KHR,
    GL_COMPRESSED_RGBA_ASTC_12x10_KHR,
    GL_COMPRESSED_RGBA_ASTC_12x12_KHR,
    GL_COMPRESSED_RGBA_ASTC_3x3x3_OES,
    GL_COMPRESSED_RGBA_ASTC_4x3x3_OES,
    GL_COMPRESSED_RGBA_ASTC_4x4x3_OES,
    GL_COMPRESSED_RGBA_ASTC_4x4x4_OES,
    GL_COMPRESSED_RGBA_ASTC_5x4x4_OES,
    GL_COMPRESSED_RGBA_ASTC_5x5x4_OES,
    GL_COMPRESSED_RGBA_ASTC_5x5x5_OES,
    GL_COMPRESSED_RGBA_ASTC_6x5x5_OES,
    GL_COMPRESSED_RGBA_ASTC_6x6x5_OES,
    GL_COMPRESSED_RGBA_ASTC_6x6x6_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES,
    GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES,
}
impl GLEnumGroupSizedInternalFormat {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSizedInternalFormat> {
        match raw {
            0x803C => Some(GLEnumGroupSizedInternalFormat::GL_ALPHA8_OES),
            0x8040 => Some(GLEnumGroupSizedInternalFormat::GL_LUMINANCE8_OES),
            0x8043 => Some(GLEnumGroupSizedInternalFormat::GL_LUMINANCE4_ALPHA4_OES),
            0x8045 => Some(GLEnumGroupSizedInternalFormat::GL_LUMINANCE8_ALPHA8_OES),
            0x8051 => Some(GLEnumGroupSizedInternalFormat::GL_RGB8),
            0x8051 => Some(GLEnumGroupSizedInternalFormat::GL_RGB8_OES),
            0x8052 => Some(GLEnumGroupSizedInternalFormat::GL_RGB10_EXT),
            0x8054 => Some(GLEnumGroupSizedInternalFormat::GL_RGB16_EXT),
            0x8056 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA4),
            0x8056 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA4_OES),
            0x8057 => Some(GLEnumGroupSizedInternalFormat::GL_RGB5_A1),
            0x8057 => Some(GLEnumGroupSizedInternalFormat::GL_RGB5_A1_OES),
            0x8058 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA8),
            0x8058 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA8_OES),
            0x8059 => Some(GLEnumGroupSizedInternalFormat::GL_RGB10_A2),
            0x8059 => Some(GLEnumGroupSizedInternalFormat::GL_RGB10_A2_EXT),
            0x805B => Some(GLEnumGroupSizedInternalFormat::GL_RGBA16_EXT),
            0x81A5 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH_COMPONENT16),
            0x81A5 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH_COMPONENT16_OES),
            0x81A6 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH_COMPONENT24),
            0x81A6 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH_COMPONENT24_OES),
            0x81A7 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH_COMPONENT32_OES),
            0x8229 => Some(GLEnumGroupSizedInternalFormat::GL_R8),
            0x8229 => Some(GLEnumGroupSizedInternalFormat::GL_R8_EXT),
            0x822A => Some(GLEnumGroupSizedInternalFormat::GL_R16_EXT),
            0x822B => Some(GLEnumGroupSizedInternalFormat::GL_RG8),
            0x822B => Some(GLEnumGroupSizedInternalFormat::GL_RG8_EXT),
            0x822C => Some(GLEnumGroupSizedInternalFormat::GL_RG16_EXT),
            0x822D => Some(GLEnumGroupSizedInternalFormat::GL_R16F),
            0x822D => Some(GLEnumGroupSizedInternalFormat::GL_R16F_EXT),
            0x822E => Some(GLEnumGroupSizedInternalFormat::GL_R32F),
            0x822F => Some(GLEnumGroupSizedInternalFormat::GL_RG16F),
            0x822F => Some(GLEnumGroupSizedInternalFormat::GL_RG16F_EXT),
            0x8230 => Some(GLEnumGroupSizedInternalFormat::GL_RG32F),
            0x8231 => Some(GLEnumGroupSizedInternalFormat::GL_R8I),
            0x8232 => Some(GLEnumGroupSizedInternalFormat::GL_R8UI),
            0x8233 => Some(GLEnumGroupSizedInternalFormat::GL_R16I),
            0x8234 => Some(GLEnumGroupSizedInternalFormat::GL_R16UI),
            0x8235 => Some(GLEnumGroupSizedInternalFormat::GL_R32I),
            0x8236 => Some(GLEnumGroupSizedInternalFormat::GL_R32UI),
            0x8237 => Some(GLEnumGroupSizedInternalFormat::GL_RG8I),
            0x8238 => Some(GLEnumGroupSizedInternalFormat::GL_RG8UI),
            0x8239 => Some(GLEnumGroupSizedInternalFormat::GL_RG16I),
            0x823A => Some(GLEnumGroupSizedInternalFormat::GL_RG16UI),
            0x823B => Some(GLEnumGroupSizedInternalFormat::GL_RG32I),
            0x823C => Some(GLEnumGroupSizedInternalFormat::GL_RG32UI),
            0x83F0 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGB_S3TC_DXT1_EXT),
            0x83F1 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT1_EXT),
            0x83F2 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE),
            0x83F2 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT3_EXT),
            0x83F3 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE),
            0x83F3 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_S3TC_DXT5_EXT),
            0x8814 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA32F),
            0x8815 => Some(GLEnumGroupSizedInternalFormat::GL_RGB32F),
            0x881A => Some(GLEnumGroupSizedInternalFormat::GL_RGBA16F),
            0x881A => Some(GLEnumGroupSizedInternalFormat::GL_RGBA16F_EXT),
            0x881B => Some(GLEnumGroupSizedInternalFormat::GL_RGB16F),
            0x881B => Some(GLEnumGroupSizedInternalFormat::GL_RGB16F_EXT),
            0x88F0 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH24_STENCIL8),
            0x88F0 => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH24_STENCIL8_OES),
            0x8C3A => Some(GLEnumGroupSizedInternalFormat::GL_R11F_G11F_B10F),
            0x8C3A => Some(GLEnumGroupSizedInternalFormat::GL_R11F_G11F_B10F_APPLE),
            0x8C3D => Some(GLEnumGroupSizedInternalFormat::GL_RGB9_E5),
            0x8C3D => Some(GLEnumGroupSizedInternalFormat::GL_RGB9_E5_APPLE),
            0x8C41 => Some(GLEnumGroupSizedInternalFormat::GL_SRGB8),
            0x8C41 => Some(GLEnumGroupSizedInternalFormat::GL_SRGB8_NV),
            0x8C43 => Some(GLEnumGroupSizedInternalFormat::GL_SRGB8_ALPHA8),
            0x8C43 => Some(GLEnumGroupSizedInternalFormat::GL_SRGB8_ALPHA8_EXT),
            0x8C4C => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_S3TC_DXT1_EXT),
            0x8C4C => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_S3TC_DXT1_NV),
            0x8C4D => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT),
            0x8C4D => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV),
            0x8C4E => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT),
            0x8C4E => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV),
            0x8C4F => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT),
            0x8C4F => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV),
            0x8CAC => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH_COMPONENT32F),
            0x8CAD => Some(GLEnumGroupSizedInternalFormat::GL_DEPTH32F_STENCIL8),
            0x8D46 => Some(GLEnumGroupSizedInternalFormat::GL_STENCIL_INDEX1_OES),
            0x8D47 => Some(GLEnumGroupSizedInternalFormat::GL_STENCIL_INDEX4_OES),
            0x8D48 => Some(GLEnumGroupSizedInternalFormat::GL_STENCIL_INDEX8),
            0x8D48 => Some(GLEnumGroupSizedInternalFormat::GL_STENCIL_INDEX8_OES),
            0x8D62 => Some(GLEnumGroupSizedInternalFormat::GL_RGB565_OES),
            0x8D62 => Some(GLEnumGroupSizedInternalFormat::GL_RGB565),
            0x8D64 => Some(GLEnumGroupSizedInternalFormat::GL_ETC1_RGB8_OES),
            0x8D70 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA32UI),
            0x8D71 => Some(GLEnumGroupSizedInternalFormat::GL_RGB32UI),
            0x8D76 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA16UI),
            0x8D77 => Some(GLEnumGroupSizedInternalFormat::GL_RGB16UI),
            0x8D7C => Some(GLEnumGroupSizedInternalFormat::GL_RGBA8UI),
            0x8D7D => Some(GLEnumGroupSizedInternalFormat::GL_RGB8UI),
            0x8D82 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA32I),
            0x8D83 => Some(GLEnumGroupSizedInternalFormat::GL_RGB32I),
            0x8D88 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA16I),
            0x8D89 => Some(GLEnumGroupSizedInternalFormat::GL_RGB16I),
            0x8D8E => Some(GLEnumGroupSizedInternalFormat::GL_RGBA8I),
            0x8D8F => Some(GLEnumGroupSizedInternalFormat::GL_RGB8I),
            0x8DBB => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RED_RGTC1_EXT),
            0x8DBC => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SIGNED_RED_RGTC1_EXT),
            0x8DBD => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RED_GREEN_RGTC2_EXT),
            0x8DBE => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT),
            0x8E8C => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_BPTC_UNORM_EXT),
            0x8E8D => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT),
            0x8E8E => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT),
            0x8E8F => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT),
            0x8F94 => Some(GLEnumGroupSizedInternalFormat::GL_R8_SNORM),
            0x8F95 => Some(GLEnumGroupSizedInternalFormat::GL_RG8_SNORM),
            0x8F96 => Some(GLEnumGroupSizedInternalFormat::GL_RGB8_SNORM),
            0x8F97 => Some(GLEnumGroupSizedInternalFormat::GL_RGBA8_SNORM),
            0x8F98 => Some(GLEnumGroupSizedInternalFormat::GL_R16_SNORM_EXT),
            0x8F99 => Some(GLEnumGroupSizedInternalFormat::GL_RG16_SNORM_EXT),
            0x8F9A => Some(GLEnumGroupSizedInternalFormat::GL_RGB16_SNORM_EXT),
            0x8F9B => Some(GLEnumGroupSizedInternalFormat::GL_RGBA16_SNORM_EXT),
            0x906F => Some(GLEnumGroupSizedInternalFormat::GL_RGB10_A2UI),
            0x9270 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_R11_EAC),
            0x9271 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SIGNED_R11_EAC),
            0x9272 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RG11_EAC),
            0x9273 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SIGNED_RG11_EAC),
            0x9274 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGB8_ETC2),
            0x9275 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ETC2),
            0x9276 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2),
            0x9277 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2),
            0x9278 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA8_ETC2_EAC),
            0x9279 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC),
            0x93B0 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x4_KHR),
            0x93B1 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x4_KHR),
            0x93B2 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x5_KHR),
            0x93B3 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x5_KHR),
            0x93B4 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x6_KHR),
            0x93B5 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_8x5_KHR),
            0x93B6 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_8x6_KHR),
            0x93B7 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_8x8_KHR),
            0x93B8 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x5_KHR),
            0x93B9 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x6_KHR),
            0x93BA => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x8_KHR),
            0x93BB => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_10x10_KHR),
            0x93BC => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_12x10_KHR),
            0x93BD => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_12x12_KHR),
            0x93C0 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_3x3x3_OES),
            0x93C1 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x3x3_OES),
            0x93C2 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x4x3_OES),
            0x93C3 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_4x4x4_OES),
            0x93C4 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x4x4_OES),
            0x93C5 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x5x4_OES),
            0x93C6 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_5x5x5_OES),
            0x93C7 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x5x5_OES),
            0x93C8 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x6x5_OES),
            0x93C9 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_RGBA_ASTC_6x6x6_OES),
            0x93D0 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR),
            0x93D1 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR),
            0x93D2 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR),
            0x93D3 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR),
            0x93D4 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR),
            0x93D5 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR),
            0x93D6 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR),
            0x93D7 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR),
            0x93D8 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR),
            0x93D9 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR),
            0x93DA => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR),
            0x93DB => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR),
            0x93DC => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR),
            0x93DD => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR),
            0x93E0 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES),
            0x93E1 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES),
            0x93E2 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES),
            0x93E3 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES),
            0x93E4 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES),
            0x93E5 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES),
            0x93E6 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES),
            0x93E7 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES),
            0x93E8 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES),
            0x93E9 => Some(GLEnumGroupSizedInternalFormat::GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupStencilFunction {
    GL_NEVER,
    GL_LESS,
    GL_EQUAL,
    GL_LEQUAL,
    GL_GREATER,
    GL_NOTEQUAL,
    GL_GEQUAL,
    GL_ALWAYS,
}
impl GLEnumGroupStencilFunction {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupStencilFunction> {
        match raw {
            0x0200 => Some(GLEnumGroupStencilFunction::GL_NEVER),
            0x0201 => Some(GLEnumGroupStencilFunction::GL_LESS),
            0x0202 => Some(GLEnumGroupStencilFunction::GL_EQUAL),
            0x0203 => Some(GLEnumGroupStencilFunction::GL_LEQUAL),
            0x0204 => Some(GLEnumGroupStencilFunction::GL_GREATER),
            0x0205 => Some(GLEnumGroupStencilFunction::GL_NOTEQUAL),
            0x0206 => Some(GLEnumGroupStencilFunction::GL_GEQUAL),
            0x0207 => Some(GLEnumGroupStencilFunction::GL_ALWAYS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupStencilOp {
    GL_ZERO,
    GL_INVERT,
    GL_KEEP,
    GL_REPLACE,
    GL_INCR,
    GL_DECR,
    GL_INCR_WRAP,
    GL_DECR_WRAP,
}
impl GLEnumGroupStencilOp {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupStencilOp> {
        match raw {
            0 => Some(GLEnumGroupStencilOp::GL_ZERO),
            0x150A => Some(GLEnumGroupStencilOp::GL_INVERT),
            0x1E00 => Some(GLEnumGroupStencilOp::GL_KEEP),
            0x1E01 => Some(GLEnumGroupStencilOp::GL_REPLACE),
            0x1E02 => Some(GLEnumGroupStencilOp::GL_INCR),
            0x1E03 => Some(GLEnumGroupStencilOp::GL_DECR),
            0x8507 => Some(GLEnumGroupStencilOp::GL_INCR_WRAP),
            0x8508 => Some(GLEnumGroupStencilOp::GL_DECR_WRAP),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupStringName {
    GL_VENDOR,
    GL_RENDERER,
    GL_VERSION,
    GL_EXTENSIONS,
    GL_SHADING_LANGUAGE_VERSION,
}
impl GLEnumGroupStringName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupStringName> {
        match raw {
            0x1F00 => Some(GLEnumGroupStringName::GL_VENDOR),
            0x1F01 => Some(GLEnumGroupStringName::GL_RENDERER),
            0x1F02 => Some(GLEnumGroupStringName::GL_VERSION),
            0x1F03 => Some(GLEnumGroupStringName::GL_EXTENSIONS),
            0x8B8C => Some(GLEnumGroupStringName::GL_SHADING_LANGUAGE_VERSION),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSubgroupSupportedFeatures {
    GL_SUBGROUP_FEATURE_BASIC_BIT_KHR,
    GL_SUBGROUP_FEATURE_VOTE_BIT_KHR,
    GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR,
    GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR,
    GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR,
    GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR,
    GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR,
    GL_SUBGROUP_FEATURE_QUAD_BIT_KHR,
    GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
}
impl GLEnumGroupSubgroupSupportedFeatures {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSubgroupSupportedFeatures> {
        match raw {
            0x00000001 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_BASIC_BIT_KHR),
            0x00000002 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_VOTE_BIT_KHR),
            0x00000004 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR),
            0x00000008 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR),
            0x00000010 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR),
            0x00000020 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR),
            0x00000040 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR),
            0x00000080 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_QUAD_BIT_KHR),
            0x00000100 => Some(GLEnumGroupSubgroupSupportedFeatures::GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSubroutineParameterName {
    GL_UNIFORM_SIZE,
    GL_UNIFORM_NAME_LENGTH,
}
impl GLEnumGroupSubroutineParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSubroutineParameterName> {
        match raw {
            0x8A38 => Some(GLEnumGroupSubroutineParameterName::GL_UNIFORM_SIZE),
            0x8A39 => Some(GLEnumGroupSubroutineParameterName::GL_UNIFORM_NAME_LENGTH),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSyncBehaviorFlags {
    GL_NONE,
}
impl GLEnumGroupSyncBehaviorFlags {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSyncBehaviorFlags> {
        match raw {
            0 => Some(GLEnumGroupSyncBehaviorFlags::GL_NONE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSyncCondition {
    GL_SYNC_GPU_COMMANDS_COMPLETE,
}
impl GLEnumGroupSyncCondition {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSyncCondition> {
        match raw {
            0x9117 => Some(GLEnumGroupSyncCondition::GL_SYNC_GPU_COMMANDS_COMPLETE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSyncObjectMask {
    GL_SYNC_FLUSH_COMMANDS_BIT,
}
impl GLEnumGroupSyncObjectMask {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSyncObjectMask> {
        match raw {
            0x00000001 => Some(GLEnumGroupSyncObjectMask::GL_SYNC_FLUSH_COMMANDS_BIT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSyncParameterName {
    GL_OBJECT_TYPE,
    GL_SYNC_CONDITION,
    GL_SYNC_STATUS,
    GL_SYNC_FLAGS,
}
impl GLEnumGroupSyncParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSyncParameterName> {
        match raw {
            0x9112 => Some(GLEnumGroupSyncParameterName::GL_OBJECT_TYPE),
            0x9113 => Some(GLEnumGroupSyncParameterName::GL_SYNC_CONDITION),
            0x9114 => Some(GLEnumGroupSyncParameterName::GL_SYNC_STATUS),
            0x9115 => Some(GLEnumGroupSyncParameterName::GL_SYNC_FLAGS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupSyncStatus {
    GL_ALREADY_SIGNALED,
    GL_TIMEOUT_EXPIRED,
    GL_CONDITION_SATISFIED,
    GL_WAIT_FAILED,
}
impl GLEnumGroupSyncStatus {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupSyncStatus> {
        match raw {
            0x911A => Some(GLEnumGroupSyncStatus::GL_ALREADY_SIGNALED),
            0x911B => Some(GLEnumGroupSyncStatus::GL_TIMEOUT_EXPIRED),
            0x911C => Some(GLEnumGroupSyncStatus::GL_CONDITION_SATISFIED),
            0x911D => Some(GLEnumGroupSyncStatus::GL_WAIT_FAILED),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTangentPointerTypeEXT {
    GL_BYTE,
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupTangentPointerTypeEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTangentPointerTypeEXT> {
        match raw {
            0x1400 => Some(GLEnumGroupTangentPointerTypeEXT::GL_BYTE),
            0x1402 => Some(GLEnumGroupTangentPointerTypeEXT::GL_SHORT),
            0x1404 => Some(GLEnumGroupTangentPointerTypeEXT::GL_INT),
            0x1406 => Some(GLEnumGroupTangentPointerTypeEXT::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTexCoordPointerType {
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupTexCoordPointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTexCoordPointerType> {
        match raw {
            0x1402 => Some(GLEnumGroupTexCoordPointerType::GL_SHORT),
            0x1404 => Some(GLEnumGroupTexCoordPointerType::GL_INT),
            0x1406 => Some(GLEnumGroupTexCoordPointerType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTexStorageAttribs {
    GL_SURFACE_COMPRESSION_EXT,
    GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT,
    GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT,
}
impl GLEnumGroupTexStorageAttribs {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTexStorageAttribs> {
        match raw {
            0x96C0 => Some(GLEnumGroupTexStorageAttribs::GL_SURFACE_COMPRESSION_EXT),
            0x96C1 => Some(GLEnumGroupTexStorageAttribs::GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT),
            0x96C2 => Some(GLEnumGroupTexStorageAttribs::GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureCompareMode {
    GL_NONE,
    GL_COMPARE_REF_TO_TEXTURE,
}
impl GLEnumGroupTextureCompareMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureCompareMode> {
        match raw {
            0 => Some(GLEnumGroupTextureCompareMode::GL_NONE),
            0x884E => Some(GLEnumGroupTextureCompareMode::GL_COMPARE_REF_TO_TEXTURE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureEnvMode {
    GL_BLEND,
    GL_REPLACE,
}
impl GLEnumGroupTextureEnvMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureEnvMode> {
        match raw {
            0x0BE2 => Some(GLEnumGroupTextureEnvMode::GL_BLEND),
            0x1E01 => Some(GLEnumGroupTextureEnvMode::GL_REPLACE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureMagFilter {
    GL_NEAREST,
    GL_LINEAR,
}
impl GLEnumGroupTextureMagFilter {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureMagFilter> {
        match raw {
            0x2600 => Some(GLEnumGroupTextureMagFilter::GL_NEAREST),
            0x2601 => Some(GLEnumGroupTextureMagFilter::GL_LINEAR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureMinFilter {
    GL_NEAREST,
    GL_LINEAR,
    GL_NEAREST_MIPMAP_NEAREST,
    GL_LINEAR_MIPMAP_NEAREST,
    GL_NEAREST_MIPMAP_LINEAR,
    GL_LINEAR_MIPMAP_LINEAR,
}
impl GLEnumGroupTextureMinFilter {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureMinFilter> {
        match raw {
            0x2600 => Some(GLEnumGroupTextureMinFilter::GL_NEAREST),
            0x2601 => Some(GLEnumGroupTextureMinFilter::GL_LINEAR),
            0x2700 => Some(GLEnumGroupTextureMinFilter::GL_NEAREST_MIPMAP_NEAREST),
            0x2701 => Some(GLEnumGroupTextureMinFilter::GL_LINEAR_MIPMAP_NEAREST),
            0x2702 => Some(GLEnumGroupTextureMinFilter::GL_NEAREST_MIPMAP_LINEAR),
            0x2703 => Some(GLEnumGroupTextureMinFilter::GL_LINEAR_MIPMAP_LINEAR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureParameterName {
    GL_TEXTURE_BORDER_COLOR_NV,
    GL_TEXTURE_MAG_FILTER,
    GL_TEXTURE_MIN_FILTER,
    GL_TEXTURE_WRAP_S,
    GL_TEXTURE_WRAP_T,
    GL_TEXTURE_WRAP_R,
    GL_TEXTURE_MIN_LOD,
    GL_TEXTURE_MAX_LOD,
    GL_TEXTURE_BASE_LEVEL,
    GL_TEXTURE_MAX_LEVEL,
    GL_TEXTURE_COMPARE_MODE,
    GL_TEXTURE_COMPARE_FUNC,
    GL_TEXTURE_SWIZZLE_R,
    GL_TEXTURE_SWIZZLE_G,
    GL_TEXTURE_SWIZZLE_B,
    GL_TEXTURE_SWIZZLE_A,
    GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM,
    GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM,
    GL_TEXTURE_Y_DEGAMMA_QCOM,
    GL_TEXTURE_CBCR_DEGAMMA_QCOM,
}
impl GLEnumGroupTextureParameterName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureParameterName> {
        match raw {
            0x1004 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_BORDER_COLOR_NV),
            0x2800 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_MAG_FILTER),
            0x2801 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_MIN_FILTER),
            0x2802 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_WRAP_S),
            0x2803 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_WRAP_T),
            0x8072 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_WRAP_R),
            0x813A => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_MIN_LOD),
            0x813B => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_MAX_LOD),
            0x813C => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_BASE_LEVEL),
            0x813D => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_MAX_LEVEL),
            0x884C => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_COMPARE_MODE),
            0x884D => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_COMPARE_FUNC),
            0x8E42 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_SWIZZLE_R),
            0x8E43 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_SWIZZLE_G),
            0x8E44 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_SWIZZLE_B),
            0x8E45 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_SWIZZLE_A),
            0x8F6A => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM),
            0x96A0 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM),
            0x9710 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_Y_DEGAMMA_QCOM),
            0x9711 => Some(GLEnumGroupTextureParameterName::GL_TEXTURE_CBCR_DEGAMMA_QCOM),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureSwizzle {
    GL_ZERO,
    GL_ONE,
    GL_RED,
    GL_GREEN,
    GL_BLUE,
    GL_ALPHA,
}
impl GLEnumGroupTextureSwizzle {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureSwizzle> {
        match raw {
            0 => Some(GLEnumGroupTextureSwizzle::GL_ZERO),
            1 => Some(GLEnumGroupTextureSwizzle::GL_ONE),
            0x1903 => Some(GLEnumGroupTextureSwizzle::GL_RED),
            0x1904 => Some(GLEnumGroupTextureSwizzle::GL_GREEN),
            0x1905 => Some(GLEnumGroupTextureSwizzle::GL_BLUE),
            0x1906 => Some(GLEnumGroupTextureSwizzle::GL_ALPHA),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureTarget {
    GL_TEXTURE_2D,
    GL_TEXTURE_3D,
    GL_TEXTURE_CUBE_MAP,
    GL_TEXTURE_CUBE_MAP_POSITIVE_X,
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
    GL_TEXTURE_2D_ARRAY,
    GL_RENDERBUFFER,
    GL_TEXTURE_CUBE_MAP_ARRAY_EXT,
    GL_TEXTURE_CUBE_MAP_ARRAY_OES,
}
impl GLEnumGroupTextureTarget {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureTarget> {
        match raw {
            0x0DE1 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_2D),
            0x806F => Some(GLEnumGroupTextureTarget::GL_TEXTURE_3D),
            0x8513 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP),
            0x8515 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_POSITIVE_X),
            0x8516 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_NEGATIVE_X),
            0x8517 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_POSITIVE_Y),
            0x8518 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_NEGATIVE_Y),
            0x8519 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_POSITIVE_Z),
            0x851A => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_NEGATIVE_Z),
            0x8C1A => Some(GLEnumGroupTextureTarget::GL_TEXTURE_2D_ARRAY),
            0x8D41 => Some(GLEnumGroupTextureTarget::GL_RENDERBUFFER),
            0x9009 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_ARRAY_EXT),
            0x9009 => Some(GLEnumGroupTextureTarget::GL_TEXTURE_CUBE_MAP_ARRAY_OES),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureUnit {
    GL_TEXTURE0,
    GL_TEXTURE1,
    GL_TEXTURE2,
    GL_TEXTURE3,
    GL_TEXTURE4,
    GL_TEXTURE5,
    GL_TEXTURE6,
    GL_TEXTURE7,
    GL_TEXTURE8,
    GL_TEXTURE9,
    GL_TEXTURE10,
    GL_TEXTURE11,
    GL_TEXTURE12,
    GL_TEXTURE13,
    GL_TEXTURE14,
    GL_TEXTURE15,
    GL_TEXTURE16,
    GL_TEXTURE17,
    GL_TEXTURE18,
    GL_TEXTURE19,
    GL_TEXTURE20,
    GL_TEXTURE21,
    GL_TEXTURE22,
    GL_TEXTURE23,
    GL_TEXTURE24,
    GL_TEXTURE25,
    GL_TEXTURE26,
    GL_TEXTURE27,
    GL_TEXTURE28,
    GL_TEXTURE29,
    GL_TEXTURE30,
    GL_TEXTURE31,
}
impl GLEnumGroupTextureUnit {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureUnit> {
        match raw {
            0x84C0 => Some(GLEnumGroupTextureUnit::GL_TEXTURE0),
            0x84C1 => Some(GLEnumGroupTextureUnit::GL_TEXTURE1),
            0x84C2 => Some(GLEnumGroupTextureUnit::GL_TEXTURE2),
            0x84C3 => Some(GLEnumGroupTextureUnit::GL_TEXTURE3),
            0x84C4 => Some(GLEnumGroupTextureUnit::GL_TEXTURE4),
            0x84C5 => Some(GLEnumGroupTextureUnit::GL_TEXTURE5),
            0x84C6 => Some(GLEnumGroupTextureUnit::GL_TEXTURE6),
            0x84C7 => Some(GLEnumGroupTextureUnit::GL_TEXTURE7),
            0x84C8 => Some(GLEnumGroupTextureUnit::GL_TEXTURE8),
            0x84C9 => Some(GLEnumGroupTextureUnit::GL_TEXTURE9),
            0x84CA => Some(GLEnumGroupTextureUnit::GL_TEXTURE10),
            0x84CB => Some(GLEnumGroupTextureUnit::GL_TEXTURE11),
            0x84CC => Some(GLEnumGroupTextureUnit::GL_TEXTURE12),
            0x84CD => Some(GLEnumGroupTextureUnit::GL_TEXTURE13),
            0x84CE => Some(GLEnumGroupTextureUnit::GL_TEXTURE14),
            0x84CF => Some(GLEnumGroupTextureUnit::GL_TEXTURE15),
            0x84D0 => Some(GLEnumGroupTextureUnit::GL_TEXTURE16),
            0x84D1 => Some(GLEnumGroupTextureUnit::GL_TEXTURE17),
            0x84D2 => Some(GLEnumGroupTextureUnit::GL_TEXTURE18),
            0x84D3 => Some(GLEnumGroupTextureUnit::GL_TEXTURE19),
            0x84D4 => Some(GLEnumGroupTextureUnit::GL_TEXTURE20),
            0x84D5 => Some(GLEnumGroupTextureUnit::GL_TEXTURE21),
            0x84D6 => Some(GLEnumGroupTextureUnit::GL_TEXTURE22),
            0x84D7 => Some(GLEnumGroupTextureUnit::GL_TEXTURE23),
            0x84D8 => Some(GLEnumGroupTextureUnit::GL_TEXTURE24),
            0x84D9 => Some(GLEnumGroupTextureUnit::GL_TEXTURE25),
            0x84DA => Some(GLEnumGroupTextureUnit::GL_TEXTURE26),
            0x84DB => Some(GLEnumGroupTextureUnit::GL_TEXTURE27),
            0x84DC => Some(GLEnumGroupTextureUnit::GL_TEXTURE28),
            0x84DD => Some(GLEnumGroupTextureUnit::GL_TEXTURE29),
            0x84DE => Some(GLEnumGroupTextureUnit::GL_TEXTURE30),
            0x84DF => Some(GLEnumGroupTextureUnit::GL_TEXTURE31),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTextureWrapMode {
    GL_REPEAT,
    GL_CLAMP_TO_BORDER_NV,
    GL_CLAMP_TO_EDGE,
    GL_MIRRORED_REPEAT,
}
impl GLEnumGroupTextureWrapMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTextureWrapMode> {
        match raw {
            0x2901 => Some(GLEnumGroupTextureWrapMode::GL_REPEAT),
            0x812D => Some(GLEnumGroupTextureWrapMode::GL_CLAMP_TO_BORDER_NV),
            0x812F => Some(GLEnumGroupTextureWrapMode::GL_CLAMP_TO_EDGE),
            0x8370 => Some(GLEnumGroupTextureWrapMode::GL_MIRRORED_REPEAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTransformFeedbackBufferMode {
    GL_INTERLEAVED_ATTRIBS,
    GL_SEPARATE_ATTRIBS,
}
impl GLEnumGroupTransformFeedbackBufferMode {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTransformFeedbackBufferMode> {
        match raw {
            0x8C8C => Some(GLEnumGroupTransformFeedbackBufferMode::GL_INTERLEAVED_ATTRIBS),
            0x8C8D => Some(GLEnumGroupTransformFeedbackBufferMode::GL_SEPARATE_ATTRIBS),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTransformFeedbackPName {
    GL_TRANSFORM_FEEDBACK_BUFFER_START,
    GL_TRANSFORM_FEEDBACK_BUFFER_SIZE,
    GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
    GL_TRANSFORM_FEEDBACK_PAUSED,
    GL_TRANSFORM_FEEDBACK_ACTIVE,
}
impl GLEnumGroupTransformFeedbackPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTransformFeedbackPName> {
        match raw {
            0x8C84 => Some(GLEnumGroupTransformFeedbackPName::GL_TRANSFORM_FEEDBACK_BUFFER_START),
            0x8C85 => Some(GLEnumGroupTransformFeedbackPName::GL_TRANSFORM_FEEDBACK_BUFFER_SIZE),
            0x8C8F => Some(GLEnumGroupTransformFeedbackPName::GL_TRANSFORM_FEEDBACK_BUFFER_BINDING),
            0x8E23 => Some(GLEnumGroupTransformFeedbackPName::GL_TRANSFORM_FEEDBACK_PAUSED),
            0x8E24 => Some(GLEnumGroupTransformFeedbackPName::GL_TRANSFORM_FEEDBACK_ACTIVE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupTriangleFace {
    GL_FRONT,
    GL_BACK,
    GL_FRONT_AND_BACK,
}
impl GLEnumGroupTriangleFace {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupTriangleFace> {
        match raw {
            0x0404 => Some(GLEnumGroupTriangleFace::GL_FRONT),
            0x0405 => Some(GLEnumGroupTriangleFace::GL_BACK),
            0x0408 => Some(GLEnumGroupTriangleFace::GL_FRONT_AND_BACK),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupUniformBlockPName {
    GL_UNIFORM_BLOCK_BINDING,
    GL_UNIFORM_BLOCK_DATA_SIZE,
    GL_UNIFORM_BLOCK_NAME_LENGTH,
    GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS,
    GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES,
    GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER,
    GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER,
}
impl GLEnumGroupUniformBlockPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupUniformBlockPName> {
        match raw {
            0x8A3F => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_BINDING),
            0x8A40 => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_DATA_SIZE),
            0x8A41 => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_NAME_LENGTH),
            0x8A42 => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS),
            0x8A43 => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
            0x8A44 => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
            0x8A46 => Some(GLEnumGroupUniformBlockPName::GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupUniformPName {
    GL_UNIFORM_TYPE,
    GL_UNIFORM_SIZE,
    GL_UNIFORM_NAME_LENGTH,
    GL_UNIFORM_BLOCK_INDEX,
    GL_UNIFORM_OFFSET,
    GL_UNIFORM_ARRAY_STRIDE,
    GL_UNIFORM_MATRIX_STRIDE,
    GL_UNIFORM_IS_ROW_MAJOR,
}
impl GLEnumGroupUniformPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupUniformPName> {
        match raw {
            0x8A37 => Some(GLEnumGroupUniformPName::GL_UNIFORM_TYPE),
            0x8A38 => Some(GLEnumGroupUniformPName::GL_UNIFORM_SIZE),
            0x8A39 => Some(GLEnumGroupUniformPName::GL_UNIFORM_NAME_LENGTH),
            0x8A3A => Some(GLEnumGroupUniformPName::GL_UNIFORM_BLOCK_INDEX),
            0x8A3B => Some(GLEnumGroupUniformPName::GL_UNIFORM_OFFSET),
            0x8A3C => Some(GLEnumGroupUniformPName::GL_UNIFORM_ARRAY_STRIDE),
            0x8A3D => Some(GLEnumGroupUniformPName::GL_UNIFORM_MATRIX_STRIDE),
            0x8A3E => Some(GLEnumGroupUniformPName::GL_UNIFORM_IS_ROW_MAJOR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupUniformType {
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
    GL_FLOAT_VEC2,
    GL_FLOAT_VEC3,
    GL_FLOAT_VEC4,
    GL_INT_VEC2,
    GL_INT_VEC3,
    GL_INT_VEC4,
    GL_BOOL,
    GL_BOOL_VEC2,
    GL_BOOL_VEC3,
    GL_BOOL_VEC4,
    GL_FLOAT_MAT2,
    GL_FLOAT_MAT3,
    GL_FLOAT_MAT4,
    GL_SAMPLER_2D,
    GL_SAMPLER_3D,
    GL_SAMPLER_CUBE,
    GL_SAMPLER_2D_SHADOW,
    GL_FLOAT_MAT2x3,
    GL_FLOAT_MAT2x4,
    GL_FLOAT_MAT3x2,
    GL_FLOAT_MAT3x4,
    GL_FLOAT_MAT4x2,
    GL_FLOAT_MAT4x3,
    GL_SAMPLER_2D_ARRAY,
    GL_SAMPLER_2D_ARRAY_SHADOW,
    GL_SAMPLER_CUBE_SHADOW,
    GL_UNSIGNED_INT_VEC2,
    GL_UNSIGNED_INT_VEC3,
    GL_UNSIGNED_INT_VEC4,
    GL_INT_SAMPLER_2D,
    GL_INT_SAMPLER_3D,
    GL_INT_SAMPLER_CUBE,
    GL_INT_SAMPLER_2D_ARRAY,
    GL_UNSIGNED_INT_SAMPLER_2D,
    GL_UNSIGNED_INT_SAMPLER_3D,
    GL_UNSIGNED_INT_SAMPLER_CUBE,
    GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,
}
impl GLEnumGroupUniformType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupUniformType> {
        match raw {
            0x1404 => Some(GLEnumGroupUniformType::GL_INT),
            0x1405 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupUniformType::GL_FLOAT),
            0x8B50 => Some(GLEnumGroupUniformType::GL_FLOAT_VEC2),
            0x8B51 => Some(GLEnumGroupUniformType::GL_FLOAT_VEC3),
            0x8B52 => Some(GLEnumGroupUniformType::GL_FLOAT_VEC4),
            0x8B53 => Some(GLEnumGroupUniformType::GL_INT_VEC2),
            0x8B54 => Some(GLEnumGroupUniformType::GL_INT_VEC3),
            0x8B55 => Some(GLEnumGroupUniformType::GL_INT_VEC4),
            0x8B56 => Some(GLEnumGroupUniformType::GL_BOOL),
            0x8B57 => Some(GLEnumGroupUniformType::GL_BOOL_VEC2),
            0x8B58 => Some(GLEnumGroupUniformType::GL_BOOL_VEC3),
            0x8B59 => Some(GLEnumGroupUniformType::GL_BOOL_VEC4),
            0x8B5A => Some(GLEnumGroupUniformType::GL_FLOAT_MAT2),
            0x8B5B => Some(GLEnumGroupUniformType::GL_FLOAT_MAT3),
            0x8B5C => Some(GLEnumGroupUniformType::GL_FLOAT_MAT4),
            0x8B5E => Some(GLEnumGroupUniformType::GL_SAMPLER_2D),
            0x8B5F => Some(GLEnumGroupUniformType::GL_SAMPLER_3D),
            0x8B60 => Some(GLEnumGroupUniformType::GL_SAMPLER_CUBE),
            0x8B62 => Some(GLEnumGroupUniformType::GL_SAMPLER_2D_SHADOW),
            0x8B65 => Some(GLEnumGroupUniformType::GL_FLOAT_MAT2x3),
            0x8B66 => Some(GLEnumGroupUniformType::GL_FLOAT_MAT2x4),
            0x8B67 => Some(GLEnumGroupUniformType::GL_FLOAT_MAT3x2),
            0x8B68 => Some(GLEnumGroupUniformType::GL_FLOAT_MAT3x4),
            0x8B69 => Some(GLEnumGroupUniformType::GL_FLOAT_MAT4x2),
            0x8B6A => Some(GLEnumGroupUniformType::GL_FLOAT_MAT4x3),
            0x8DC1 => Some(GLEnumGroupUniformType::GL_SAMPLER_2D_ARRAY),
            0x8DC4 => Some(GLEnumGroupUniformType::GL_SAMPLER_2D_ARRAY_SHADOW),
            0x8DC5 => Some(GLEnumGroupUniformType::GL_SAMPLER_CUBE_SHADOW),
            0x8DC6 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_VEC2),
            0x8DC7 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_VEC3),
            0x8DC8 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_VEC4),
            0x8DCA => Some(GLEnumGroupUniformType::GL_INT_SAMPLER_2D),
            0x8DCB => Some(GLEnumGroupUniformType::GL_INT_SAMPLER_3D),
            0x8DCC => Some(GLEnumGroupUniformType::GL_INT_SAMPLER_CUBE),
            0x8DCF => Some(GLEnumGroupUniformType::GL_INT_SAMPLER_2D_ARRAY),
            0x8DD2 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_SAMPLER_2D),
            0x8DD3 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_SAMPLER_3D),
            0x8DD4 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_SAMPLER_CUBE),
            0x8DD7 => Some(GLEnumGroupUniformType::GL_UNSIGNED_INT_SAMPLER_2D_ARRAY),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexArrayPName {
    GL_VERTEX_ATTRIB_ARRAY_ENABLED,
    GL_VERTEX_ATTRIB_ARRAY_SIZE,
    GL_VERTEX_ATTRIB_ARRAY_STRIDE,
    GL_VERTEX_ATTRIB_ARRAY_TYPE,
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,
    GL_VERTEX_ATTRIB_ARRAY_INTEGER,
    GL_VERTEX_ATTRIB_ARRAY_DIVISOR,
}
impl GLEnumGroupVertexArrayPName {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexArrayPName> {
        match raw {
            0x8622 => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_ENABLED),
            0x8623 => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_SIZE),
            0x8624 => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_STRIDE),
            0x8625 => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_TYPE),
            0x886A => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_NORMALIZED),
            0x88FD => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_INTEGER),
            0x88FE => Some(GLEnumGroupVertexArrayPName::GL_VERTEX_ATTRIB_ARRAY_DIVISOR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexAttribEnum {
    GL_VERTEX_ATTRIB_ARRAY_ENABLED,
    GL_VERTEX_ATTRIB_ARRAY_SIZE,
    GL_VERTEX_ATTRIB_ARRAY_STRIDE,
    GL_VERTEX_ATTRIB_ARRAY_TYPE,
    GL_CURRENT_VERTEX_ATTRIB,
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,
    GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,
    GL_VERTEX_ATTRIB_ARRAY_INTEGER,
    GL_VERTEX_ATTRIB_ARRAY_DIVISOR,
}
impl GLEnumGroupVertexAttribEnum {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexAttribEnum> {
        match raw {
            0x8622 => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_ENABLED),
            0x8623 => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_SIZE),
            0x8624 => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_STRIDE),
            0x8625 => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_TYPE),
            0x8626 => Some(GLEnumGroupVertexAttribEnum::GL_CURRENT_VERTEX_ATTRIB),
            0x886A => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_NORMALIZED),
            0x889F => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING),
            0x88FD => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_INTEGER),
            0x88FE => Some(GLEnumGroupVertexAttribEnum::GL_VERTEX_ATTRIB_ARRAY_DIVISOR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexAttribIType {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
}
impl GLEnumGroupVertexAttribIType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexAttribIType> {
        match raw {
            0x1400 => Some(GLEnumGroupVertexAttribIType::GL_BYTE),
            0x1401 => Some(GLEnumGroupVertexAttribIType::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupVertexAttribIType::GL_SHORT),
            0x1403 => Some(GLEnumGroupVertexAttribIType::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupVertexAttribIType::GL_INT),
            0x1405 => Some(GLEnumGroupVertexAttribIType::GL_UNSIGNED_INT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexAttribPointerPropertyARB {
    GL_VERTEX_ATTRIB_ARRAY_POINTER,
}
impl GLEnumGroupVertexAttribPointerPropertyARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexAttribPointerPropertyARB> {
        match raw {
            0x8645 => Some(GLEnumGroupVertexAttribPointerPropertyARB::GL_VERTEX_ATTRIB_ARRAY_POINTER),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexAttribPointerType {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
    GL_HALF_FLOAT,
    GL_FIXED,
    GL_UNSIGNED_INT_2_10_10_10_REV,
    GL_UNSIGNED_INT_2_10_10_10_REV_EXT,
    GL_UNSIGNED_INT_10F_11F_11F_REV,
    GL_INT_2_10_10_10_REV,
}
impl GLEnumGroupVertexAttribPointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexAttribPointerType> {
        match raw {
            0x1400 => Some(GLEnumGroupVertexAttribPointerType::GL_BYTE),
            0x1401 => Some(GLEnumGroupVertexAttribPointerType::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupVertexAttribPointerType::GL_SHORT),
            0x1403 => Some(GLEnumGroupVertexAttribPointerType::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupVertexAttribPointerType::GL_INT),
            0x1405 => Some(GLEnumGroupVertexAttribPointerType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupVertexAttribPointerType::GL_FLOAT),
            0x140B => Some(GLEnumGroupVertexAttribPointerType::GL_HALF_FLOAT),
            0x140C => Some(GLEnumGroupVertexAttribPointerType::GL_FIXED),
            0x8368 => Some(GLEnumGroupVertexAttribPointerType::GL_UNSIGNED_INT_2_10_10_10_REV),
            0x8368 => Some(GLEnumGroupVertexAttribPointerType::GL_UNSIGNED_INT_2_10_10_10_REV_EXT),
            0x8C3B => Some(GLEnumGroupVertexAttribPointerType::GL_UNSIGNED_INT_10F_11F_11F_REV),
            0x8D9F => Some(GLEnumGroupVertexAttribPointerType::GL_INT_2_10_10_10_REV),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexAttribPropertyARB {
    GL_VERTEX_ATTRIB_ARRAY_ENABLED,
    GL_VERTEX_ATTRIB_ARRAY_SIZE,
    GL_VERTEX_ATTRIB_ARRAY_STRIDE,
    GL_VERTEX_ATTRIB_ARRAY_TYPE,
    GL_CURRENT_VERTEX_ATTRIB,
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,
    GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,
    GL_VERTEX_ATTRIB_ARRAY_INTEGER,
    GL_VERTEX_ATTRIB_ARRAY_DIVISOR,
}
impl GLEnumGroupVertexAttribPropertyARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexAttribPropertyARB> {
        match raw {
            0x8622 => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_ENABLED),
            0x8623 => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_SIZE),
            0x8624 => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_STRIDE),
            0x8625 => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_TYPE),
            0x8626 => Some(GLEnumGroupVertexAttribPropertyARB::GL_CURRENT_VERTEX_ATTRIB),
            0x886A => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_NORMALIZED),
            0x889F => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING),
            0x88FD => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_INTEGER),
            0x88FE => Some(GLEnumGroupVertexAttribPropertyARB::GL_VERTEX_ATTRIB_ARRAY_DIVISOR),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexAttribType {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
    GL_HALF_FLOAT,
    GL_FIXED,
    GL_UNSIGNED_INT_2_10_10_10_REV,
    GL_UNSIGNED_INT_2_10_10_10_REV_EXT,
    GL_UNSIGNED_INT_10F_11F_11F_REV,
    GL_INT_2_10_10_10_REV,
}
impl GLEnumGroupVertexAttribType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexAttribType> {
        match raw {
            0x1400 => Some(GLEnumGroupVertexAttribType::GL_BYTE),
            0x1401 => Some(GLEnumGroupVertexAttribType::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupVertexAttribType::GL_SHORT),
            0x1403 => Some(GLEnumGroupVertexAttribType::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupVertexAttribType::GL_INT),
            0x1405 => Some(GLEnumGroupVertexAttribType::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupVertexAttribType::GL_FLOAT),
            0x140B => Some(GLEnumGroupVertexAttribType::GL_HALF_FLOAT),
            0x140C => Some(GLEnumGroupVertexAttribType::GL_FIXED),
            0x8368 => Some(GLEnumGroupVertexAttribType::GL_UNSIGNED_INT_2_10_10_10_REV),
            0x8368 => Some(GLEnumGroupVertexAttribType::GL_UNSIGNED_INT_2_10_10_10_REV_EXT),
            0x8C3B => Some(GLEnumGroupVertexAttribType::GL_UNSIGNED_INT_10F_11F_11F_REV),
            0x8D9F => Some(GLEnumGroupVertexAttribType::GL_INT_2_10_10_10_REV),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexBufferObjectUsage {
    GL_STREAM_DRAW,
    GL_STREAM_READ,
    GL_STREAM_COPY,
    GL_STATIC_DRAW,
    GL_STATIC_READ,
    GL_STATIC_COPY,
    GL_DYNAMIC_DRAW,
    GL_DYNAMIC_READ,
    GL_DYNAMIC_COPY,
}
impl GLEnumGroupVertexBufferObjectUsage {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexBufferObjectUsage> {
        match raw {
            0x88E0 => Some(GLEnumGroupVertexBufferObjectUsage::GL_STREAM_DRAW),
            0x88E1 => Some(GLEnumGroupVertexBufferObjectUsage::GL_STREAM_READ),
            0x88E2 => Some(GLEnumGroupVertexBufferObjectUsage::GL_STREAM_COPY),
            0x88E4 => Some(GLEnumGroupVertexBufferObjectUsage::GL_STATIC_DRAW),
            0x88E5 => Some(GLEnumGroupVertexBufferObjectUsage::GL_STATIC_READ),
            0x88E6 => Some(GLEnumGroupVertexBufferObjectUsage::GL_STATIC_COPY),
            0x88E8 => Some(GLEnumGroupVertexBufferObjectUsage::GL_DYNAMIC_DRAW),
            0x88E9 => Some(GLEnumGroupVertexBufferObjectUsage::GL_DYNAMIC_READ),
            0x88EA => Some(GLEnumGroupVertexBufferObjectUsage::GL_DYNAMIC_COPY),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexPointerType {
    GL_SHORT,
    GL_INT,
    GL_FLOAT,
}
impl GLEnumGroupVertexPointerType {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexPointerType> {
        match raw {
            0x1402 => Some(GLEnumGroupVertexPointerType::GL_SHORT),
            0x1404 => Some(GLEnumGroupVertexPointerType::GL_INT),
            0x1406 => Some(GLEnumGroupVertexPointerType::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexShaderWriteMaskEXT {
    GL_FALSE,
    GL_TRUE,
}
impl GLEnumGroupVertexShaderWriteMaskEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexShaderWriteMaskEXT> {
        match raw {
            0 => Some(GLEnumGroupVertexShaderWriteMaskEXT::GL_FALSE),
            1 => Some(GLEnumGroupVertexShaderWriteMaskEXT::GL_TRUE),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupVertexWeightPointerTypeEXT {
    GL_FLOAT,
}
impl GLEnumGroupVertexWeightPointerTypeEXT {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupVertexWeightPointerTypeEXT> {
        match raw {
            0x1406 => Some(GLEnumGroupVertexWeightPointerTypeEXT::GL_FLOAT),
            _ => None,
        }
    }
}
#[derive(Clone, Copy)]
pub enum GLEnumGroupWeightPointerTypeARB {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_FLOAT,
}
impl GLEnumGroupWeightPointerTypeARB {
    #[rustfmt::skip]
    pub fn from_raw(raw: u32) -> Option<GLEnumGroupWeightPointerTypeARB> {
        match raw {
            0x1400 => Some(GLEnumGroupWeightPointerTypeARB::GL_BYTE),
            0x1401 => Some(GLEnumGroupWeightPointerTypeARB::GL_UNSIGNED_BYTE),
            0x1402 => Some(GLEnumGroupWeightPointerTypeARB::GL_SHORT),
            0x1403 => Some(GLEnumGroupWeightPointerTypeARB::GL_UNSIGNED_SHORT),
            0x1404 => Some(GLEnumGroupWeightPointerTypeARB::GL_INT),
            0x1405 => Some(GLEnumGroupWeightPointerTypeARB::GL_UNSIGNED_INT),
            0x1406 => Some(GLEnumGroupWeightPointerTypeARB::GL_FLOAT),
            _ => None,
        }
    }
}
pub const EXTENSIONS: [&str; 188] = [
    "GL_AMD_compressed_3DC_texture",
    "GL_AMD_compressed_ATC_texture",
    "GL_AMD_program_binary_Z400",
    "GL_ANDROID_extension_pack_es31a",
    "GL_ANGLE_depth_texture",
    "GL_ANGLE_pack_reverse_row_order",
    "GL_ANGLE_program_binary",
    "GL_ANGLE_texture_compression_dxt3",
    "GL_ANGLE_texture_compression_dxt5",
    "GL_ANGLE_texture_usage",
    "GL_APPLE_clip_distance",
    "GL_APPLE_color_buffer_packed_float",
    "GL_APPLE_rgb_422",
    "GL_APPLE_texture_format_BGRA8888",
    "GL_APPLE_texture_max_level",
    "GL_APPLE_texture_packed_float",
    "GL_ARM_mali_program_binary",
    "GL_ARM_mali_shader_binary",
    "GL_ARM_rgba8",
    "GL_ARM_shader_framebuffer_fetch",
    "GL_ARM_shader_framebuffer_fetch_depth_stencil",
    "GL_ARM_texture_unnormalized_coordinates",
    "GL_DMP_program_binary",
    "GL_DMP_shader_binary",
    "GL_EXT_EGL_image_array",
    "GL_EXT_EGL_image_storage_compression",
    "GL_EXT_YUV_target",
    "GL_EXT_clip_cull_distance",
    "GL_EXT_color_buffer_float",
    "GL_EXT_color_buffer_half_float",
    "GL_EXT_conservative_depth",
    "GL_EXT_depth_clamp",
    "GL_EXT_float_blend",
    "GL_EXT_geometry_point_size",
    "GL_EXT_gpu_shader5",
    "GL_EXT_multisampled_compatibility",
    "GL_EXT_multisampled_render_to_texture2",
    "GL_EXT_multiview_tessellation_geometry_shader",
    "GL_EXT_multiview_texture_multisample",
    "GL_EXT_multiview_timer_query",
    "GL_EXT_post_depth_coverage",
    "GL_EXT_protected_textures",
    "GL_EXT_pvrtc_sRGB",
    "GL_EXT_read_format_bgra",
    "GL_EXT_render_snorm",
    "GL_EXT_sRGB",
    "GL_EXT_sRGB_write_control",
    "GL_EXT_separate_depth_stencil",
    "GL_EXT_shader_framebuffer_fetch",
    "GL_EXT_shader_group_vote",
    "GL_EXT_shader_implicit_conversions",
    "GL_EXT_shader_integer_mix",
    "GL_EXT_shader_io_blocks",
    "GL_EXT_shader_non_constant_global_initializers",
    "GL_EXT_shader_pixel_local_storage",
    "GL_EXT_shader_samples_identical",
    "GL_EXT_shader_texture_lod",
    "GL_EXT_shadow_samplers",
    "GL_EXT_sparse_texture2",
    "GL_EXT_tessellation_point_size",
    "GL_EXT_texture_compression_astc_decode_mode",
    "GL_EXT_texture_compression_bptc",
    "GL_EXT_texture_compression_dxt1",
    "GL_EXT_texture_compression_rgtc",
    "GL_EXT_texture_compression_s3tc",
    "GL_EXT_texture_compression_s3tc_srgb",
    "GL_EXT_texture_cube_map_array",
    "GL_EXT_texture_filter_anisotropic",
    "GL_EXT_texture_filter_minmax",
    "GL_EXT_texture_format_BGRA8888",
    "GL_EXT_texture_format_sRGB_override",
    "GL_EXT_texture_mirror_clamp_to_edge",
    "GL_EXT_texture_norm16",
    "GL_EXT_texture_query_lod",
    "GL_EXT_texture_rg",
    "GL_EXT_texture_sRGB_R8",
    "GL_EXT_texture_sRGB_RG8",
    "GL_EXT_texture_sRGB_decode",
    "GL_EXT_texture_shadow_lod",
    "GL_EXT_texture_type_2_10_10_10_REV",
    "GL_EXT_unpack_subimage",
    "GL_FJ_shader_binary_GCCSO",
    "GL_IMG_program_binary",
    "GL_IMG_read_format",
    "GL_IMG_shader_binary",
    "GL_IMG_texture_compression_pvrtc",
    "GL_IMG_texture_compression_pvrtc2",
    "GL_IMG_texture_filter_cubic",
    "GL_INTEL_conservative_rasterization",
    "GL_INTEL_blackhole_render",
    "GL_KHR_blend_equation_advanced_coherent",
    "GL_KHR_context_flush_control",
    "GL_KHR_no_error",
    "GL_KHR_robust_buffer_access_behavior",
    "GL_KHR_shader_subgroup",
    "GL_KHR_texture_compression_astc_hdr",
    "GL_KHR_texture_compression_astc_ldr",
    "GL_KHR_texture_compression_astc_sliced_3d",
    "GL_MESA_bgra",
    "GL_MESA_framebuffer_flip_x",
    "GL_MESA_framebuffer_swap_xy",
    "GL_MESA_program_binary_formats",
    "GL_MESA_shader_integer_functions",
    "GL_NVX_blend_equation_advanced_multi_draw_buffers",
    "GL_NV_blend_equation_advanced_coherent",
    "GL_NV_blend_minmax_factor",
    "GL_NV_compute_shader_derivatives",
    "GL_NV_conservative_raster_pre_snap",
    "GL_NV_depth_nonlinear",
    "GL_NV_explicit_attrib_location",
    "GL_NV_fbo_color_attachments",
    "GL_NV_fill_rectangle",
    "GL_NV_fragment_shader_barycentric",
    "GL_NV_fragment_shader_interlock",
    "GL_NV_generate_mipmap_sRGB",
    "GL_NV_geometry_shader_passthrough",
    "GL_NV_image_formats",
    "GL_NV_path_rendering_shared_edge",
    "GL_NV_pixel_buffer_object",
    "GL_NV_primitive_shading_rate",
    "GL_NV_read_buffer_front",
    "GL_NV_read_depth",
    "GL_NV_read_depth_stencil",
    "GL_NV_read_stencil",
    "GL_NV_representative_fragment_test",
    "GL_NV_sRGB_formats",
    "GL_NV_sample_mask_override_coverage",
    "GL_NV_shader_atomic_fp16_vector",
    "GL_NV_shader_noperspective_interpolation",
    "GL_NV_shader_subgroup_partitioned",
    "GL_NV_shader_texture_footprint",
    "GL_NV_shadow_samplers_array",
    "GL_NV_shadow_samplers_cube",
    "GL_NV_stereo_view_rendering",
    "GL_NV_texture_border_clamp",
    "GL_NV_texture_compression_s3tc_update",
    "GL_NV_texture_npot_2D_mipmap",
    "GL_NV_viewport_array2",
    "GL_NV_pack_subimage",
    "GL_OES_EGL_image_external",
    "GL_OES_EGL_image_external_essl3",
    "GL_OES_compressed_ETC1_RGB8_sub_texture",
    "GL_OES_compressed_ETC1_RGB8_texture",
    "GL_OES_compressed_paletted_texture",
    "GL_OES_depth24",
    "GL_OES_depth32",
    "GL_OES_depth_texture",
    "GL_OES_element_index_uint",
    "GL_OES_fbo_render_mipmap",
    "GL_OES_fragment_precision_high",
    "GL_OES_geometry_point_size",
    "GL_OES_gpu_shader5",
    "GL_OES_packed_depth_stencil",
    "GL_OES_required_internalformat",
    "GL_OES_rgb8_rgba8",
    "GL_OES_sample_variables",
    "GL_OES_shader_image_atomic",
    "GL_OES_shader_io_blocks",
    "GL_OES_shader_multisample_interpolation",
    "GL_OES_standard_derivatives",
    "GL_OES_stencil1",
    "GL_OES_stencil4",
    "GL_OES_surfaceless_context",
    "GL_OES_tessellation_point_size",
    "GL_OES_texture_compression_astc",
    "GL_OES_texture_cube_map_array",
    "GL_OES_texture_float",
    "GL_OES_texture_float_linear",
    "GL_OES_texture_half_float",
    "GL_OES_texture_half_float_linear",
    "GL_OES_texture_npot",
    "GL_OES_texture_stencil8",
    "GL_OES_vertex_array_object",
    "GL_OES_vertex_half_float",
    "GL_OES_vertex_type_10_10_10_2",
    "GL_OVR_multiview2",
    "GL_QCOM_binning_control",
    "GL_QCOM_render_shared_exponent",
    "GL_QCOM_render_sRGB_R8_RG8",
    "GL_QCOM_texture_foveated2",
    "GL_QCOM_texture_foveated_subsampled_layout",
    "GL_QCOM_ycbcr_degamma",
    "GL_QCOM_texture_lod_bias",
    "GL_QCOM_perfmon_global_mode",
    "GL_QCOM_shader_framebuffer_fetch_rate",
    "GL_QCOM_writeonly_rendering",
    "GL_QCOM_YUV_texture_gather",
    "GL_VIV_shader_binary",
];
