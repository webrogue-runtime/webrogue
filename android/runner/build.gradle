plugins {
    alias(libs.plugins.rust.android)
    alias(libs.plugins.android.application)
}

def cargoProfile = "release-lto"

task copyKeyStores(type: Copy) {
    from(project.file('../../examples/gears/gears.webc')) {
        rename '.*', 'aot.webc'
    }
    into file('src/main/assets/')
}

android {
    namespace 'io.github.webrogue_runtime.runner'
    compileSdk 34
    signingConfigs {
        config {
            // keyAlias keystoreProperties['keyAlias']
            // keyPassword keystoreProperties['keyPassword']
            storeFile project.file("dummy.jks")
            storePassword "testtest"
        }
    }

    defaultConfig {
        applicationId "io.github.webrogue_runtime.runner"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DCARGO_PROFILE=${cargoProfile}"
            }
        }
    }
    buildTypes {
        release {
            resValue "string", "app_name", "webrogue"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
        debug {
            debuggable true
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "webrogue debug"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    tasks.whenTaskAdded { task ->
        if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
            task.dependsOn 'cargoBuild'
        }
        if (task.name =~ "buildCMake.*") {
            task.dependsOn 'cargoBuild'
        }
        if ((task.name == 'generateReleaseLintVitalReportModel')) {
            task.dependsOn 'copyKeyStores'
        }
        if ((task.name == 'lintVitalAnalyzeRelease')) {
            task.dependsOn 'copyKeyStores'
        }
    }

    tasks.whenTaskAdded { task ->
        if ((task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders')) {
            task.dependsOn 'cargoBuild'
        }
    }
    cargo {
        pythonCommand = "python3"
        extraCargoBuildArguments = ['--profile', cargoProfile]
        module = "../common/src/main/rust"
        libname = "webrogue_android"
        // targets = ["arm", "x86", "arm64", "x86_64"]
        targets = ["arm64"]
        features {
            defaultAnd("runner")
        }
        exec { spec, toolchain ->
            spec.environment("CARGO_TARGET_DIR", "../../../../runner/src/main/rust_target")
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    defaultConfig {
        externalNativeBuild {
            cmake {
                // abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a'
            }
        }
    }
    applicationVariants.configureEach { variant ->
        def nativeBuildTask = "externalNativeBuild${variant.name.capitalize()}"
        tasks.named("merge${variant.name.capitalize()}Assets").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("generate${variant.name.capitalize()}ResValues").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("compile${variant.name.capitalize()}JavaWithJavac").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("check${variant.name.capitalize()}DuplicateClasses").configure {
            dependsOn(nativeBuildTask)
        }
    }
    applicationVariants.configureEach { variant ->
        tasks.named("merge${variant.name.capitalize()}Assets").configure {
            dependsOn(copyKeyStores)
        }
    }
}

dependencies {
    implementation(project(":common"))

//    implementation libs.androidx.core.ktx
//    implementation libs.androidx.lifecycle.runtime.ktx
//    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
//    implementation libs.androidx.ui.graphics
//    implementation libs.androidx.ui.tooling.preview
//    implementation libs.androidx.material3
//    testImplementation libs.junit
//    androidTestImplementation libs.androidx.junit
//    androidTestImplementation libs.androidx.espresso.core
//    androidTestImplementation platform(libs.androidx.compose.bom)
//    androidTestImplementation libs.androidx.ui.test.junit4
//    debugImplementation libs.androidx.ui.tooling
//    debugImplementation libs.androidx.ui.test.manifest
}

// afterEvaluate {
//     // The `cargoBuild` task isn't available until after evaluation.
//     android.applicationVariants.all { variant ->
//         def productFlavor = ""
//         variant.productFlavors.each {
//             productFlavor += "${it.name.capitalize()}"
//         }
//         def buildType = "${variant.buildType.name.capitalize()}"
//         tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])
//     }
// }
