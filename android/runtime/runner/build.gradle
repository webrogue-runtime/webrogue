plugins {
    alias(libs.plugins.rust.android)
    alias(libs.plugins.android.application)
}

def cargoProfile = "release-lto"

task copyKeyStores(type: Copy) {
    from(project.file('../../examples/raylib/raylib.wrapp')) {
        rename '.*', 'aot.wrapp'
    }
    into file('src/main/assets/')
}

android {
    namespace 'io.github.webrogue_runtime.runner'
    compileSdk 35
    ndkVersion "27.2.12479018"
    
    signingConfigs {
        config {
            // keyAlias keystoreProperties['keyAlias']
            // keyPassword keystoreProperties['keyPassword']
            storeFile project.file("dummy.jks")
            storePassword "testtestz"
        }
    }

    defaultConfig {
        applicationId "io.github.webrogue_runtime.runner"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DCARGO_PROFILE=${cargoProfile}"
            }
        }
    }
    buildTypes {
        release {
            resValue "string", "app_name", "webrogue"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
        debug {
            debuggable true
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "webrogue debug"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    tasks.whenTaskAdded { task ->
        if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
            task.dependsOn 'cargoBuild'
        }
        if (task.name =~ "buildCMake.*") {
            task.dependsOn 'cargoBuild'
        }
        if ((task.name == 'generateReleaseLintVitalReportModel')) {
            task.dependsOn 'copyKeyStores'
        }
        if ((task.name == 'lintVitalAnalyzeRelease')) {
            task.dependsOn 'copyKeyStores'
        }
    }

    tasks.whenTaskAdded { task ->
        if ((task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders')) {
            task.dependsOn 'cargoBuild'
        }
    }
    cargo {
        pythonCommand = "python3"
        extraCargoBuildArguments = ['--profile', cargoProfile]
        module = "../common/src/main/rust"
        libname = "webrogue_android"
        // targets = ["arm", "x86", "arm64", "x86_64"]
        targets = ["arm64"]
        features {
            defaultAnd("runner")
        }
        exec { spec, toolchain ->
            spec.environment("CARGO_TARGET_DIR", "../../../../runner/src/main/rust_target")
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    defaultConfig {
        externalNativeBuild {
            cmake {
                // abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a'
            }
        }
    }
    applicationVariants.configureEach { variant ->
        def nativeBuildTask = "externalNativeBuild${variant.name.capitalize()}"
        tasks.named("merge${variant.name.capitalize()}Assets").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("generate${variant.name.capitalize()}ResValues").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("compile${variant.name.capitalize()}JavaWithJavac").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("check${variant.name.capitalize()}DuplicateClasses").configure {
            dependsOn(nativeBuildTask)
        }
    }
    applicationVariants.configureEach { variant ->
        tasks.named("merge${variant.name.capitalize()}Assets").configure {
            dependsOn(copyKeyStores)
        }
    }
}

dependencies {
    implementation(project(":common"))
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
}
